
Project_TaskVer_VEHICLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008924  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08008ac4  08008ac4  00009ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bbc  08008bbc  0000a06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008bbc  08008bbc  00009bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bc4  08008bc4  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bc4  08008bc4  00009bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008bc8  08008bc8  00009bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008bcc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d30  2000006c  08008c38  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d9c  08008c38  0000ad9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b43f  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004070  00000000  00000000  000254db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  00029550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000112f  00000000  00000000  0002aba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a428  00000000  00000000  0002bccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000193a2  00000000  00000000  000460f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ae6a  00000000  00000000  0005f499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa303  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006358  00000000  00000000  000fa348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001006a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008aac 	.word	0x08008aac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08008aac 	.word	0x08008aac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <delay_us>:

volatile uint8_t delay_done = 1;


void delay_us(uint16_t us)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim11, 0);
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <delay_us+0x30>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2200      	movs	r2, #0
 80005bc:	625a      	str	r2, [r3, #36]	@ 0x24
  while((__HAL_TIM_GET_COUNTER(&htim11)) < us);
 80005be:	bf00      	nop
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <delay_us+0x30>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d3f9      	bcc.n	80005c0 <delay_us+0x14>
}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	2000018c 	.word	0x2000018c

080005e0 <__io_putchar>:
/** @brief Retargets the C library printf function to the USART.
 *  @param None
 *  @retval None
 */
PUTCHAR_PROTOTYPE
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop
     until the end of transmission */
  if(ch == '\n')
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b0a      	cmp	r3, #10
 80005ec:	d106      	bne.n	80005fc <__io_putchar+0x1c>
    HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 80005ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005f2:	2201      	movs	r2, #1
 80005f4:	4907      	ldr	r1, [pc, #28]	@ (8000614 <__io_putchar+0x34>)
 80005f6:	4808      	ldr	r0, [pc, #32]	@ (8000618 <__io_putchar+0x38>)
 80005f8:	f003 fcb2 	bl	8003f60 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 80005fc:	1d39      	adds	r1, r7, #4
 80005fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000602:	2201      	movs	r2, #1
 8000604:	4804      	ldr	r0, [pc, #16]	@ (8000618 <__io_putchar+0x38>)
 8000606:	f003 fcab 	bl	8003f60 <HAL_UART_Transmit>
}
 800060a:	bf00      	nop
 800060c:	4618      	mov	r0, r3
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	08008ac4 	.word	0x08008ac4
 8000618:	2000021c 	.word	0x2000021c

0800061c <HAL_UART_RxCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
//  if (huart->Instance == USART2)
//  {
  HAL_UART_Receive_IT(&huart2, &rx_data, sizeof(rx_data));  // 다음 수신 준비 // 디버그용
 8000624:	2201      	movs	r2, #1
 8000626:	4935      	ldr	r1, [pc, #212]	@ (80006fc <HAL_UART_RxCpltCallback+0xe0>)
 8000628:	4835      	ldr	r0, [pc, #212]	@ (8000700 <HAL_UART_RxCpltCallback+0xe4>)
 800062a:	f003 fd24 	bl	8004076 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &rx_data, sizeof(rx_data));  // 블루투스
 800062e:	2201      	movs	r2, #1
 8000630:	4932      	ldr	r1, [pc, #200]	@ (80006fc <HAL_UART_RxCpltCallback+0xe0>)
 8000632:	4834      	ldr	r0, [pc, #208]	@ (8000704 <HAL_UART_RxCpltCallback+0xe8>)
 8000634:	f003 fd1f 	bl	8004076 <HAL_UART_Receive_IT>
    switch (rx_data)
 8000638:	4b30      	ldr	r3, [pc, #192]	@ (80006fc <HAL_UART_RxCpltCallback+0xe0>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	3b42      	subs	r3, #66	@ 0x42
 800063e:	2b16      	cmp	r3, #22
 8000640:	d858      	bhi.n	80006f4 <HAL_UART_RxCpltCallback+0xd8>
 8000642:	a201      	add	r2, pc, #4	@ (adr r2, 8000648 <HAL_UART_RxCpltCallback+0x2c>)
 8000644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000648:	080006b3 	.word	0x080006b3
 800064c:	080006f5 	.word	0x080006f5
 8000650:	080006f5 	.word	0x080006f5
 8000654:	080006f5 	.word	0x080006f5
 8000658:	080006a5 	.word	0x080006a5
 800065c:	080006f5 	.word	0x080006f5
 8000660:	080006f5 	.word	0x080006f5
 8000664:	080006f5 	.word	0x080006f5
 8000668:	080006f5 	.word	0x080006f5
 800066c:	080006f5 	.word	0x080006f5
 8000670:	080006c1 	.word	0x080006c1
 8000674:	080006f5 	.word	0x080006f5
 8000678:	080006f5 	.word	0x080006f5
 800067c:	080006f5 	.word	0x080006f5
 8000680:	080006f5 	.word	0x080006f5
 8000684:	080006f5 	.word	0x080006f5
 8000688:	080006d5 	.word	0x080006d5
 800068c:	080006ef 	.word	0x080006ef
 8000690:	080006f5 	.word	0x080006f5
 8000694:	080006f5 	.word	0x080006f5
 8000698:	080006f5 	.word	0x080006f5
 800069c:	080006f5 	.word	0x080006f5
 80006a0:	080006e9 	.word	0x080006e9
    {
      case 'F':
        Motor_Forward();
 80006a4:	f000 fb72 	bl	8000d8c <Motor_Forward>
//        R_Motor_Forward();
//        Set_L_Motor_PWM(700);
        Set_Motor_PWM(700);
 80006a8:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80006ac:	f000 fba6 	bl	8000dfc <Set_Motor_PWM>
        break;
 80006b0:	e020      	b.n	80006f4 <HAL_UART_RxCpltCallback+0xd8>
      case 'B':
        Motor_Backward();
 80006b2:	f000 fb87 	bl	8000dc4 <Motor_Backward>
//        Motor_Backward();
        Set_Motor_PWM(700);
 80006b6:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80006ba:	f000 fb9f 	bl	8000dfc <Set_Motor_PWM>
//        Set_R_Motor_PWM(700);
        break;
 80006be:	e019      	b.n	80006f4 <HAL_UART_RxCpltCallback+0xd8>
      case 'L':
//        Motor_Backward();
        Motor_Forward();
 80006c0:	f000 fb64 	bl	8000d8c <Motor_Forward>
//        Set_L_Motor_PWM(200);
//        Set_R_Motor_PWM(600);
        TIM3->CCR1 = 200;
 80006c4:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <HAL_UART_RxCpltCallback+0xec>)
 80006c6:	22c8      	movs	r2, #200	@ 0xc8
 80006c8:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3->CCR2 = 600;
 80006ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <HAL_UART_RxCpltCallback+0xec>)
 80006cc:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80006d0:	639a      	str	r2, [r3, #56]	@ 0x38

        break;
 80006d2:	e00f      	b.n	80006f4 <HAL_UART_RxCpltCallback+0xd8>
      case 'R':
        Motor_Forward();
 80006d4:	f000 fb5a 	bl	8000d8c <Motor_Forward>
//        Motor_Backward();
//        Set_L_Motor_PWM(600);
//        Set_R_Motor_PWM(200);
        TIM3->CCR1 = 600;
 80006d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <HAL_UART_RxCpltCallback+0xec>)
 80006da:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80006de:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3->CCR2 = 200;
 80006e0:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <HAL_UART_RxCpltCallback+0xec>)
 80006e2:	22c8      	movs	r2, #200	@ 0xc8
 80006e4:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80006e6:	e005      	b.n	80006f4 <HAL_UART_RxCpltCallback+0xd8>
      case 'X':
        Motor_Stop();
 80006e8:	f000 fba4 	bl	8000e34 <Motor_Stop>
//        R_Motor_Stop();
        break;
 80006ec:	e002      	b.n	80006f4 <HAL_UART_RxCpltCallback+0xd8>
      case 'S':
//        L_Motor_Stop();
        Motor_Stop();
 80006ee:	f000 fba1 	bl	8000e34 <Motor_Stop>
        break;
 80006f2:	bf00      	nop
    }


//  }
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000088 	.word	0x20000088
 8000700:	2000021c 	.word	0x2000021c
 8000704:	200001d4 	.word	0x200001d4
 8000708:	40000400 	.word	0x40000400

0800070c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) // RIGHT
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	7f1b      	ldrb	r3, [r3, #28]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d16d      	bne.n	80007f8 <HAL_TIM_IC_CaptureCallback+0xec>
  {
    if(captureFlag_R == 0)  // 아직 캡처를 안했다면
 800071c:	4b8f      	ldr	r3, [pc, #572]	@ (800095c <HAL_TIM_IC_CaptureCallback+0x250>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d11b      	bne.n	800075c <HAL_TIM_IC_CaptureCallback+0x50>
    {
      IC_Value1_R = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8000724:	2104      	movs	r1, #4
 8000726:	488e      	ldr	r0, [pc, #568]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000728:	f002 fef6 	bl	8003518 <HAL_TIM_ReadCapturedValue>
 800072c:	4603      	mov	r3, r0
 800072e:	b29a      	uxth	r2, r3
 8000730:	4b8c      	ldr	r3, [pc, #560]	@ (8000964 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000732:	801a      	strh	r2, [r3, #0]
      captureFlag_R = 1;    // 캡처 했음 !!!
 8000734:	4b89      	ldr	r3, [pc, #548]	@ (800095c <HAL_TIM_IC_CaptureCallback+0x250>)
 8000736:	2201      	movs	r2, #1
 8000738:	701a      	strb	r2, [r3, #0]
      // 캡처에 대한 극성을 라이징에서 폴링으로 바꿈
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800073a:	4b89      	ldr	r3, [pc, #548]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	6a1a      	ldr	r2, [r3, #32]
 8000740:	4b87      	ldr	r3, [pc, #540]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8000748:	621a      	str	r2, [r3, #32]
 800074a:	4b85      	ldr	r3, [pc, #532]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	6a1a      	ldr	r2, [r3, #32]
 8000750:	4b83      	ldr	r3, [pc, #524]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f042 0220 	orr.w	r2, r2, #32
 8000758:	621a      	str	r2, [r3, #32]
 800075a:	e04d      	b.n	80007f8 <HAL_TIM_IC_CaptureCallback+0xec>
    }
    else if(captureFlag_R == 1) // 캡처를 했다면
 800075c:	4b7f      	ldr	r3, [pc, #508]	@ (800095c <HAL_TIM_IC_CaptureCallback+0x250>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d149      	bne.n	80007f8 <HAL_TIM_IC_CaptureCallback+0xec>
    {
      IC_Value2_R = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8000764:	2104      	movs	r1, #4
 8000766:	487e      	ldr	r0, [pc, #504]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000768:	f002 fed6 	bl	8003518 <HAL_TIM_ReadCapturedValue>
 800076c:	4603      	mov	r3, r0
 800076e:	b29a      	uxth	r2, r3
 8000770:	4b7d      	ldr	r3, [pc, #500]	@ (8000968 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000772:	801a      	strh	r2, [r3, #0]
//      __HAL_TIM_SET_COUNTER(&htim4, 0);

      if(IC_Value2_R > IC_Value1_R)
 8000774:	4b7c      	ldr	r3, [pc, #496]	@ (8000968 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000776:	881a      	ldrh	r2, [r3, #0]
 8000778:	4b7a      	ldr	r3, [pc, #488]	@ (8000964 <HAL_TIM_IC_CaptureCallback+0x258>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	429a      	cmp	r2, r3
 800077e:	d908      	bls.n	8000792 <HAL_TIM_IC_CaptureCallback+0x86>
      {
        echoTime_R = IC_Value2_R - IC_Value1_R;
 8000780:	4b79      	ldr	r3, [pc, #484]	@ (8000968 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000782:	881a      	ldrh	r2, [r3, #0]
 8000784:	4b77      	ldr	r3, [pc, #476]	@ (8000964 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	1ad3      	subs	r3, r2, r3
 800078a:	b29a      	uxth	r2, r3
 800078c:	4b77      	ldr	r3, [pc, #476]	@ (800096c <HAL_TIM_IC_CaptureCallback+0x260>)
 800078e:	801a      	strh	r2, [r3, #0]
 8000790:	e00f      	b.n	80007b2 <HAL_TIM_IC_CaptureCallback+0xa6>
      }
      else if(IC_Value1_R > IC_Value2_R)
 8000792:	4b74      	ldr	r3, [pc, #464]	@ (8000964 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000794:	881a      	ldrh	r2, [r3, #0]
 8000796:	4b74      	ldr	r3, [pc, #464]	@ (8000968 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	429a      	cmp	r2, r3
 800079c:	d909      	bls.n	80007b2 <HAL_TIM_IC_CaptureCallback+0xa6>
      {
        echoTime_R = (0xffff - IC_Value1_R) + IC_Value2_R;
 800079e:	4b72      	ldr	r3, [pc, #456]	@ (8000968 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80007a0:	881a      	ldrh	r2, [r3, #0]
 80007a2:	4b70      	ldr	r3, [pc, #448]	@ (8000964 <HAL_TIM_IC_CaptureCallback+0x258>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	1ad3      	subs	r3, r2, r3
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	3b01      	subs	r3, #1
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	4b6f      	ldr	r3, [pc, #444]	@ (800096c <HAL_TIM_IC_CaptureCallback+0x260>)
 80007b0:	801a      	strh	r2, [r3, #0]
      }
      distance_R = echoTime_R / 58;
 80007b2:	4b6e      	ldr	r3, [pc, #440]	@ (800096c <HAL_TIM_IC_CaptureCallback+0x260>)
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	4a6e      	ldr	r2, [pc, #440]	@ (8000970 <HAL_TIM_IC_CaptureCallback+0x264>)
 80007b8:	fba2 2303 	umull	r2, r3, r2, r3
 80007bc:	095b      	lsrs	r3, r3, #5
 80007be:	b29b      	uxth	r3, r3
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b6c      	ldr	r3, [pc, #432]	@ (8000974 <HAL_TIM_IC_CaptureCallback+0x268>)
 80007c4:	701a      	strb	r2, [r3, #0]
      captureFlag_R = 0;
 80007c6:	4b65      	ldr	r3, [pc, #404]	@ (800095c <HAL_TIM_IC_CaptureCallback+0x250>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80007cc:	4b64      	ldr	r3, [pc, #400]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	6a1a      	ldr	r2, [r3, #32]
 80007d2:	4b63      	ldr	r3, [pc, #396]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80007da:	621a      	str	r2, [r3, #32]
 80007dc:	4b60      	ldr	r3, [pc, #384]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4b5f      	ldr	r3, [pc, #380]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	6a12      	ldr	r2, [r2, #32]
 80007e6:	621a      	str	r2, [r3, #32]
      __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC2);
 80007e8:	4b5d      	ldr	r3, [pc, #372]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	68da      	ldr	r2, [r3, #12]
 80007ee:	4b5c      	ldr	r3, [pc, #368]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f022 0204 	bic.w	r2, r2, #4
 80007f6:	60da      	str	r2, [r3, #12]
    }
  }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // LEFT
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	7f1b      	ldrb	r3, [r3, #28]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d16d      	bne.n	80008dc <HAL_TIM_IC_CaptureCallback+0x1d0>
  {
    if(captureFlag_L == 0)  // 아직 캡처를 안했다면
 8000800:	4b5d      	ldr	r3, [pc, #372]	@ (8000978 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d11b      	bne.n	8000840 <HAL_TIM_IC_CaptureCallback+0x134>
    {
      IC_Value1_L = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8000808:	2100      	movs	r1, #0
 800080a:	4855      	ldr	r0, [pc, #340]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 800080c:	f002 fe84 	bl	8003518 <HAL_TIM_ReadCapturedValue>
 8000810:	4603      	mov	r3, r0
 8000812:	b29a      	uxth	r2, r3
 8000814:	4b59      	ldr	r3, [pc, #356]	@ (800097c <HAL_TIM_IC_CaptureCallback+0x270>)
 8000816:	801a      	strh	r2, [r3, #0]
      captureFlag_L = 1;    // 캡처 했음 !!!
 8000818:	4b57      	ldr	r3, [pc, #348]	@ (8000978 <HAL_TIM_IC_CaptureCallback+0x26c>)
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
      // 캡처에 대한 극성을 라이징에서 폴링으로 바꿈
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800081e:	4b50      	ldr	r3, [pc, #320]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	6a1a      	ldr	r2, [r3, #32]
 8000824:	4b4e      	ldr	r3, [pc, #312]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f022 020a 	bic.w	r2, r2, #10
 800082c:	621a      	str	r2, [r3, #32]
 800082e:	4b4c      	ldr	r3, [pc, #304]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	6a1a      	ldr	r2, [r3, #32]
 8000834:	4b4a      	ldr	r3, [pc, #296]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f042 0202 	orr.w	r2, r2, #2
 800083c:	621a      	str	r2, [r3, #32]
 800083e:	e04d      	b.n	80008dc <HAL_TIM_IC_CaptureCallback+0x1d0>
    }
    else if(captureFlag_L == 1) // 캡처를 했다면
 8000840:	4b4d      	ldr	r3, [pc, #308]	@ (8000978 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d149      	bne.n	80008dc <HAL_TIM_IC_CaptureCallback+0x1d0>
    {
      IC_Value2_L = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8000848:	2100      	movs	r1, #0
 800084a:	4845      	ldr	r0, [pc, #276]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 800084c:	f002 fe64 	bl	8003518 <HAL_TIM_ReadCapturedValue>
 8000850:	4603      	mov	r3, r0
 8000852:	b29a      	uxth	r2, r3
 8000854:	4b4a      	ldr	r3, [pc, #296]	@ (8000980 <HAL_TIM_IC_CaptureCallback+0x274>)
 8000856:	801a      	strh	r2, [r3, #0]
//      __HAL_TIM_SET_COUNTER(&htim4, 0);

      if(IC_Value2_L > IC_Value1_L)
 8000858:	4b49      	ldr	r3, [pc, #292]	@ (8000980 <HAL_TIM_IC_CaptureCallback+0x274>)
 800085a:	881a      	ldrh	r2, [r3, #0]
 800085c:	4b47      	ldr	r3, [pc, #284]	@ (800097c <HAL_TIM_IC_CaptureCallback+0x270>)
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	429a      	cmp	r2, r3
 8000862:	d908      	bls.n	8000876 <HAL_TIM_IC_CaptureCallback+0x16a>
      {
        echoTime_L = IC_Value2_L - IC_Value1_L;
 8000864:	4b46      	ldr	r3, [pc, #280]	@ (8000980 <HAL_TIM_IC_CaptureCallback+0x274>)
 8000866:	881a      	ldrh	r2, [r3, #0]
 8000868:	4b44      	ldr	r3, [pc, #272]	@ (800097c <HAL_TIM_IC_CaptureCallback+0x270>)
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	b29a      	uxth	r2, r3
 8000870:	4b44      	ldr	r3, [pc, #272]	@ (8000984 <HAL_TIM_IC_CaptureCallback+0x278>)
 8000872:	801a      	strh	r2, [r3, #0]
 8000874:	e00f      	b.n	8000896 <HAL_TIM_IC_CaptureCallback+0x18a>
      }
      else if(IC_Value1_L > IC_Value2_L)
 8000876:	4b41      	ldr	r3, [pc, #260]	@ (800097c <HAL_TIM_IC_CaptureCallback+0x270>)
 8000878:	881a      	ldrh	r2, [r3, #0]
 800087a:	4b41      	ldr	r3, [pc, #260]	@ (8000980 <HAL_TIM_IC_CaptureCallback+0x274>)
 800087c:	881b      	ldrh	r3, [r3, #0]
 800087e:	429a      	cmp	r2, r3
 8000880:	d909      	bls.n	8000896 <HAL_TIM_IC_CaptureCallback+0x18a>
      {
        echoTime_L = (0xffff - IC_Value1_L) + IC_Value2_L;
 8000882:	4b3f      	ldr	r3, [pc, #252]	@ (8000980 <HAL_TIM_IC_CaptureCallback+0x274>)
 8000884:	881a      	ldrh	r2, [r3, #0]
 8000886:	4b3d      	ldr	r3, [pc, #244]	@ (800097c <HAL_TIM_IC_CaptureCallback+0x270>)
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	b29b      	uxth	r3, r3
 800088e:	3b01      	subs	r3, #1
 8000890:	b29a      	uxth	r2, r3
 8000892:	4b3c      	ldr	r3, [pc, #240]	@ (8000984 <HAL_TIM_IC_CaptureCallback+0x278>)
 8000894:	801a      	strh	r2, [r3, #0]
      }
      distance_L = echoTime_L / 58;
 8000896:	4b3b      	ldr	r3, [pc, #236]	@ (8000984 <HAL_TIM_IC_CaptureCallback+0x278>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	4a35      	ldr	r2, [pc, #212]	@ (8000970 <HAL_TIM_IC_CaptureCallback+0x264>)
 800089c:	fba2 2303 	umull	r2, r3, r2, r3
 80008a0:	095b      	lsrs	r3, r3, #5
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4b38      	ldr	r3, [pc, #224]	@ (8000988 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80008a8:	701a      	strb	r2, [r3, #0]
      captureFlag_L = 0;
 80008aa:	4b33      	ldr	r3, [pc, #204]	@ (8000978 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80008b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	6a1a      	ldr	r2, [r3, #32]
 80008b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f022 020a 	bic.w	r2, r2, #10
 80008be:	621a      	str	r2, [r3, #32]
 80008c0:	4b27      	ldr	r3, [pc, #156]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b26      	ldr	r3, [pc, #152]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	6a12      	ldr	r2, [r2, #32]
 80008ca:	621a      	str	r2, [r3, #32]
      __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 80008cc:	4b24      	ldr	r3, [pc, #144]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	68da      	ldr	r2, [r3, #12]
 80008d2:	4b23      	ldr	r3, [pc, #140]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f022 0202 	bic.w	r2, r2, #2
 80008da:	60da      	str	r2, [r3, #12]
    }
  }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) // CENTER
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	7f1b      	ldrb	r3, [r3, #28]
 80008e0:	2b04      	cmp	r3, #4
 80008e2:	f040 808e 	bne.w	8000a02 <HAL_TIM_IC_CaptureCallback+0x2f6>
  {
    if(captureFlag_C == 0)  // 아직 캡처를 안했다면
 80008e6:	4b29      	ldr	r3, [pc, #164]	@ (800098c <HAL_TIM_IC_CaptureCallback+0x280>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d11b      	bne.n	8000926 <HAL_TIM_IC_CaptureCallback+0x21a>
    {
      IC_Value1_C = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 80008ee:	2108      	movs	r1, #8
 80008f0:	481b      	ldr	r0, [pc, #108]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 80008f2:	f002 fe11 	bl	8003518 <HAL_TIM_ReadCapturedValue>
 80008f6:	4603      	mov	r3, r0
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	4b25      	ldr	r3, [pc, #148]	@ (8000990 <HAL_TIM_IC_CaptureCallback+0x284>)
 80008fc:	801a      	strh	r2, [r3, #0]
      captureFlag_C = 1;    // 캡처 했음 !!!
 80008fe:	4b23      	ldr	r3, [pc, #140]	@ (800098c <HAL_TIM_IC_CaptureCallback+0x280>)
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
      // 캡처에 대한 극성을 라이징에서 폴링으로 바꿈
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000904:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	6a1a      	ldr	r2, [r3, #32]
 800090a:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8000912:	621a      	str	r2, [r3, #32]
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	6a1a      	ldr	r2, [r3, #32]
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000922:	621a      	str	r2, [r3, #32]
      captureFlag_C = 0;
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
      __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC3);
    }
  }
}
 8000924:	e06d      	b.n	8000a02 <HAL_TIM_IC_CaptureCallback+0x2f6>
    else if(captureFlag_C == 1) // 캡처를 했다면
 8000926:	4b19      	ldr	r3, [pc, #100]	@ (800098c <HAL_TIM_IC_CaptureCallback+0x280>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d169      	bne.n	8000a02 <HAL_TIM_IC_CaptureCallback+0x2f6>
      IC_Value2_C = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 800092e:	2108      	movs	r1, #8
 8000930:	480b      	ldr	r0, [pc, #44]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000932:	f002 fdf1 	bl	8003518 <HAL_TIM_ReadCapturedValue>
 8000936:	4603      	mov	r3, r0
 8000938:	b29a      	uxth	r2, r3
 800093a:	4b16      	ldr	r3, [pc, #88]	@ (8000994 <HAL_TIM_IC_CaptureCallback+0x288>)
 800093c:	801a      	strh	r2, [r3, #0]
      if(IC_Value2_C > IC_Value1_C)
 800093e:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <HAL_TIM_IC_CaptureCallback+0x288>)
 8000940:	881a      	ldrh	r2, [r3, #0]
 8000942:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <HAL_TIM_IC_CaptureCallback+0x284>)
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	429a      	cmp	r2, r3
 8000948:	d928      	bls.n	800099c <HAL_TIM_IC_CaptureCallback+0x290>
        echoTime_C = IC_Value2_C - IC_Value1_C;
 800094a:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <HAL_TIM_IC_CaptureCallback+0x288>)
 800094c:	881a      	ldrh	r2, [r3, #0]
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <HAL_TIM_IC_CaptureCallback+0x284>)
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	1ad3      	subs	r3, r2, r3
 8000954:	b29a      	uxth	r2, r3
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8000958:	801a      	strh	r2, [r3, #0]
 800095a:	e02f      	b.n	80009bc <HAL_TIM_IC_CaptureCallback+0x2b0>
 800095c:	200000a0 	.word	0x200000a0
 8000960:	20000144 	.word	0x20000144
 8000964:	2000009a 	.word	0x2000009a
 8000968:	2000009c 	.word	0x2000009c
 800096c:	2000009e 	.word	0x2000009e
 8000970:	8d3dcb09 	.word	0x8d3dcb09
 8000974:	200000a1 	.word	0x200000a1
 8000978:	20000098 	.word	0x20000098
 800097c:	20000092 	.word	0x20000092
 8000980:	20000094 	.word	0x20000094
 8000984:	20000096 	.word	0x20000096
 8000988:	20000099 	.word	0x20000099
 800098c:	20000090 	.word	0x20000090
 8000990:	2000008a 	.word	0x2000008a
 8000994:	2000008c 	.word	0x2000008c
 8000998:	2000008e 	.word	0x2000008e
      else if(IC_Value1_C > IC_Value2_C)
 800099c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <HAL_TIM_IC_CaptureCallback+0x300>)
 800099e:	881a      	ldrh	r2, [r3, #0]
 80009a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <HAL_TIM_IC_CaptureCallback+0x304>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d909      	bls.n	80009bc <HAL_TIM_IC_CaptureCallback+0x2b0>
        echoTime_C = (0xffff - IC_Value1_C) + IC_Value2_C;
 80009a8:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <HAL_TIM_IC_CaptureCallback+0x304>)
 80009aa:	881a      	ldrh	r2, [r3, #0]
 80009ac:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <HAL_TIM_IC_CaptureCallback+0x300>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	3b01      	subs	r3, #1
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	4b16      	ldr	r3, [pc, #88]	@ (8000a14 <HAL_TIM_IC_CaptureCallback+0x308>)
 80009ba:	801a      	strh	r2, [r3, #0]
      distance_C = echoTime_C / 58;
 80009bc:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <HAL_TIM_IC_CaptureCallback+0x308>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	4a15      	ldr	r2, [pc, #84]	@ (8000a18 <HAL_TIM_IC_CaptureCallback+0x30c>)
 80009c2:	fba2 2303 	umull	r2, r3, r2, r3
 80009c6:	095b      	lsrs	r3, r3, #5
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	4b13      	ldr	r3, [pc, #76]	@ (8000a1c <HAL_TIM_IC_CaptureCallback+0x310>)
 80009ce:	701a      	strb	r2, [r3, #0]
      captureFlag_C = 0;
 80009d0:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <HAL_TIM_IC_CaptureCallback+0x314>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 80009d6:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <HAL_TIM_IC_CaptureCallback+0x318>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	6a1a      	ldr	r2, [r3, #32]
 80009dc:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <HAL_TIM_IC_CaptureCallback+0x318>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 80009e4:	621a      	str	r2, [r3, #32]
 80009e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <HAL_TIM_IC_CaptureCallback+0x318>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <HAL_TIM_IC_CaptureCallback+0x318>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	6a12      	ldr	r2, [r2, #32]
 80009f0:	621a      	str	r2, [r3, #32]
      __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC3);
 80009f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a24 <HAL_TIM_IC_CaptureCallback+0x318>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	68da      	ldr	r2, [r3, #12]
 80009f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a24 <HAL_TIM_IC_CaptureCallback+0x318>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f022 0208 	bic.w	r2, r2, #8
 8000a00:	60da      	str	r2, [r3, #12]
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000008a 	.word	0x2000008a
 8000a10:	2000008c 	.word	0x2000008c
 8000a14:	2000008e 	.word	0x2000008e
 8000a18:	8d3dcb09 	.word	0x8d3dcb09
 8000a1c:	20000091 	.word	0x20000091
 8000a20:	20000090 	.word	0x20000090
 8000a24:	20000144 	.word	0x20000144

08000a28 <HCSR04_TRIG>:

void HCSR04_TRIG(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2120      	movs	r1, #32
 8000a30:	4818      	ldr	r0, [pc, #96]	@ (8000a94 <HCSR04_TRIG+0x6c>)
 8000a32:	f001 f9ed 	bl	8001e10 <HAL_GPIO_WritePin>
  delay_us(1);
 8000a36:	2001      	movs	r0, #1
 8000a38:	f7ff fdb8 	bl	80005ac <delay_us>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2120      	movs	r1, #32
 8000a40:	4814      	ldr	r0, [pc, #80]	@ (8000a94 <HCSR04_TRIG+0x6c>)
 8000a42:	f001 f9e5 	bl	8001e10 <HAL_GPIO_WritePin>
  delay_us(10);
 8000a46:	200a      	movs	r0, #10
 8000a48:	f7ff fdb0 	bl	80005ac <delay_us>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2120      	movs	r1, #32
 8000a50:	4810      	ldr	r0, [pc, #64]	@ (8000a94 <HCSR04_TRIG+0x6c>)
 8000a52:	f001 f9dd 	bl	8001e10 <HAL_GPIO_WritePin>

  __HAL_TIM_SET_COUNTER(&htim4, 0);
 8000a56:	4b10      	ldr	r3, [pc, #64]	@ (8000a98 <HCSR04_TRIG+0x70>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <HCSR04_TRIG+0x70>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	68da      	ldr	r2, [r3, #12]
 8000a64:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <HCSR04_TRIG+0x70>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f042 0202 	orr.w	r2, r2, #2
 8000a6c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC2);
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a98 <HCSR04_TRIG+0x70>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	68da      	ldr	r2, [r3, #12]
 8000a74:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <HCSR04_TRIG+0x70>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f042 0204 	orr.w	r2, r2, #4
 8000a7c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC3);
 8000a7e:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <HCSR04_TRIG+0x70>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	68da      	ldr	r2, [r3, #12]
 8000a84:	4b04      	ldr	r3, [pc, #16]	@ (8000a98 <HCSR04_TRIG+0x70>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f042 0208 	orr.w	r2, r2, #8
 8000a8c:	60da      	str	r2, [r3, #12]
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40020000 	.word	0x40020000
 8000a98:	20000144 	.word	0x20000144

08000a9c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  HAL_UART_Receive_IT(&huart2, &rx_data, sizeof(rx_data));
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	490d      	ldr	r1, [pc, #52]	@ (8000ad8 <MX_FREERTOS_Init+0x3c>)
 8000aa4:	480d      	ldr	r0, [pc, #52]	@ (8000adc <MX_FREERTOS_Init+0x40>)
 8000aa6:	f003 fae6 	bl	8004076 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &rx_data, sizeof(rx_data));
 8000aaa:	2201      	movs	r2, #1
 8000aac:	490a      	ldr	r1, [pc, #40]	@ (8000ad8 <MX_FREERTOS_Init+0x3c>)
 8000aae:	480c      	ldr	r0, [pc, #48]	@ (8000ae0 <MX_FREERTOS_Init+0x44>)
 8000ab0:	f003 fae1 	bl	8004076 <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MOTOR_TASK */
  MOTOR_TASKHandle = osThreadNew(MOTOR_TASK01, NULL, &MOTOR_TASK_attributes);
 8000ab4:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae4 <MX_FREERTOS_Init+0x48>)
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	480b      	ldr	r0, [pc, #44]	@ (8000ae8 <MX_FREERTOS_Init+0x4c>)
 8000aba:	f004 fafb 	bl	80050b4 <osThreadNew>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <MX_FREERTOS_Init+0x50>)
 8000ac2:	6013      	str	r3, [r2, #0]

  /* creation of Ultrasonic */
  UltrasonicHandle = osThreadNew(Ultrasonic01, NULL, &Ultrasonic_attributes);
 8000ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8000af0 <MX_FREERTOS_Init+0x54>)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	480a      	ldr	r0, [pc, #40]	@ (8000af4 <MX_FREERTOS_Init+0x58>)
 8000aca:	f004 faf3 	bl	80050b4 <osThreadNew>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	4a09      	ldr	r2, [pc, #36]	@ (8000af8 <MX_FREERTOS_Init+0x5c>)
 8000ad2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000088 	.word	0x20000088
 8000adc:	2000021c 	.word	0x2000021c
 8000ae0:	200001d4 	.word	0x200001d4
 8000ae4:	08008b28 	.word	0x08008b28
 8000ae8:	08000afd 	.word	0x08000afd
 8000aec:	200000a4 	.word	0x200000a4
 8000af0:	08008b4c 	.word	0x08008b4c
 8000af4:	08000b0d 	.word	0x08000b0d
 8000af8:	200000a8 	.word	0x200000a8

08000afc <MOTOR_TASK01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MOTOR_TASK01 */
void MOTOR_TASK01(void *argument)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MOTOR_TASK01 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b04:	2001      	movs	r0, #1
 8000b06:	f004 fb67 	bl	80051d8 <osDelay>
 8000b0a:	e7fb      	b.n	8000b04 <MOTOR_TASK01+0x8>

08000b0c <Ultrasonic01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Ultrasonic01 */
void Ultrasonic01(void *argument)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ultrasonic01 */
  /* Infinite loop */
  for(;;)
  {
    HCSR04_TRIG();
 8000b14:	f7ff ff88 	bl	8000a28 <HCSR04_TRIG>
    printf("c: %d cm, l: %d cm, r: %d cm \r\n", distance_C, distance_L, distance_R);
 8000b18:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <Ultrasonic01+0x30>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <Ultrasonic01+0x34>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	4b07      	ldr	r3, [pc, #28]	@ (8000b44 <Ultrasonic01+0x38>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4807      	ldr	r0, [pc, #28]	@ (8000b48 <Ultrasonic01+0x3c>)
 8000b2a:	f007 f8e7 	bl	8007cfc <iprintf>
    osDelay(300);
 8000b2e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000b32:	f004 fb51 	bl	80051d8 <osDelay>
    HCSR04_TRIG();
 8000b36:	bf00      	nop
 8000b38:	e7ec      	b.n	8000b14 <Ultrasonic01+0x8>
 8000b3a:	bf00      	nop
 8000b3c:	20000091 	.word	0x20000091
 8000b40:	20000099 	.word	0x20000099
 8000b44:	200000a1 	.word	0x200000a1
 8000b48:	08008ae0 	.word	0x08008ae0

08000b4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	4b2a      	ldr	r3, [pc, #168]	@ (8000c10 <MX_GPIO_Init+0xc4>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	4a29      	ldr	r2, [pc, #164]	@ (8000c10 <MX_GPIO_Init+0xc4>)
 8000b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b72:	4b27      	ldr	r3, [pc, #156]	@ (8000c10 <MX_GPIO_Init+0xc4>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b23      	ldr	r3, [pc, #140]	@ (8000c10 <MX_GPIO_Init+0xc4>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	4a22      	ldr	r2, [pc, #136]	@ (8000c10 <MX_GPIO_Init+0xc4>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8e:	4b20      	ldr	r3, [pc, #128]	@ (8000c10 <MX_GPIO_Init+0xc4>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c10 <MX_GPIO_Init+0xc4>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8000c10 <MX_GPIO_Init+0xc4>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000baa:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <MX_GPIO_Init+0xc4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2120      	movs	r1, #32
 8000bba:	4816      	ldr	r0, [pc, #88]	@ (8000c14 <MX_GPIO_Init+0xc8>)
 8000bbc:	f001 f928 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f240 4107 	movw	r1, #1031	@ 0x407
 8000bc6:	4814      	ldr	r0, [pc, #80]	@ (8000c18 <MX_GPIO_Init+0xcc>)
 8000bc8:	f001 f922 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bcc:	2320      	movs	r3, #32
 8000bce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	4619      	mov	r1, r3
 8000be2:	480c      	ldr	r0, [pc, #48]	@ (8000c14 <MX_GPIO_Init+0xc8>)
 8000be4:	f000 ff90 	bl	8001b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10;
 8000be8:	f240 4307 	movw	r3, #1031	@ 0x407
 8000bec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfa:	f107 030c 	add.w	r3, r7, #12
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <MX_GPIO_Init+0xcc>)
 8000c02:	f000 ff81 	bl	8001b08 <HAL_GPIO_Init>

}
 8000c06:	bf00      	nop
 8000c08:	3720      	adds	r7, #32
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020000 	.word	0x40020000
 8000c18:	40020400 	.word	0x40020400

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c20:	f000 fdbc 	bl	800179c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c24:	f000 f832 	bl	8000c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c28:	f7ff ff90 	bl	8000b4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c2c:	f000 fcd6 	bl	80015dc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000c30:	f000 fac0 	bl	80011b4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000c34:	f000 fca8 	bl	8001588 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000c38:	f000 fb3e 	bl	80012b8 <MX_TIM4_Init>
  MX_TIM11_Init();
 8000c3c:	f000 fbc2 	bl	80013c4 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim11);          // for us timer
 8000c40:	480f      	ldr	r0, [pc, #60]	@ (8000c80 <main+0x64>)
 8000c42:	f001 fe19 	bl	8002878 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1); // for ultrasonic timer
 8000c46:	2100      	movs	r1, #0
 8000c48:	480e      	ldr	r0, [pc, #56]	@ (8000c84 <main+0x68>)
 8000c4a:	f002 f835 	bl	8002cb8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2); // for ultrasonic timer
 8000c4e:	2104      	movs	r1, #4
 8000c50:	480c      	ldr	r0, [pc, #48]	@ (8000c84 <main+0x68>)
 8000c52:	f002 f831 	bl	8002cb8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3); // for ultrasonic timer
 8000c56:	2108      	movs	r1, #8
 8000c58:	480a      	ldr	r0, [pc, #40]	@ (8000c84 <main+0x68>)
 8000c5a:	f002 f82d 	bl	8002cb8 <HAL_TIM_IC_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // 좌측 PWM 시작
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4809      	ldr	r0, [pc, #36]	@ (8000c88 <main+0x6c>)
 8000c62:	f001 ff1f 	bl	8002aa4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // 우측 PWM 시작
 8000c66:	2104      	movs	r1, #4
 8000c68:	4807      	ldr	r0, [pc, #28]	@ (8000c88 <main+0x6c>)
 8000c6a:	f001 ff1b 	bl	8002aa4 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 8000c6e:	f004 f9d7 	bl	8005020 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000c72:	f7ff ff13 	bl	8000a9c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c76:	f004 f9f7 	bl	8005068 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c7a:	bf00      	nop
 8000c7c:	e7fd      	b.n	8000c7a <main+0x5e>
 8000c7e:	bf00      	nop
 8000c80:	2000018c 	.word	0x2000018c
 8000c84:	20000144 	.word	0x20000144
 8000c88:	200000fc 	.word	0x200000fc

08000c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b094      	sub	sp, #80	@ 0x50
 8000c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c92:	f107 0320 	add.w	r3, r7, #32
 8000c96:	2230      	movs	r2, #48	@ 0x30
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f007 f883 	bl	8007da6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	4b27      	ldr	r3, [pc, #156]	@ (8000d54 <SystemClock_Config+0xc8>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb8:	4a26      	ldr	r2, [pc, #152]	@ (8000d54 <SystemClock_Config+0xc8>)
 8000cba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc0:	4b24      	ldr	r3, [pc, #144]	@ (8000d54 <SystemClock_Config+0xc8>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ccc:	2300      	movs	r3, #0
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	4b21      	ldr	r3, [pc, #132]	@ (8000d58 <SystemClock_Config+0xcc>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a20      	ldr	r2, [pc, #128]	@ (8000d58 <SystemClock_Config+0xcc>)
 8000cd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cda:	6013      	str	r3, [r2, #0]
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d58 <SystemClock_Config+0xcc>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cf6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000d00:	2364      	movs	r3, #100	@ 0x64
 8000d02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d04:	2302      	movs	r3, #2
 8000d06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d08:	2304      	movs	r3, #4
 8000d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0c:	f107 0320 	add.w	r3, r7, #32
 8000d10:	4618      	mov	r0, r3
 8000d12:	f001 f897 	bl	8001e44 <HAL_RCC_OscConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d1c:	f000 f830 	bl	8000d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d20:	230f      	movs	r3, #15
 8000d22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d24:	2302      	movs	r3, #2
 8000d26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	2103      	movs	r1, #3
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f001 faf9 	bl	8002334 <HAL_RCC_ClockConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d48:	f000 f81a 	bl	8000d80 <Error_Handler>
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	3750      	adds	r7, #80	@ 0x50
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40007000 	.word	0x40007000

08000d5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a04      	ldr	r2, [pc, #16]	@ (8000d7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d101      	bne.n	8000d72 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000d6e:	f000 fd37 	bl	80017e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40014400 	.word	0x40014400

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <Error_Handler+0x8>

08000d8c <Motor_Forward>:
#include "motor.h"
uint32_t debugger;

// 좌측 모터 방향제어 (IN = PB0, IN2 = PB1)
void Motor_Forward(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);   // IN1
 8000d90:	2201      	movs	r2, #1
 8000d92:	2101      	movs	r1, #1
 8000d94:	480a      	ldr	r0, [pc, #40]	@ (8000dc0 <Motor_Forward+0x34>)
 8000d96:	f001 f83b 	bl	8001e10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // IN2
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	4808      	ldr	r0, [pc, #32]	@ (8000dc0 <Motor_Forward+0x34>)
 8000da0:	f001 f836 	bl	8001e10 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);   // IN3
 8000da4:	2201      	movs	r2, #1
 8000da6:	2104      	movs	r1, #4
 8000da8:	4805      	ldr	r0, [pc, #20]	@ (8000dc0 <Motor_Forward+0x34>)
 8000daa:	f001 f831 	bl	8001e10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // IN4
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000db4:	4802      	ldr	r0, [pc, #8]	@ (8000dc0 <Motor_Forward+0x34>)
 8000db6:	f001 f82b 	bl	8001e10 <HAL_GPIO_WritePin>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40020400 	.word	0x40020400

08000dc4 <Motor_Backward>:

void Motor_Backward(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2101      	movs	r1, #1
 8000dcc:	480a      	ldr	r0, [pc, #40]	@ (8000df8 <Motor_Backward+0x34>)
 8000dce:	f001 f81f 	bl	8001e10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2102      	movs	r1, #2
 8000dd6:	4808      	ldr	r0, [pc, #32]	@ (8000df8 <Motor_Backward+0x34>)
 8000dd8:	f001 f81a 	bl	8001e10 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2104      	movs	r1, #4
 8000de0:	4805      	ldr	r0, [pc, #20]	@ (8000df8 <Motor_Backward+0x34>)
 8000de2:	f001 f815 	bl	8001e10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000de6:	2201      	movs	r2, #1
 8000de8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dec:	4802      	ldr	r0, [pc, #8]	@ (8000df8 <Motor_Backward+0x34>)
 8000dee:	f001 f80f 	bl	8001e10 <HAL_GPIO_WritePin>
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40020400 	.word	0x40020400

08000dfc <Set_Motor_PWM>:
//  uint32_t pwm = (speed_percent * (__HAL_TIM_GET_AUTORELOAD(&htim3))) / 100;
//  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2 , pwm); // 좌 :ch1
//}

void Set_Motor_PWM(uint32_t pwm_value)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  TIM3->CCR1 = pwm_value;
 8000e04:	4a08      	ldr	r2, [pc, #32]	@ (8000e28 <Set_Motor_PWM+0x2c>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6353      	str	r3, [r2, #52]	@ 0x34

  TIM3->CCR2 = pwm_value;
 8000e0a:	4a07      	ldr	r2, [pc, #28]	@ (8000e28 <Set_Motor_PWM+0x2c>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6393      	str	r3, [r2, #56]	@ 0x38

  printf("Set PWM: %lu\r\n", pwm_value); // Debug
 8000e10:	6879      	ldr	r1, [r7, #4]
 8000e12:	4806      	ldr	r0, [pc, #24]	@ (8000e2c <Set_Motor_PWM+0x30>)
 8000e14:	f006 ff72 	bl	8007cfc <iprintf>

  debugger = pwm_value;
 8000e18:	4a05      	ldr	r2, [pc, #20]	@ (8000e30 <Set_Motor_PWM+0x34>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6013      	str	r3, [r2, #0]
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40000400 	.word	0x40000400
 8000e2c:	08008b00 	.word	0x08008b00
 8000e30:	200000ac 	.word	0x200000ac

08000e34 <Motor_Stop>:
//{
//  TIM3->CCR2 = pwm_value;
//}

void Motor_Stop(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // IN1
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	480b      	ldr	r0, [pc, #44]	@ (8000e6c <Motor_Stop+0x38>)
 8000e3e:	f000 ffe7 	bl	8001e10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);  // IN2
 8000e42:	2200      	movs	r2, #0
 8000e44:	2102      	movs	r1, #2
 8000e46:	4809      	ldr	r0, [pc, #36]	@ (8000e6c <Motor_Stop+0x38>)
 8000e48:	f000 ffe2 	bl	8001e10 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);  // IN3
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2104      	movs	r1, #4
 8000e50:	4806      	ldr	r0, [pc, #24]	@ (8000e6c <Motor_Stop+0x38>)
 8000e52:	f000 ffdd 	bl	8001e10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // IN4
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e5c:	4803      	ldr	r0, [pc, #12]	@ (8000e6c <Motor_Stop+0x38>)
 8000e5e:	f000 ffd7 	bl	8001e10 <HAL_GPIO_WritePin>
  Set_Motor_PWM(0);  // PWM도 0
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff ffca 	bl	8000dfc <Set_Motor_PWM>
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40020400 	.word	0x40020400

08000e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <HAL_MspInit+0x54>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7e:	4a11      	ldr	r2, [pc, #68]	@ (8000ec4 <HAL_MspInit+0x54>)
 8000e80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <HAL_MspInit+0x54>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	603b      	str	r3, [r7, #0]
 8000e96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <HAL_MspInit+0x54>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <HAL_MspInit+0x54>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ea0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea2:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <HAL_MspInit+0x54>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	210f      	movs	r1, #15
 8000eb2:	f06f 0001 	mvn.w	r0, #1
 8000eb6:	f000 fd6b 	bl	8001990 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	@ 0x30
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	4b2e      	ldr	r3, [pc, #184]	@ (8000f98 <HAL_InitTick+0xd0>)
 8000ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8000f98 <HAL_InitTick+0xd0>)
 8000ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8000f98 <HAL_InitTick+0xd0>)
 8000eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ef4:	f107 020c 	add.w	r2, r7, #12
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f001 fc38 	bl	8002774 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f04:	f001 fc22 	bl	800274c <HAL_RCC_GetPCLK2Freq>
 8000f08:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f0c:	4a23      	ldr	r2, [pc, #140]	@ (8000f9c <HAL_InitTick+0xd4>)
 8000f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f12:	0c9b      	lsrs	r3, r3, #18
 8000f14:	3b01      	subs	r3, #1
 8000f16:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000f18:	4b21      	ldr	r3, [pc, #132]	@ (8000fa0 <HAL_InitTick+0xd8>)
 8000f1a:	4a22      	ldr	r2, [pc, #136]	@ (8000fa4 <HAL_InitTick+0xdc>)
 8000f1c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000f1e:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <HAL_InitTick+0xd8>)
 8000f20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f24:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000f26:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa0 <HAL_InitTick+0xd8>)
 8000f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f2a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa0 <HAL_InitTick+0xd8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f32:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa0 <HAL_InitTick+0xd8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f38:	4b19      	ldr	r3, [pc, #100]	@ (8000fa0 <HAL_InitTick+0xd8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000f3e:	4818      	ldr	r0, [pc, #96]	@ (8000fa0 <HAL_InitTick+0xd8>)
 8000f40:	f001 fc4a 	bl	80027d8 <HAL_TIM_Base_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000f4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d11b      	bne.n	8000f8a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000f52:	4813      	ldr	r0, [pc, #76]	@ (8000fa0 <HAL_InitTick+0xd8>)
 8000f54:	f001 fcea 	bl	800292c <HAL_TIM_Base_Start_IT>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000f5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d111      	bne.n	8000f8a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f66:	2019      	movs	r0, #25
 8000f68:	f000 fd2e 	bl	80019c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b0f      	cmp	r3, #15
 8000f70:	d808      	bhi.n	8000f84 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000f72:	2200      	movs	r2, #0
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	2019      	movs	r0, #25
 8000f78:	f000 fd0a 	bl	8001990 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <HAL_InitTick+0xe0>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	e002      	b.n	8000f8a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3730      	adds	r7, #48	@ 0x30
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	431bde83 	.word	0x431bde83
 8000fa0:	200000b0 	.word	0x200000b0
 8000fa4:	40014400 	.word	0x40014400
 8000fa8:	20000004 	.word	0x20000004

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <BusFault_Handler+0x4>

08000fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <UsageFault_Handler+0x4>

08000fd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000fe8:	4802      	ldr	r0, [pc, #8]	@ (8000ff4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000fea:	f001 ff7f 	bl	8002eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200000b0 	.word	0x200000b0

08000ff8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ffc:	4802      	ldr	r0, [pc, #8]	@ (8001008 <TIM3_IRQHandler+0x10>)
 8000ffe:	f001 ff75 	bl	8002eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200000fc 	.word	0x200000fc

0800100c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001010:	4802      	ldr	r0, [pc, #8]	@ (800101c <TIM4_IRQHandler+0x10>)
 8001012:	f001 ff6b 	bl	8002eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000144 	.word	0x20000144

08001020 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001024:	4802      	ldr	r0, [pc, #8]	@ (8001030 <USART1_IRQHandler+0x10>)
 8001026:	f003 f84b 	bl	80040c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200001d4 	.word	0x200001d4

08001034 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001038:	4802      	ldr	r0, [pc, #8]	@ (8001044 <USART2_IRQHandler+0x10>)
 800103a:	f003 f841 	bl	80040c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	2000021c 	.word	0x2000021c

08001048 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	e00a      	b.n	8001070 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800105a:	f3af 8000 	nop.w
 800105e:	4601      	mov	r1, r0
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	60ba      	str	r2, [r7, #8]
 8001066:	b2ca      	uxtb	r2, r1
 8001068:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	3301      	adds	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	dbf0      	blt.n	800105a <_read+0x12>
  }

  return len;
 8001078:	687b      	ldr	r3, [r7, #4]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af00      	add	r7, sp, #0
 8001088:	60f8      	str	r0, [r7, #12]
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	e009      	b.n	80010a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	60ba      	str	r2, [r7, #8]
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fa9f 	bl	80005e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	3301      	adds	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	dbf1      	blt.n	8001094 <_write+0x12>
  }
  return len;
 80010b0:	687b      	ldr	r3, [r7, #4]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <_close>:

int _close(int file)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010e2:	605a      	str	r2, [r3, #4]
  return 0;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <_isatty>:

int _isatty(int file)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010fa:	2301      	movs	r3, #1
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800112c:	4a14      	ldr	r2, [pc, #80]	@ (8001180 <_sbrk+0x5c>)
 800112e:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <_sbrk+0x60>)
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001138:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d102      	bne.n	8001146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001140:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <_sbrk+0x64>)
 8001142:	4a12      	ldr	r2, [pc, #72]	@ (800118c <_sbrk+0x68>)
 8001144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001146:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <_sbrk+0x64>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	429a      	cmp	r2, r3
 8001152:	d207      	bcs.n	8001164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001154:	f006 fed4 	bl	8007f00 <__errno>
 8001158:	4603      	mov	r3, r0
 800115a:	220c      	movs	r2, #12
 800115c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001162:	e009      	b.n	8001178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001164:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116a:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <_sbrk+0x64>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	4a05      	ldr	r2, [pc, #20]	@ (8001188 <_sbrk+0x64>)
 8001174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20020000 	.word	0x20020000
 8001184:	00000400 	.word	0x00000400
 8001188:	200000f8 	.word	0x200000f8
 800118c:	20004da0 	.word	0x20004da0

08001190 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <SystemInit+0x20>)
 8001196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800119a:	4a05      	ldr	r2, [pc, #20]	@ (80011b0 <SystemInit+0x20>)
 800119c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08e      	sub	sp, #56	@ 0x38
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c8:	f107 0320 	add.w	r3, r7, #32
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
 80011e0:	615a      	str	r2, [r3, #20]
 80011e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011e4:	4b32      	ldr	r3, [pc, #200]	@ (80012b0 <MX_TIM3_Init+0xfc>)
 80011e6:	4a33      	ldr	r2, [pc, #204]	@ (80012b4 <MX_TIM3_Init+0x100>)
 80011e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 80011ea:	4b31      	ldr	r3, [pc, #196]	@ (80012b0 <MX_TIM3_Init+0xfc>)
 80011ec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f2:	4b2f      	ldr	r3, [pc, #188]	@ (80012b0 <MX_TIM3_Init+0xfc>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80011f8:	4b2d      	ldr	r3, [pc, #180]	@ (80012b0 <MX_TIM3_Init+0xfc>)
 80011fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001200:	4b2b      	ldr	r3, [pc, #172]	@ (80012b0 <MX_TIM3_Init+0xfc>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001206:	4b2a      	ldr	r3, [pc, #168]	@ (80012b0 <MX_TIM3_Init+0xfc>)
 8001208:	2280      	movs	r2, #128	@ 0x80
 800120a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800120c:	4828      	ldr	r0, [pc, #160]	@ (80012b0 <MX_TIM3_Init+0xfc>)
 800120e:	f001 fae3 	bl	80027d8 <HAL_TIM_Base_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001218:	f7ff fdb2 	bl	8000d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800121c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001220:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001222:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001226:	4619      	mov	r1, r3
 8001228:	4821      	ldr	r0, [pc, #132]	@ (80012b0 <MX_TIM3_Init+0xfc>)
 800122a:	f002 f8ad 	bl	8003388 <HAL_TIM_ConfigClockSource>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001234:	f7ff fda4 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001238:	481d      	ldr	r0, [pc, #116]	@ (80012b0 <MX_TIM3_Init+0xfc>)
 800123a:	f001 fbd9 	bl	80029f0 <HAL_TIM_PWM_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001244:	f7ff fd9c 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001250:	f107 0320 	add.w	r3, r7, #32
 8001254:	4619      	mov	r1, r3
 8001256:	4816      	ldr	r0, [pc, #88]	@ (80012b0 <MX_TIM3_Init+0xfc>)
 8001258:	f002 fdb0 	bl	8003dbc <HAL_TIMEx_MasterConfigSynchronization>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001262:	f7ff fd8d 	bl	8000d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001266:	2360      	movs	r3, #96	@ 0x60
 8001268:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2200      	movs	r2, #0
 800127a:	4619      	mov	r1, r3
 800127c:	480c      	ldr	r0, [pc, #48]	@ (80012b0 <MX_TIM3_Init+0xfc>)
 800127e:	f001 ffc1 	bl	8003204 <HAL_TIM_PWM_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001288:	f7ff fd7a 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	2204      	movs	r2, #4
 8001290:	4619      	mov	r1, r3
 8001292:	4807      	ldr	r0, [pc, #28]	@ (80012b0 <MX_TIM3_Init+0xfc>)
 8001294:	f001 ffb6 	bl	8003204 <HAL_TIM_PWM_ConfigChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800129e:	f7ff fd6f 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012a2:	4803      	ldr	r0, [pc, #12]	@ (80012b0 <MX_TIM3_Init+0xfc>)
 80012a4:	f000 f936 	bl	8001514 <HAL_TIM_MspPostInit>

}
 80012a8:	bf00      	nop
 80012aa:	3738      	adds	r7, #56	@ 0x38
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	200000fc 	.word	0x200000fc
 80012b4:	40000400 	.word	0x40000400

080012b8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	@ 0x28
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012be:	f107 0318 	add.w	r3, r7, #24
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012d6:	463b      	mov	r3, r7
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012e2:	4b36      	ldr	r3, [pc, #216]	@ (80013bc <MX_TIM4_Init+0x104>)
 80012e4:	4a36      	ldr	r2, [pc, #216]	@ (80013c0 <MX_TIM4_Init+0x108>)
 80012e6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 80012e8:	4b34      	ldr	r3, [pc, #208]	@ (80013bc <MX_TIM4_Init+0x104>)
 80012ea:	2263      	movs	r2, #99	@ 0x63
 80012ec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ee:	4b33      	ldr	r3, [pc, #204]	@ (80013bc <MX_TIM4_Init+0x104>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80012f4:	4b31      	ldr	r3, [pc, #196]	@ (80013bc <MX_TIM4_Init+0x104>)
 80012f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012fa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fc:	4b2f      	ldr	r3, [pc, #188]	@ (80013bc <MX_TIM4_Init+0x104>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001302:	4b2e      	ldr	r3, [pc, #184]	@ (80013bc <MX_TIM4_Init+0x104>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001308:	482c      	ldr	r0, [pc, #176]	@ (80013bc <MX_TIM4_Init+0x104>)
 800130a:	f001 fa65 	bl	80027d8 <HAL_TIM_Base_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001314:	f7ff fd34 	bl	8000d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001318:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800131c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800131e:	f107 0318 	add.w	r3, r7, #24
 8001322:	4619      	mov	r1, r3
 8001324:	4825      	ldr	r0, [pc, #148]	@ (80013bc <MX_TIM4_Init+0x104>)
 8001326:	f002 f82f 	bl	8003388 <HAL_TIM_ConfigClockSource>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001330:	f7ff fd26 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001334:	4821      	ldr	r0, [pc, #132]	@ (80013bc <MX_TIM4_Init+0x104>)
 8001336:	f001 fc65 	bl	8002c04 <HAL_TIM_IC_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001340:	f7ff fd1e 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	4619      	mov	r1, r3
 8001352:	481a      	ldr	r0, [pc, #104]	@ (80013bc <MX_TIM4_Init+0x104>)
 8001354:	f002 fd32 	bl	8003dbc <HAL_TIMEx_MasterConfigSynchronization>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 800135e:	f7ff fd0f 	bl	8000d80 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001366:	2301      	movs	r3, #1
 8001368:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001372:	463b      	mov	r3, r7
 8001374:	2200      	movs	r2, #0
 8001376:	4619      	mov	r1, r3
 8001378:	4810      	ldr	r0, [pc, #64]	@ (80013bc <MX_TIM4_Init+0x104>)
 800137a:	f001 fea7 	bl	80030cc <HAL_TIM_IC_ConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001384:	f7ff fcfc 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001388:	463b      	mov	r3, r7
 800138a:	2204      	movs	r2, #4
 800138c:	4619      	mov	r1, r3
 800138e:	480b      	ldr	r0, [pc, #44]	@ (80013bc <MX_TIM4_Init+0x104>)
 8001390:	f001 fe9c 	bl	80030cc <HAL_TIM_IC_ConfigChannel>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 800139a:	f7ff fcf1 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800139e:	463b      	mov	r3, r7
 80013a0:	2208      	movs	r2, #8
 80013a2:	4619      	mov	r1, r3
 80013a4:	4805      	ldr	r0, [pc, #20]	@ (80013bc <MX_TIM4_Init+0x104>)
 80013a6:	f001 fe91 	bl	80030cc <HAL_TIM_IC_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM4_Init+0xfc>
  {
    Error_Handler();
 80013b0:	f7ff fce6 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	3728      	adds	r7, #40	@ 0x28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000144 	.word	0x20000144
 80013c0:	40000800 	.word	0x40000800

080013c4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80013c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001404 <MX_TIM11_Init+0x40>)
 80013ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001408 <MX_TIM11_Init+0x44>)
 80013cc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 80013ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001404 <MX_TIM11_Init+0x40>)
 80013d0:	2263      	movs	r2, #99	@ 0x63
 80013d2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <MX_TIM11_Init+0x40>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80013da:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <MX_TIM11_Init+0x40>)
 80013dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013e0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e2:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <MX_TIM11_Init+0x40>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <MX_TIM11_Init+0x40>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80013ee:	4805      	ldr	r0, [pc, #20]	@ (8001404 <MX_TIM11_Init+0x40>)
 80013f0:	f001 f9f2 	bl	80027d8 <HAL_TIM_Base_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80013fa:	f7ff fcc1 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2000018c 	.word	0x2000018c
 8001408:	40014800 	.word	0x40014800

0800140c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08c      	sub	sp, #48	@ 0x30
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a35      	ldr	r2, [pc, #212]	@ (8001500 <HAL_TIM_Base_MspInit+0xf4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d116      	bne.n	800145c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
 8001432:	4b34      	ldr	r3, [pc, #208]	@ (8001504 <HAL_TIM_Base_MspInit+0xf8>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001436:	4a33      	ldr	r2, [pc, #204]	@ (8001504 <HAL_TIM_Base_MspInit+0xf8>)
 8001438:	f043 0302 	orr.w	r3, r3, #2
 800143c:	6413      	str	r3, [r2, #64]	@ 0x40
 800143e:	4b31      	ldr	r3, [pc, #196]	@ (8001504 <HAL_TIM_Base_MspInit+0xf8>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	69bb      	ldr	r3, [r7, #24]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2105      	movs	r1, #5
 800144e:	201d      	movs	r0, #29
 8001450:	f000 fa9e 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001454:	201d      	movs	r0, #29
 8001456:	f000 fab7 	bl	80019c8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800145a:	e04d      	b.n	80014f8 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM4)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a29      	ldr	r2, [pc, #164]	@ (8001508 <HAL_TIM_Base_MspInit+0xfc>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d135      	bne.n	80014d2 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	4b26      	ldr	r3, [pc, #152]	@ (8001504 <HAL_TIM_Base_MspInit+0xf8>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	4a25      	ldr	r2, [pc, #148]	@ (8001504 <HAL_TIM_Base_MspInit+0xf8>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6413      	str	r3, [r2, #64]	@ 0x40
 8001476:	4b23      	ldr	r3, [pc, #140]	@ (8001504 <HAL_TIM_Base_MspInit+0xf8>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <HAL_TIM_Base_MspInit+0xf8>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	4a1e      	ldr	r2, [pc, #120]	@ (8001504 <HAL_TIM_Base_MspInit+0xf8>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6313      	str	r3, [r2, #48]	@ 0x30
 8001492:	4b1c      	ldr	r3, [pc, #112]	@ (8001504 <HAL_TIM_Base_MspInit+0xf8>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800149e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80014a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014b0:	2302      	movs	r3, #2
 80014b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	4619      	mov	r1, r3
 80014ba:	4814      	ldr	r0, [pc, #80]	@ (800150c <HAL_TIM_Base_MspInit+0x100>)
 80014bc:	f000 fb24 	bl	8001b08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2105      	movs	r1, #5
 80014c4:	201e      	movs	r0, #30
 80014c6:	f000 fa63 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014ca:	201e      	movs	r0, #30
 80014cc:	f000 fa7c 	bl	80019c8 <HAL_NVIC_EnableIRQ>
}
 80014d0:	e012      	b.n	80014f8 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM11)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001510 <HAL_TIM_Base_MspInit+0x104>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d10d      	bne.n	80014f8 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <HAL_TIM_Base_MspInit+0xf8>)
 80014e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e4:	4a07      	ldr	r2, [pc, #28]	@ (8001504 <HAL_TIM_Base_MspInit+0xf8>)
 80014e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ec:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <HAL_TIM_Base_MspInit+0xf8>)
 80014ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
}
 80014f8:	bf00      	nop
 80014fa:	3730      	adds	r7, #48	@ 0x30
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40000400 	.word	0x40000400
 8001504:	40023800 	.word	0x40023800
 8001508:	40000800 	.word	0x40000800
 800150c:	40020400 	.word	0x40020400
 8001510:	40014800 	.word	0x40014800

08001514 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a12      	ldr	r2, [pc, #72]	@ (800157c <HAL_TIM_MspPostInit+0x68>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d11d      	bne.n	8001572 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <HAL_TIM_MspPostInit+0x6c>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	4a10      	ldr	r2, [pc, #64]	@ (8001580 <HAL_TIM_MspPostInit+0x6c>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6313      	str	r3, [r2, #48]	@ 0x30
 8001546:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <HAL_TIM_MspPostInit+0x6c>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001552:	23c0      	movs	r3, #192	@ 0xc0
 8001554:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001562:	2302      	movs	r3, #2
 8001564:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	4619      	mov	r1, r3
 800156c:	4805      	ldr	r0, [pc, #20]	@ (8001584 <HAL_TIM_MspPostInit+0x70>)
 800156e:	f000 facb 	bl	8001b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001572:	bf00      	nop
 8001574:	3720      	adds	r7, #32
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40000400 	.word	0x40000400
 8001580:	40023800 	.word	0x40023800
 8001584:	40020000 	.word	0x40020000

08001588 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800158c:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <MX_USART1_UART_Init+0x4c>)
 800158e:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <MX_USART1_UART_Init+0x50>)
 8001590:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <MX_USART1_UART_Init+0x4c>)
 8001594:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001598:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800159a:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <MX_USART1_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	@ (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015ac:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015ae:	220c      	movs	r2, #12
 80015b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b2:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b8:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015be:	4805      	ldr	r0, [pc, #20]	@ (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015c0:	f002 fc7e 	bl	8003ec0 <HAL_UART_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015ca:	f7ff fbd9 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200001d4 	.word	0x200001d4
 80015d8:	40011000 	.word	0x40011000

080015dc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	@ (800162c <MX_USART2_UART_Init+0x50>)
 80015e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 80015e8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80015ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001600:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 8001602:	220c      	movs	r2, #12
 8001604:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001606:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	@ (8001628 <MX_USART2_UART_Init+0x4c>)
 8001614:	f002 fc54 	bl	8003ec0 <HAL_UART_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800161e:	f7ff fbaf 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	2000021c 	.word	0x2000021c
 800162c:	40004400 	.word	0x40004400

08001630 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08c      	sub	sp, #48	@ 0x30
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a3a      	ldr	r2, [pc, #232]	@ (8001738 <HAL_UART_MspInit+0x108>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d135      	bne.n	80016be <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]
 8001656:	4b39      	ldr	r3, [pc, #228]	@ (800173c <HAL_UART_MspInit+0x10c>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165a:	4a38      	ldr	r2, [pc, #224]	@ (800173c <HAL_UART_MspInit+0x10c>)
 800165c:	f043 0310 	orr.w	r3, r3, #16
 8001660:	6453      	str	r3, [r2, #68]	@ 0x44
 8001662:	4b36      	ldr	r3, [pc, #216]	@ (800173c <HAL_UART_MspInit+0x10c>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	61bb      	str	r3, [r7, #24]
 800166c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	4b32      	ldr	r3, [pc, #200]	@ (800173c <HAL_UART_MspInit+0x10c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	4a31      	ldr	r2, [pc, #196]	@ (800173c <HAL_UART_MspInit+0x10c>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6313      	str	r3, [r2, #48]	@ 0x30
 800167e:	4b2f      	ldr	r3, [pc, #188]	@ (800173c <HAL_UART_MspInit+0x10c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800168a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800168e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001698:	2303      	movs	r3, #3
 800169a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800169c:	2307      	movs	r3, #7
 800169e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a0:	f107 031c 	add.w	r3, r7, #28
 80016a4:	4619      	mov	r1, r3
 80016a6:	4826      	ldr	r0, [pc, #152]	@ (8001740 <HAL_UART_MspInit+0x110>)
 80016a8:	f000 fa2e 	bl	8001b08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2105      	movs	r1, #5
 80016b0:	2025      	movs	r0, #37	@ 0x25
 80016b2:	f000 f96d 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016b6:	2025      	movs	r0, #37	@ 0x25
 80016b8:	f000 f986 	bl	80019c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016bc:	e038      	b.n	8001730 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a20      	ldr	r2, [pc, #128]	@ (8001744 <HAL_UART_MspInit+0x114>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d133      	bne.n	8001730 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <HAL_UART_MspInit+0x10c>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d0:	4a1a      	ldr	r2, [pc, #104]	@ (800173c <HAL_UART_MspInit+0x10c>)
 80016d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d8:	4b18      	ldr	r3, [pc, #96]	@ (800173c <HAL_UART_MspInit+0x10c>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	4b14      	ldr	r3, [pc, #80]	@ (800173c <HAL_UART_MspInit+0x10c>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ec:	4a13      	ldr	r2, [pc, #76]	@ (800173c <HAL_UART_MspInit+0x10c>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f4:	4b11      	ldr	r3, [pc, #68]	@ (800173c <HAL_UART_MspInit+0x10c>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001700:	230c      	movs	r3, #12
 8001702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001710:	2307      	movs	r3, #7
 8001712:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 031c 	add.w	r3, r7, #28
 8001718:	4619      	mov	r1, r3
 800171a:	4809      	ldr	r0, [pc, #36]	@ (8001740 <HAL_UART_MspInit+0x110>)
 800171c:	f000 f9f4 	bl	8001b08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2105      	movs	r1, #5
 8001724:	2026      	movs	r0, #38	@ 0x26
 8001726:	f000 f933 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800172a:	2026      	movs	r0, #38	@ 0x26
 800172c:	f000 f94c 	bl	80019c8 <HAL_NVIC_EnableIRQ>
}
 8001730:	bf00      	nop
 8001732:	3730      	adds	r7, #48	@ 0x30
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40011000 	.word	0x40011000
 800173c:	40023800 	.word	0x40023800
 8001740:	40020000 	.word	0x40020000
 8001744:	40004400 	.word	0x40004400

08001748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001748:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001780 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800174c:	f7ff fd20 	bl	8001190 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001750:	480c      	ldr	r0, [pc, #48]	@ (8001784 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001752:	490d      	ldr	r1, [pc, #52]	@ (8001788 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001754:	4a0d      	ldr	r2, [pc, #52]	@ (800178c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001758:	e002      	b.n	8001760 <LoopCopyDataInit>

0800175a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800175c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175e:	3304      	adds	r3, #4

08001760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001764:	d3f9      	bcc.n	800175a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001766:	4a0a      	ldr	r2, [pc, #40]	@ (8001790 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001768:	4c0a      	ldr	r4, [pc, #40]	@ (8001794 <LoopFillZerobss+0x22>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800176c:	e001      	b.n	8001772 <LoopFillZerobss>

0800176e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001770:	3204      	adds	r2, #4

08001772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001774:	d3fb      	bcc.n	800176e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001776:	f006 fbc9 	bl	8007f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177a:	f7ff fa4f 	bl	8000c1c <main>
  bx  lr    
 800177e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001780:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001788:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800178c:	08008bcc 	.word	0x08008bcc
  ldr r2, =_sbss
 8001790:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001794:	20004d9c 	.word	0x20004d9c

08001798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC_IRQHandler>
	...

0800179c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017a0:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <HAL_Init+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0d      	ldr	r2, [pc, #52]	@ (80017dc <HAL_Init+0x40>)
 80017a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017ac:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0a      	ldr	r2, [pc, #40]	@ (80017dc <HAL_Init+0x40>)
 80017b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b8:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a07      	ldr	r2, [pc, #28]	@ (80017dc <HAL_Init+0x40>)
 80017be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c4:	2003      	movs	r0, #3
 80017c6:	f000 f8d8 	bl	800197a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ca:	200f      	movs	r0, #15
 80017cc:	f7ff fb7c 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d0:	f7ff fb4e 	bl	8000e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023c00 	.word	0x40023c00

080017e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e4:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <HAL_IncTick+0x20>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <HAL_IncTick+0x24>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a04      	ldr	r2, [pc, #16]	@ (8001804 <HAL_IncTick+0x24>)
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000008 	.word	0x20000008
 8001804:	20000264 	.word	0x20000264

08001808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return uwTick;
 800180c:	4b03      	ldr	r3, [pc, #12]	@ (800181c <HAL_GetTick+0x14>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000264 	.word	0x20000264

08001820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001830:	4b0c      	ldr	r3, [pc, #48]	@ (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800183c:	4013      	ands	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001848:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800184c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001852:	4a04      	ldr	r2, [pc, #16]	@ (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	60d3      	str	r3, [r2, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800186c:	4b04      	ldr	r3, [pc, #16]	@ (8001880 <__NVIC_GetPriorityGrouping+0x18>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	f003 0307 	and.w	r3, r3, #7
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	2b00      	cmp	r3, #0
 8001894:	db0b      	blt.n	80018ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	f003 021f 	and.w	r2, r3, #31
 800189c:	4907      	ldr	r1, [pc, #28]	@ (80018bc <__NVIC_EnableIRQ+0x38>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	2001      	movs	r0, #1
 80018a6:	fa00 f202 	lsl.w	r2, r0, r2
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000e100 	.word	0xe000e100

080018c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	db0a      	blt.n	80018ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	490c      	ldr	r1, [pc, #48]	@ (800190c <__NVIC_SetPriority+0x4c>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	0112      	lsls	r2, r2, #4
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	440b      	add	r3, r1
 80018e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e8:	e00a      	b.n	8001900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4908      	ldr	r1, [pc, #32]	@ (8001910 <__NVIC_SetPriority+0x50>)
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	3b04      	subs	r3, #4
 80018f8:	0112      	lsls	r2, r2, #4
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	440b      	add	r3, r1
 80018fe:	761a      	strb	r2, [r3, #24]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000e100 	.word	0xe000e100
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	@ 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f1c3 0307 	rsb	r3, r3, #7
 800192e:	2b04      	cmp	r3, #4
 8001930:	bf28      	it	cs
 8001932:	2304      	movcs	r3, #4
 8001934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3304      	adds	r3, #4
 800193a:	2b06      	cmp	r3, #6
 800193c:	d902      	bls.n	8001944 <NVIC_EncodePriority+0x30>
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3b03      	subs	r3, #3
 8001942:	e000      	b.n	8001946 <NVIC_EncodePriority+0x32>
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43da      	mvns	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	401a      	ands	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800195c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43d9      	mvns	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	4313      	orrs	r3, r2
         );
}
 800196e:	4618      	mov	r0, r3
 8001970:	3724      	adds	r7, #36	@ 0x24
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ff4c 	bl	8001820 <__NVIC_SetPriorityGrouping>
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a2:	f7ff ff61 	bl	8001868 <__NVIC_GetPriorityGrouping>
 80019a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	68b9      	ldr	r1, [r7, #8]
 80019ac:	6978      	ldr	r0, [r7, #20]
 80019ae:	f7ff ffb1 	bl	8001914 <NVIC_EncodePriority>
 80019b2:	4602      	mov	r2, r0
 80019b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b8:	4611      	mov	r1, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff ff80 	bl	80018c0 <__NVIC_SetPriority>
}
 80019c0:	bf00      	nop
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff ff54 	bl	8001884 <__NVIC_EnableIRQ>
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019f2:	f7ff ff09 	bl	8001808 <HAL_GetTick>
 80019f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d008      	beq.n	8001a16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2280      	movs	r2, #128	@ 0x80
 8001a08:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e052      	b.n	8001abc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0216 	bic.w	r2, r2, #22
 8001a24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	695a      	ldr	r2, [r3, #20]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d103      	bne.n	8001a46 <HAL_DMA_Abort+0x62>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d007      	beq.n	8001a56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0208 	bic.w	r2, r2, #8
 8001a54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0201 	bic.w	r2, r2, #1
 8001a64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a66:	e013      	b.n	8001a90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a68:	f7ff fece 	bl	8001808 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b05      	cmp	r3, #5
 8001a74:	d90c      	bls.n	8001a90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2220      	movs	r2, #32
 8001a7a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2203      	movs	r2, #3
 8001a80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e015      	b.n	8001abc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1e4      	bne.n	8001a68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa2:	223f      	movs	r2, #63	@ 0x3f
 8001aa4:	409a      	lsls	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d004      	beq.n	8001ae2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2280      	movs	r2, #128	@ 0x80
 8001adc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00c      	b.n	8001afc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2205      	movs	r2, #5
 8001ae6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0201 	bic.w	r2, r2, #1
 8001af8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	@ 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	e159      	b.n	8001dd8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b24:	2201      	movs	r2, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	f040 8148 	bne.w	8001dd2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d005      	beq.n	8001b5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d130      	bne.n	8001bbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b90:	2201      	movs	r2, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 0201 	and.w	r2, r3, #1
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d017      	beq.n	8001bf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d123      	bne.n	8001c4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	08da      	lsrs	r2, r3, #3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3208      	adds	r2, #8
 8001c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	220f      	movs	r2, #15
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	08da      	lsrs	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3208      	adds	r2, #8
 8001c46:	69b9      	ldr	r1, [r7, #24]
 8001c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0203 	and.w	r2, r3, #3
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 80a2 	beq.w	8001dd2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	4b57      	ldr	r3, [pc, #348]	@ (8001df0 <HAL_GPIO_Init+0x2e8>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c96:	4a56      	ldr	r2, [pc, #344]	@ (8001df0 <HAL_GPIO_Init+0x2e8>)
 8001c98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c9e:	4b54      	ldr	r3, [pc, #336]	@ (8001df0 <HAL_GPIO_Init+0x2e8>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001caa:	4a52      	ldr	r2, [pc, #328]	@ (8001df4 <HAL_GPIO_Init+0x2ec>)
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	089b      	lsrs	r3, r3, #2
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	220f      	movs	r2, #15
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a49      	ldr	r2, [pc, #292]	@ (8001df8 <HAL_GPIO_Init+0x2f0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d019      	beq.n	8001d0a <HAL_GPIO_Init+0x202>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a48      	ldr	r2, [pc, #288]	@ (8001dfc <HAL_GPIO_Init+0x2f4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d013      	beq.n	8001d06 <HAL_GPIO_Init+0x1fe>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a47      	ldr	r2, [pc, #284]	@ (8001e00 <HAL_GPIO_Init+0x2f8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d00d      	beq.n	8001d02 <HAL_GPIO_Init+0x1fa>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a46      	ldr	r2, [pc, #280]	@ (8001e04 <HAL_GPIO_Init+0x2fc>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d007      	beq.n	8001cfe <HAL_GPIO_Init+0x1f6>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a45      	ldr	r2, [pc, #276]	@ (8001e08 <HAL_GPIO_Init+0x300>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d101      	bne.n	8001cfa <HAL_GPIO_Init+0x1f2>
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	e008      	b.n	8001d0c <HAL_GPIO_Init+0x204>
 8001cfa:	2307      	movs	r3, #7
 8001cfc:	e006      	b.n	8001d0c <HAL_GPIO_Init+0x204>
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e004      	b.n	8001d0c <HAL_GPIO_Init+0x204>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e002      	b.n	8001d0c <HAL_GPIO_Init+0x204>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <HAL_GPIO_Init+0x204>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	69fa      	ldr	r2, [r7, #28]
 8001d0e:	f002 0203 	and.w	r2, r2, #3
 8001d12:	0092      	lsls	r2, r2, #2
 8001d14:	4093      	lsls	r3, r2
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d1c:	4935      	ldr	r1, [pc, #212]	@ (8001df4 <HAL_GPIO_Init+0x2ec>)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3302      	adds	r3, #2
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d2a:	4b38      	ldr	r3, [pc, #224]	@ (8001e0c <HAL_GPIO_Init+0x304>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d4e:	4a2f      	ldr	r2, [pc, #188]	@ (8001e0c <HAL_GPIO_Init+0x304>)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d54:	4b2d      	ldr	r3, [pc, #180]	@ (8001e0c <HAL_GPIO_Init+0x304>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d78:	4a24      	ldr	r2, [pc, #144]	@ (8001e0c <HAL_GPIO_Init+0x304>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d7e:	4b23      	ldr	r3, [pc, #140]	@ (8001e0c <HAL_GPIO_Init+0x304>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001da2:	4a1a      	ldr	r2, [pc, #104]	@ (8001e0c <HAL_GPIO_Init+0x304>)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001da8:	4b18      	ldr	r3, [pc, #96]	@ (8001e0c <HAL_GPIO_Init+0x304>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dcc:	4a0f      	ldr	r2, [pc, #60]	@ (8001e0c <HAL_GPIO_Init+0x304>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	61fb      	str	r3, [r7, #28]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	2b0f      	cmp	r3, #15
 8001ddc:	f67f aea2 	bls.w	8001b24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	3724      	adds	r7, #36	@ 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40013800 	.word	0x40013800
 8001df8:	40020000 	.word	0x40020000
 8001dfc:	40020400 	.word	0x40020400
 8001e00:	40020800 	.word	0x40020800
 8001e04:	40020c00 	.word	0x40020c00
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40013c00 	.word	0x40013c00

08001e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e20:	787b      	ldrb	r3, [r7, #1]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e26:	887a      	ldrh	r2, [r7, #2]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e2c:	e003      	b.n	8001e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e2e:	887b      	ldrh	r3, [r7, #2]
 8001e30:	041a      	lsls	r2, r3, #16
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	619a      	str	r2, [r3, #24]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e267      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d075      	beq.n	8001f4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e62:	4b88      	ldr	r3, [pc, #544]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d00c      	beq.n	8001e88 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e6e:	4b85      	ldr	r3, [pc, #532]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d112      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e7a:	4b82      	ldr	r3, [pc, #520]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e86:	d10b      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e88:	4b7e      	ldr	r3, [pc, #504]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d05b      	beq.n	8001f4c <HAL_RCC_OscConfig+0x108>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d157      	bne.n	8001f4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e242      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea8:	d106      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x74>
 8001eaa:	4b76      	ldr	r3, [pc, #472]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a75      	ldr	r2, [pc, #468]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8001eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e01d      	b.n	8001ef4 <HAL_RCC_OscConfig+0xb0>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0x98>
 8001ec2:	4b70      	ldr	r3, [pc, #448]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a6f      	ldr	r2, [pc, #444]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8001ec8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4b6d      	ldr	r3, [pc, #436]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a6c      	ldr	r2, [pc, #432]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e00b      	b.n	8001ef4 <HAL_RCC_OscConfig+0xb0>
 8001edc:	4b69      	ldr	r3, [pc, #420]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a68      	ldr	r2, [pc, #416]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8001ee2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	4b66      	ldr	r3, [pc, #408]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a65      	ldr	r2, [pc, #404]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8001eee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d013      	beq.n	8001f24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff fc84 	bl	8001808 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f04:	f7ff fc80 	bl	8001808 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	@ 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e207      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f16:	4b5b      	ldr	r3, [pc, #364]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0xc0>
 8001f22:	e014      	b.n	8001f4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7ff fc70 	bl	8001808 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f2c:	f7ff fc6c 	bl	8001808 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	@ 0x64
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e1f3      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3e:	4b51      	ldr	r3, [pc, #324]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0xe8>
 8001f4a:	e000      	b.n	8001f4e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d063      	beq.n	8002022 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f5a:	4b4a      	ldr	r3, [pc, #296]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00b      	beq.n	8001f7e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f66:	4b47      	ldr	r3, [pc, #284]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d11c      	bne.n	8001fac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f72:	4b44      	ldr	r3, [pc, #272]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d116      	bne.n	8001fac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7e:	4b41      	ldr	r3, [pc, #260]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d005      	beq.n	8001f96 <HAL_RCC_OscConfig+0x152>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d001      	beq.n	8001f96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e1c7      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f96:	4b3b      	ldr	r3, [pc, #236]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4937      	ldr	r1, [pc, #220]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001faa:	e03a      	b.n	8002022 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d020      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb4:	4b34      	ldr	r3, [pc, #208]	@ (8002088 <HAL_RCC_OscConfig+0x244>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fba:	f7ff fc25 	bl	8001808 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc2:	f7ff fc21 	bl	8001808 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e1a8      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe0:	4b28      	ldr	r3, [pc, #160]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4925      	ldr	r1, [pc, #148]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	600b      	str	r3, [r1, #0]
 8001ff4:	e015      	b.n	8002022 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff6:	4b24      	ldr	r3, [pc, #144]	@ (8002088 <HAL_RCC_OscConfig+0x244>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffc:	f7ff fc04 	bl	8001808 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002004:	f7ff fc00 	bl	8001808 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e187      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002016:	4b1b      	ldr	r3, [pc, #108]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d036      	beq.n	800209c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d016      	beq.n	8002064 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002036:	4b15      	ldr	r3, [pc, #84]	@ (800208c <HAL_RCC_OscConfig+0x248>)
 8002038:	2201      	movs	r2, #1
 800203a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203c:	f7ff fbe4 	bl	8001808 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002044:	f7ff fbe0 	bl	8001808 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e167      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002056:	4b0b      	ldr	r3, [pc, #44]	@ (8002084 <HAL_RCC_OscConfig+0x240>)
 8002058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0x200>
 8002062:	e01b      	b.n	800209c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002064:	4b09      	ldr	r3, [pc, #36]	@ (800208c <HAL_RCC_OscConfig+0x248>)
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206a:	f7ff fbcd 	bl	8001808 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002070:	e00e      	b.n	8002090 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002072:	f7ff fbc9 	bl	8001808 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d907      	bls.n	8002090 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e150      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
 8002084:	40023800 	.word	0x40023800
 8002088:	42470000 	.word	0x42470000
 800208c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002090:	4b88      	ldr	r3, [pc, #544]	@ (80022b4 <HAL_RCC_OscConfig+0x470>)
 8002092:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1ea      	bne.n	8002072 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 8097 	beq.w	80021d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ae:	4b81      	ldr	r3, [pc, #516]	@ (80022b4 <HAL_RCC_OscConfig+0x470>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10f      	bne.n	80020da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	4b7d      	ldr	r3, [pc, #500]	@ (80022b4 <HAL_RCC_OscConfig+0x470>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	4a7c      	ldr	r2, [pc, #496]	@ (80022b4 <HAL_RCC_OscConfig+0x470>)
 80020c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ca:	4b7a      	ldr	r3, [pc, #488]	@ (80022b4 <HAL_RCC_OscConfig+0x470>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d6:	2301      	movs	r3, #1
 80020d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020da:	4b77      	ldr	r3, [pc, #476]	@ (80022b8 <HAL_RCC_OscConfig+0x474>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d118      	bne.n	8002118 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020e6:	4b74      	ldr	r3, [pc, #464]	@ (80022b8 <HAL_RCC_OscConfig+0x474>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a73      	ldr	r2, [pc, #460]	@ (80022b8 <HAL_RCC_OscConfig+0x474>)
 80020ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f2:	f7ff fb89 	bl	8001808 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020fa:	f7ff fb85 	bl	8001808 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e10c      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210c:	4b6a      	ldr	r3, [pc, #424]	@ (80022b8 <HAL_RCC_OscConfig+0x474>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d106      	bne.n	800212e <HAL_RCC_OscConfig+0x2ea>
 8002120:	4b64      	ldr	r3, [pc, #400]	@ (80022b4 <HAL_RCC_OscConfig+0x470>)
 8002122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002124:	4a63      	ldr	r2, [pc, #396]	@ (80022b4 <HAL_RCC_OscConfig+0x470>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	6713      	str	r3, [r2, #112]	@ 0x70
 800212c:	e01c      	b.n	8002168 <HAL_RCC_OscConfig+0x324>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b05      	cmp	r3, #5
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0x30c>
 8002136:	4b5f      	ldr	r3, [pc, #380]	@ (80022b4 <HAL_RCC_OscConfig+0x470>)
 8002138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800213a:	4a5e      	ldr	r2, [pc, #376]	@ (80022b4 <HAL_RCC_OscConfig+0x470>)
 800213c:	f043 0304 	orr.w	r3, r3, #4
 8002140:	6713      	str	r3, [r2, #112]	@ 0x70
 8002142:	4b5c      	ldr	r3, [pc, #368]	@ (80022b4 <HAL_RCC_OscConfig+0x470>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002146:	4a5b      	ldr	r2, [pc, #364]	@ (80022b4 <HAL_RCC_OscConfig+0x470>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6713      	str	r3, [r2, #112]	@ 0x70
 800214e:	e00b      	b.n	8002168 <HAL_RCC_OscConfig+0x324>
 8002150:	4b58      	ldr	r3, [pc, #352]	@ (80022b4 <HAL_RCC_OscConfig+0x470>)
 8002152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002154:	4a57      	ldr	r2, [pc, #348]	@ (80022b4 <HAL_RCC_OscConfig+0x470>)
 8002156:	f023 0301 	bic.w	r3, r3, #1
 800215a:	6713      	str	r3, [r2, #112]	@ 0x70
 800215c:	4b55      	ldr	r3, [pc, #340]	@ (80022b4 <HAL_RCC_OscConfig+0x470>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002160:	4a54      	ldr	r2, [pc, #336]	@ (80022b4 <HAL_RCC_OscConfig+0x470>)
 8002162:	f023 0304 	bic.w	r3, r3, #4
 8002166:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d015      	beq.n	800219c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002170:	f7ff fb4a 	bl	8001808 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002176:	e00a      	b.n	800218e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002178:	f7ff fb46 	bl	8001808 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002186:	4293      	cmp	r3, r2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e0cb      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218e:	4b49      	ldr	r3, [pc, #292]	@ (80022b4 <HAL_RCC_OscConfig+0x470>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0ee      	beq.n	8002178 <HAL_RCC_OscConfig+0x334>
 800219a:	e014      	b.n	80021c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219c:	f7ff fb34 	bl	8001808 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a2:	e00a      	b.n	80021ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a4:	f7ff fb30 	bl	8001808 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e0b5      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ba:	4b3e      	ldr	r3, [pc, #248]	@ (80022b4 <HAL_RCC_OscConfig+0x470>)
 80021bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1ee      	bne.n	80021a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021c6:	7dfb      	ldrb	r3, [r7, #23]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d105      	bne.n	80021d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021cc:	4b39      	ldr	r3, [pc, #228]	@ (80022b4 <HAL_RCC_OscConfig+0x470>)
 80021ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d0:	4a38      	ldr	r2, [pc, #224]	@ (80022b4 <HAL_RCC_OscConfig+0x470>)
 80021d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 80a1 	beq.w	8002324 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021e2:	4b34      	ldr	r3, [pc, #208]	@ (80022b4 <HAL_RCC_OscConfig+0x470>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d05c      	beq.n	80022a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d141      	bne.n	800227a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f6:	4b31      	ldr	r3, [pc, #196]	@ (80022bc <HAL_RCC_OscConfig+0x478>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fc:	f7ff fb04 	bl	8001808 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002204:	f7ff fb00 	bl	8001808 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e087      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002216:	4b27      	ldr	r3, [pc, #156]	@ (80022b4 <HAL_RCC_OscConfig+0x470>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69da      	ldr	r2, [r3, #28]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002230:	019b      	lsls	r3, r3, #6
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002238:	085b      	lsrs	r3, r3, #1
 800223a:	3b01      	subs	r3, #1
 800223c:	041b      	lsls	r3, r3, #16
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002244:	061b      	lsls	r3, r3, #24
 8002246:	491b      	ldr	r1, [pc, #108]	@ (80022b4 <HAL_RCC_OscConfig+0x470>)
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800224c:	4b1b      	ldr	r3, [pc, #108]	@ (80022bc <HAL_RCC_OscConfig+0x478>)
 800224e:	2201      	movs	r2, #1
 8002250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002252:	f7ff fad9 	bl	8001808 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225a:	f7ff fad5 	bl	8001808 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e05c      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226c:	4b11      	ldr	r3, [pc, #68]	@ (80022b4 <HAL_RCC_OscConfig+0x470>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x416>
 8002278:	e054      	b.n	8002324 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227a:	4b10      	ldr	r3, [pc, #64]	@ (80022bc <HAL_RCC_OscConfig+0x478>)
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7ff fac2 	bl	8001808 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002288:	f7ff fabe 	bl	8001808 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e045      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229a:	4b06      	ldr	r3, [pc, #24]	@ (80022b4 <HAL_RCC_OscConfig+0x470>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x444>
 80022a6:	e03d      	b.n	8002324 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d107      	bne.n	80022c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e038      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40007000 	.word	0x40007000
 80022bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002330 <HAL_RCC_OscConfig+0x4ec>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d028      	beq.n	8002320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d8:	429a      	cmp	r2, r3
 80022da:	d121      	bne.n	8002320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d11a      	bne.n	8002320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022f0:	4013      	ands	r3, r2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d111      	bne.n	8002320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002306:	085b      	lsrs	r3, r3, #1
 8002308:	3b01      	subs	r3, #1
 800230a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800230c:	429a      	cmp	r2, r3
 800230e:	d107      	bne.n	8002320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800231a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800

08002334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0cc      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002348:	4b68      	ldr	r3, [pc, #416]	@ (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d90c      	bls.n	8002370 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b65      	ldr	r3, [pc, #404]	@ (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b63      	ldr	r3, [pc, #396]	@ (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0b8      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d020      	beq.n	80023be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002388:	4b59      	ldr	r3, [pc, #356]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	4a58      	ldr	r2, [pc, #352]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002392:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0308 	and.w	r3, r3, #8
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023a0:	4b53      	ldr	r3, [pc, #332]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	4a52      	ldr	r2, [pc, #328]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ac:	4b50      	ldr	r3, [pc, #320]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	494d      	ldr	r1, [pc, #308]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d044      	beq.n	8002454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d107      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d2:	4b47      	ldr	r3, [pc, #284]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d119      	bne.n	8002412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e07f      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d003      	beq.n	80023f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f2:	4b3f      	ldr	r3, [pc, #252]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e06f      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002402:	4b3b      	ldr	r3, [pc, #236]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e067      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002412:	4b37      	ldr	r3, [pc, #220]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f023 0203 	bic.w	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4934      	ldr	r1, [pc, #208]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	4313      	orrs	r3, r2
 8002422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002424:	f7ff f9f0 	bl	8001808 <HAL_GetTick>
 8002428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242a:	e00a      	b.n	8002442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242c:	f7ff f9ec 	bl	8001808 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e04f      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002442:	4b2b      	ldr	r3, [pc, #172]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 020c 	and.w	r2, r3, #12
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	429a      	cmp	r2, r3
 8002452:	d1eb      	bne.n	800242c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002454:	4b25      	ldr	r3, [pc, #148]	@ (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d20c      	bcs.n	800247c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b22      	ldr	r3, [pc, #136]	@ (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800246a:	4b20      	ldr	r3, [pc, #128]	@ (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e032      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002488:	4b19      	ldr	r3, [pc, #100]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4916      	ldr	r1, [pc, #88]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	4313      	orrs	r3, r2
 8002498:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d009      	beq.n	80024ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024a6:	4b12      	ldr	r3, [pc, #72]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	490e      	ldr	r1, [pc, #56]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ba:	f000 f821 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80024be:	4602      	mov	r2, r0
 80024c0:	4b0b      	ldr	r3, [pc, #44]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	091b      	lsrs	r3, r3, #4
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	490a      	ldr	r1, [pc, #40]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 80024cc:	5ccb      	ldrb	r3, [r1, r3]
 80024ce:	fa22 f303 	lsr.w	r3, r2, r3
 80024d2:	4a09      	ldr	r2, [pc, #36]	@ (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024d6:	4b09      	ldr	r3, [pc, #36]	@ (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fcf4 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40023c00 	.word	0x40023c00
 80024f0:	40023800 	.word	0x40023800
 80024f4:	08008b70 	.word	0x08008b70
 80024f8:	20000000 	.word	0x20000000
 80024fc:	20000004 	.word	0x20000004

08002500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002504:	b094      	sub	sp, #80	@ 0x50
 8002506:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002518:	4b79      	ldr	r3, [pc, #484]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x200>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b08      	cmp	r3, #8
 8002522:	d00d      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x40>
 8002524:	2b08      	cmp	r3, #8
 8002526:	f200 80e1 	bhi.w	80026ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <HAL_RCC_GetSysClockFreq+0x34>
 800252e:	2b04      	cmp	r3, #4
 8002530:	d003      	beq.n	800253a <HAL_RCC_GetSysClockFreq+0x3a>
 8002532:	e0db      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002534:	4b73      	ldr	r3, [pc, #460]	@ (8002704 <HAL_RCC_GetSysClockFreq+0x204>)
 8002536:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002538:	e0db      	b.n	80026f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800253a:	4b73      	ldr	r3, [pc, #460]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x208>)
 800253c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800253e:	e0d8      	b.n	80026f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002540:	4b6f      	ldr	r3, [pc, #444]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x200>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002548:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800254a:	4b6d      	ldr	r3, [pc, #436]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x200>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d063      	beq.n	800261e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002556:	4b6a      	ldr	r3, [pc, #424]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x200>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	099b      	lsrs	r3, r3, #6
 800255c:	2200      	movs	r2, #0
 800255e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002560:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002568:	633b      	str	r3, [r7, #48]	@ 0x30
 800256a:	2300      	movs	r3, #0
 800256c:	637b      	str	r3, [r7, #52]	@ 0x34
 800256e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002572:	4622      	mov	r2, r4
 8002574:	462b      	mov	r3, r5
 8002576:	f04f 0000 	mov.w	r0, #0
 800257a:	f04f 0100 	mov.w	r1, #0
 800257e:	0159      	lsls	r1, r3, #5
 8002580:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002584:	0150      	lsls	r0, r2, #5
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4621      	mov	r1, r4
 800258c:	1a51      	subs	r1, r2, r1
 800258e:	6139      	str	r1, [r7, #16]
 8002590:	4629      	mov	r1, r5
 8002592:	eb63 0301 	sbc.w	r3, r3, r1
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025a4:	4659      	mov	r1, fp
 80025a6:	018b      	lsls	r3, r1, #6
 80025a8:	4651      	mov	r1, sl
 80025aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ae:	4651      	mov	r1, sl
 80025b0:	018a      	lsls	r2, r1, #6
 80025b2:	4651      	mov	r1, sl
 80025b4:	ebb2 0801 	subs.w	r8, r2, r1
 80025b8:	4659      	mov	r1, fp
 80025ba:	eb63 0901 	sbc.w	r9, r3, r1
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025d2:	4690      	mov	r8, r2
 80025d4:	4699      	mov	r9, r3
 80025d6:	4623      	mov	r3, r4
 80025d8:	eb18 0303 	adds.w	r3, r8, r3
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	462b      	mov	r3, r5
 80025e0:	eb49 0303 	adc.w	r3, r9, r3
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025f2:	4629      	mov	r1, r5
 80025f4:	024b      	lsls	r3, r1, #9
 80025f6:	4621      	mov	r1, r4
 80025f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025fc:	4621      	mov	r1, r4
 80025fe:	024a      	lsls	r2, r1, #9
 8002600:	4610      	mov	r0, r2
 8002602:	4619      	mov	r1, r3
 8002604:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002606:	2200      	movs	r2, #0
 8002608:	62bb      	str	r3, [r7, #40]	@ 0x28
 800260a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800260c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002610:	f7fd fe36 	bl	8000280 <__aeabi_uldivmod>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4613      	mov	r3, r2
 800261a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800261c:	e058      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800261e:	4b38      	ldr	r3, [pc, #224]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x200>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	099b      	lsrs	r3, r3, #6
 8002624:	2200      	movs	r2, #0
 8002626:	4618      	mov	r0, r3
 8002628:	4611      	mov	r1, r2
 800262a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800262e:	623b      	str	r3, [r7, #32]
 8002630:	2300      	movs	r3, #0
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
 8002634:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002638:	4642      	mov	r2, r8
 800263a:	464b      	mov	r3, r9
 800263c:	f04f 0000 	mov.w	r0, #0
 8002640:	f04f 0100 	mov.w	r1, #0
 8002644:	0159      	lsls	r1, r3, #5
 8002646:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800264a:	0150      	lsls	r0, r2, #5
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4641      	mov	r1, r8
 8002652:	ebb2 0a01 	subs.w	sl, r2, r1
 8002656:	4649      	mov	r1, r9
 8002658:	eb63 0b01 	sbc.w	fp, r3, r1
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002668:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800266c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002670:	ebb2 040a 	subs.w	r4, r2, sl
 8002674:	eb63 050b 	sbc.w	r5, r3, fp
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	00eb      	lsls	r3, r5, #3
 8002682:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002686:	00e2      	lsls	r2, r4, #3
 8002688:	4614      	mov	r4, r2
 800268a:	461d      	mov	r5, r3
 800268c:	4643      	mov	r3, r8
 800268e:	18e3      	adds	r3, r4, r3
 8002690:	603b      	str	r3, [r7, #0]
 8002692:	464b      	mov	r3, r9
 8002694:	eb45 0303 	adc.w	r3, r5, r3
 8002698:	607b      	str	r3, [r7, #4]
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	f04f 0300 	mov.w	r3, #0
 80026a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026a6:	4629      	mov	r1, r5
 80026a8:	028b      	lsls	r3, r1, #10
 80026aa:	4621      	mov	r1, r4
 80026ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026b0:	4621      	mov	r1, r4
 80026b2:	028a      	lsls	r2, r1, #10
 80026b4:	4610      	mov	r0, r2
 80026b6:	4619      	mov	r1, r3
 80026b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026ba:	2200      	movs	r2, #0
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	61fa      	str	r2, [r7, #28]
 80026c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026c4:	f7fd fddc 	bl	8000280 <__aeabi_uldivmod>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4613      	mov	r3, r2
 80026ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80026d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	0c1b      	lsrs	r3, r3, #16
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	3301      	adds	r3, #1
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80026e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026ea:	e002      	b.n	80026f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026ec:	4b05      	ldr	r3, [pc, #20]	@ (8002704 <HAL_RCC_GetSysClockFreq+0x204>)
 80026ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3750      	adds	r7, #80	@ 0x50
 80026f8:	46bd      	mov	sp, r7
 80026fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800
 8002704:	00f42400 	.word	0x00f42400
 8002708:	007a1200 	.word	0x007a1200

0800270c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002710:	4b03      	ldr	r3, [pc, #12]	@ (8002720 <HAL_RCC_GetHCLKFreq+0x14>)
 8002712:	681b      	ldr	r3, [r3, #0]
}
 8002714:	4618      	mov	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20000000 	.word	0x20000000

08002724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002728:	f7ff fff0 	bl	800270c <HAL_RCC_GetHCLKFreq>
 800272c:	4602      	mov	r2, r0
 800272e:	4b05      	ldr	r3, [pc, #20]	@ (8002744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	0a9b      	lsrs	r3, r3, #10
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	4903      	ldr	r1, [pc, #12]	@ (8002748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800273a:	5ccb      	ldrb	r3, [r1, r3]
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002740:	4618      	mov	r0, r3
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40023800 	.word	0x40023800
 8002748:	08008b80 	.word	0x08008b80

0800274c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002750:	f7ff ffdc 	bl	800270c <HAL_RCC_GetHCLKFreq>
 8002754:	4602      	mov	r2, r0
 8002756:	4b05      	ldr	r3, [pc, #20]	@ (800276c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	0b5b      	lsrs	r3, r3, #13
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	4903      	ldr	r1, [pc, #12]	@ (8002770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002762:	5ccb      	ldrb	r3, [r1, r3]
 8002764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002768:	4618      	mov	r0, r3
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40023800 	.word	0x40023800
 8002770:	08008b80 	.word	0x08008b80

08002774 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	220f      	movs	r2, #15
 8002782:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002784:	4b12      	ldr	r3, [pc, #72]	@ (80027d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0203 	and.w	r2, r3, #3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002790:	4b0f      	ldr	r3, [pc, #60]	@ (80027d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800279c:	4b0c      	ldr	r3, [pc, #48]	@ (80027d0 <HAL_RCC_GetClockConfig+0x5c>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027a8:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <HAL_RCC_GetClockConfig+0x5c>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	08db      	lsrs	r3, r3, #3
 80027ae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027b6:	4b07      	ldr	r3, [pc, #28]	@ (80027d4 <HAL_RCC_GetClockConfig+0x60>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0207 	and.w	r2, r3, #7
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	601a      	str	r2, [r3, #0]
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800
 80027d4:	40023c00 	.word	0x40023c00

080027d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e041      	b.n	800286e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7fe fe04 	bl	800140c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3304      	adds	r3, #4
 8002814:	4619      	mov	r1, r3
 8002816:	4610      	mov	r0, r2
 8002818:	f000 fee0 	bl	80035dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b01      	cmp	r3, #1
 800288a:	d001      	beq.n	8002890 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e03c      	b.n	800290a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a1e      	ldr	r2, [pc, #120]	@ (8002918 <HAL_TIM_Base_Start+0xa0>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d018      	beq.n	80028d4 <HAL_TIM_Base_Start+0x5c>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028aa:	d013      	beq.n	80028d4 <HAL_TIM_Base_Start+0x5c>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a1a      	ldr	r2, [pc, #104]	@ (800291c <HAL_TIM_Base_Start+0xa4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d00e      	beq.n	80028d4 <HAL_TIM_Base_Start+0x5c>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a19      	ldr	r2, [pc, #100]	@ (8002920 <HAL_TIM_Base_Start+0xa8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d009      	beq.n	80028d4 <HAL_TIM_Base_Start+0x5c>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a17      	ldr	r2, [pc, #92]	@ (8002924 <HAL_TIM_Base_Start+0xac>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d004      	beq.n	80028d4 <HAL_TIM_Base_Start+0x5c>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a16      	ldr	r2, [pc, #88]	@ (8002928 <HAL_TIM_Base_Start+0xb0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d111      	bne.n	80028f8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2b06      	cmp	r3, #6
 80028e4:	d010      	beq.n	8002908 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f042 0201 	orr.w	r2, r2, #1
 80028f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f6:	e007      	b.n	8002908 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40010000 	.word	0x40010000
 800291c:	40000400 	.word	0x40000400
 8002920:	40000800 	.word	0x40000800
 8002924:	40000c00 	.word	0x40000c00
 8002928:	40014000 	.word	0x40014000

0800292c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b01      	cmp	r3, #1
 800293e:	d001      	beq.n	8002944 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e044      	b.n	80029ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a1e      	ldr	r2, [pc, #120]	@ (80029dc <HAL_TIM_Base_Start_IT+0xb0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d018      	beq.n	8002998 <HAL_TIM_Base_Start_IT+0x6c>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800296e:	d013      	beq.n	8002998 <HAL_TIM_Base_Start_IT+0x6c>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a1a      	ldr	r2, [pc, #104]	@ (80029e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d00e      	beq.n	8002998 <HAL_TIM_Base_Start_IT+0x6c>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a19      	ldr	r2, [pc, #100]	@ (80029e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d009      	beq.n	8002998 <HAL_TIM_Base_Start_IT+0x6c>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a17      	ldr	r2, [pc, #92]	@ (80029e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d004      	beq.n	8002998 <HAL_TIM_Base_Start_IT+0x6c>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a16      	ldr	r2, [pc, #88]	@ (80029ec <HAL_TIM_Base_Start_IT+0xc0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d111      	bne.n	80029bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b06      	cmp	r3, #6
 80029a8:	d010      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f042 0201 	orr.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ba:	e007      	b.n	80029cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0201 	orr.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40010000 	.word	0x40010000
 80029e0:	40000400 	.word	0x40000400
 80029e4:	40000800 	.word	0x40000800
 80029e8:	40000c00 	.word	0x40000c00
 80029ec:	40014000 	.word	0x40014000

080029f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e041      	b.n	8002a86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d106      	bne.n	8002a1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f839 	bl	8002a8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4610      	mov	r0, r2
 8002a30:	f000 fdd4 	bl	80035dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d109      	bne.n	8002ac8 <HAL_TIM_PWM_Start+0x24>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	bf14      	ite	ne
 8002ac0:	2301      	movne	r3, #1
 8002ac2:	2300      	moveq	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	e022      	b.n	8002b0e <HAL_TIM_PWM_Start+0x6a>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d109      	bne.n	8002ae2 <HAL_TIM_PWM_Start+0x3e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	bf14      	ite	ne
 8002ada:	2301      	movne	r3, #1
 8002adc:	2300      	moveq	r3, #0
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	e015      	b.n	8002b0e <HAL_TIM_PWM_Start+0x6a>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d109      	bne.n	8002afc <HAL_TIM_PWM_Start+0x58>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	bf14      	ite	ne
 8002af4:	2301      	movne	r3, #1
 8002af6:	2300      	moveq	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	e008      	b.n	8002b0e <HAL_TIM_PWM_Start+0x6a>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	bf14      	ite	ne
 8002b08:	2301      	movne	r3, #1
 8002b0a:	2300      	moveq	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e068      	b.n	8002be8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d104      	bne.n	8002b26 <HAL_TIM_PWM_Start+0x82>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b24:	e013      	b.n	8002b4e <HAL_TIM_PWM_Start+0xaa>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d104      	bne.n	8002b36 <HAL_TIM_PWM_Start+0x92>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b34:	e00b      	b.n	8002b4e <HAL_TIM_PWM_Start+0xaa>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d104      	bne.n	8002b46 <HAL_TIM_PWM_Start+0xa2>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b44:	e003      	b.n	8002b4e <HAL_TIM_PWM_Start+0xaa>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2202      	movs	r2, #2
 8002b4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2201      	movs	r2, #1
 8002b54:	6839      	ldr	r1, [r7, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f001 f90a 	bl	8003d70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a23      	ldr	r2, [pc, #140]	@ (8002bf0 <HAL_TIM_PWM_Start+0x14c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d107      	bne.n	8002b76 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b74:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a1d      	ldr	r2, [pc, #116]	@ (8002bf0 <HAL_TIM_PWM_Start+0x14c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d018      	beq.n	8002bb2 <HAL_TIM_PWM_Start+0x10e>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b88:	d013      	beq.n	8002bb2 <HAL_TIM_PWM_Start+0x10e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a19      	ldr	r2, [pc, #100]	@ (8002bf4 <HAL_TIM_PWM_Start+0x150>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d00e      	beq.n	8002bb2 <HAL_TIM_PWM_Start+0x10e>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a17      	ldr	r2, [pc, #92]	@ (8002bf8 <HAL_TIM_PWM_Start+0x154>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d009      	beq.n	8002bb2 <HAL_TIM_PWM_Start+0x10e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a16      	ldr	r2, [pc, #88]	@ (8002bfc <HAL_TIM_PWM_Start+0x158>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d004      	beq.n	8002bb2 <HAL_TIM_PWM_Start+0x10e>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a14      	ldr	r2, [pc, #80]	@ (8002c00 <HAL_TIM_PWM_Start+0x15c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d111      	bne.n	8002bd6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2b06      	cmp	r3, #6
 8002bc2:	d010      	beq.n	8002be6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd4:	e007      	b.n	8002be6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0201 	orr.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40010000 	.word	0x40010000
 8002bf4:	40000400 	.word	0x40000400
 8002bf8:	40000800 	.word	0x40000800
 8002bfc:	40000c00 	.word	0x40000c00
 8002c00:	40014000 	.word	0x40014000

08002c04 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e041      	b.n	8002c9a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f839 	bl	8002ca2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	4619      	mov	r1, r3
 8002c42:	4610      	mov	r0, r2
 8002c44:	f000 fcca 	bl	80035dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d104      	bne.n	8002cd6 <HAL_TIM_IC_Start_IT+0x1e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	e013      	b.n	8002cfe <HAL_TIM_IC_Start_IT+0x46>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d104      	bne.n	8002ce6 <HAL_TIM_IC_Start_IT+0x2e>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	e00b      	b.n	8002cfe <HAL_TIM_IC_Start_IT+0x46>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d104      	bne.n	8002cf6 <HAL_TIM_IC_Start_IT+0x3e>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	e003      	b.n	8002cfe <HAL_TIM_IC_Start_IT+0x46>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d104      	bne.n	8002d10 <HAL_TIM_IC_Start_IT+0x58>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	e013      	b.n	8002d38 <HAL_TIM_IC_Start_IT+0x80>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d104      	bne.n	8002d20 <HAL_TIM_IC_Start_IT+0x68>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	e00b      	b.n	8002d38 <HAL_TIM_IC_Start_IT+0x80>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d104      	bne.n	8002d30 <HAL_TIM_IC_Start_IT+0x78>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	e003      	b.n	8002d38 <HAL_TIM_IC_Start_IT+0x80>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d3a:	7bbb      	ldrb	r3, [r7, #14]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d102      	bne.n	8002d46 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d40:	7b7b      	ldrb	r3, [r7, #13]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d001      	beq.n	8002d4a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e0c2      	b.n	8002ed0 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d104      	bne.n	8002d5a <HAL_TIM_IC_Start_IT+0xa2>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d58:	e013      	b.n	8002d82 <HAL_TIM_IC_Start_IT+0xca>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d104      	bne.n	8002d6a <HAL_TIM_IC_Start_IT+0xb2>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d68:	e00b      	b.n	8002d82 <HAL_TIM_IC_Start_IT+0xca>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d104      	bne.n	8002d7a <HAL_TIM_IC_Start_IT+0xc2>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d78:	e003      	b.n	8002d82 <HAL_TIM_IC_Start_IT+0xca>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d104      	bne.n	8002d92 <HAL_TIM_IC_Start_IT+0xda>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d90:	e013      	b.n	8002dba <HAL_TIM_IC_Start_IT+0x102>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d104      	bne.n	8002da2 <HAL_TIM_IC_Start_IT+0xea>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002da0:	e00b      	b.n	8002dba <HAL_TIM_IC_Start_IT+0x102>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d104      	bne.n	8002db2 <HAL_TIM_IC_Start_IT+0xfa>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002db0:	e003      	b.n	8002dba <HAL_TIM_IC_Start_IT+0x102>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2202      	movs	r2, #2
 8002db6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b0c      	cmp	r3, #12
 8002dbe:	d841      	bhi.n	8002e44 <HAL_TIM_IC_Start_IT+0x18c>
 8002dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8002dc8 <HAL_TIM_IC_Start_IT+0x110>)
 8002dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc6:	bf00      	nop
 8002dc8:	08002dfd 	.word	0x08002dfd
 8002dcc:	08002e45 	.word	0x08002e45
 8002dd0:	08002e45 	.word	0x08002e45
 8002dd4:	08002e45 	.word	0x08002e45
 8002dd8:	08002e0f 	.word	0x08002e0f
 8002ddc:	08002e45 	.word	0x08002e45
 8002de0:	08002e45 	.word	0x08002e45
 8002de4:	08002e45 	.word	0x08002e45
 8002de8:	08002e21 	.word	0x08002e21
 8002dec:	08002e45 	.word	0x08002e45
 8002df0:	08002e45 	.word	0x08002e45
 8002df4:	08002e45 	.word	0x08002e45
 8002df8:	08002e33 	.word	0x08002e33
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0202 	orr.w	r2, r2, #2
 8002e0a:	60da      	str	r2, [r3, #12]
      break;
 8002e0c:	e01d      	b.n	8002e4a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0204 	orr.w	r2, r2, #4
 8002e1c:	60da      	str	r2, [r3, #12]
      break;
 8002e1e:	e014      	b.n	8002e4a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0208 	orr.w	r2, r2, #8
 8002e2e:	60da      	str	r2, [r3, #12]
      break;
 8002e30:	e00b      	b.n	8002e4a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68da      	ldr	r2, [r3, #12]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0210 	orr.w	r2, r2, #16
 8002e40:	60da      	str	r2, [r3, #12]
      break;
 8002e42:	e002      	b.n	8002e4a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
      break;
 8002e48:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d13e      	bne.n	8002ece <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2201      	movs	r2, #1
 8002e56:	6839      	ldr	r1, [r7, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 ff89 	bl	8003d70 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a1d      	ldr	r2, [pc, #116]	@ (8002ed8 <HAL_TIM_IC_Start_IT+0x220>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d018      	beq.n	8002e9a <HAL_TIM_IC_Start_IT+0x1e2>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e70:	d013      	beq.n	8002e9a <HAL_TIM_IC_Start_IT+0x1e2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a19      	ldr	r2, [pc, #100]	@ (8002edc <HAL_TIM_IC_Start_IT+0x224>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d00e      	beq.n	8002e9a <HAL_TIM_IC_Start_IT+0x1e2>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a17      	ldr	r2, [pc, #92]	@ (8002ee0 <HAL_TIM_IC_Start_IT+0x228>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d009      	beq.n	8002e9a <HAL_TIM_IC_Start_IT+0x1e2>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a16      	ldr	r2, [pc, #88]	@ (8002ee4 <HAL_TIM_IC_Start_IT+0x22c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d004      	beq.n	8002e9a <HAL_TIM_IC_Start_IT+0x1e2>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a14      	ldr	r2, [pc, #80]	@ (8002ee8 <HAL_TIM_IC_Start_IT+0x230>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d111      	bne.n	8002ebe <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b06      	cmp	r3, #6
 8002eaa:	d010      	beq.n	8002ece <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ebc:	e007      	b.n	8002ece <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0201 	orr.w	r2, r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40010000 	.word	0x40010000
 8002edc:	40000400 	.word	0x40000400
 8002ee0:	40000800 	.word	0x40000800
 8002ee4:	40000c00 	.word	0x40000c00
 8002ee8:	40014000 	.word	0x40014000

08002eec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d020      	beq.n	8002f50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01b      	beq.n	8002f50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0202 	mvn.w	r2, #2
 8002f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fd fbe8 	bl	800070c <HAL_TIM_IC_CaptureCallback>
 8002f3c:	e005      	b.n	8002f4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fb2e 	bl	80035a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fb35 	bl	80035b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d020      	beq.n	8002f9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d01b      	beq.n	8002f9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0204 	mvn.w	r2, #4
 8002f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2202      	movs	r2, #2
 8002f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7fd fbc2 	bl	800070c <HAL_TIM_IC_CaptureCallback>
 8002f88:	e005      	b.n	8002f96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fb08 	bl	80035a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fb0f 	bl	80035b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d020      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01b      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0208 	mvn.w	r2, #8
 8002fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fd fb9c 	bl	800070c <HAL_TIM_IC_CaptureCallback>
 8002fd4:	e005      	b.n	8002fe2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fae2 	bl	80035a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fae9 	bl	80035b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d020      	beq.n	8003034 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f003 0310 	and.w	r3, r3, #16
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01b      	beq.n	8003034 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f06f 0210 	mvn.w	r2, #16
 8003004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2208      	movs	r2, #8
 800300a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7fd fb76 	bl	800070c <HAL_TIM_IC_CaptureCallback>
 8003020:	e005      	b.n	800302e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fabc 	bl	80035a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 fac3 	bl	80035b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00c      	beq.n	8003058 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b00      	cmp	r3, #0
 8003046:	d007      	beq.n	8003058 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f06f 0201 	mvn.w	r2, #1
 8003050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7fd fe82 	bl	8000d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00c      	beq.n	800307c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003068:	2b00      	cmp	r3, #0
 800306a:	d007      	beq.n	800307c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 ff18 	bl	8003eac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00c      	beq.n	80030a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800308c:	2b00      	cmp	r3, #0
 800308e:	d007      	beq.n	80030a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fa94 	bl	80035c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f003 0320 	and.w	r3, r3, #32
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00c      	beq.n	80030c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d007      	beq.n	80030c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0220 	mvn.w	r2, #32
 80030bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 feea 	bl	8003e98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030c4:	bf00      	nop
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <HAL_TIM_IC_ConfigChannel+0x1e>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e088      	b.n	80031fc <HAL_TIM_IC_ConfigChannel+0x130>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d11b      	bne.n	8003130 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003108:	f000 fc7a 	bl	8003a00 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699a      	ldr	r2, [r3, #24]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 020c 	bic.w	r2, r2, #12
 800311a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6999      	ldr	r1, [r3, #24]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	619a      	str	r2, [r3, #24]
 800312e:	e060      	b.n	80031f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b04      	cmp	r3, #4
 8003134:	d11c      	bne.n	8003170 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003146:	f000 fcf2 	bl	8003b2e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699a      	ldr	r2, [r3, #24]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003158:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6999      	ldr	r1, [r3, #24]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	021a      	lsls	r2, r3, #8
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	619a      	str	r2, [r3, #24]
 800316e:	e040      	b.n	80031f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b08      	cmp	r3, #8
 8003174:	d11b      	bne.n	80031ae <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003186:	f000 fd3f 	bl	8003c08 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69da      	ldr	r2, [r3, #28]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 020c 	bic.w	r2, r2, #12
 8003198:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	69d9      	ldr	r1, [r3, #28]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	61da      	str	r2, [r3, #28]
 80031ac:	e021      	b.n	80031f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b0c      	cmp	r3, #12
 80031b2:	d11c      	bne.n	80031ee <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80031c4:	f000 fd5c 	bl	8003c80 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	69da      	ldr	r2, [r3, #28]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80031d6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	69d9      	ldr	r1, [r3, #28]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	021a      	lsls	r2, r3, #8
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	61da      	str	r2, [r3, #28]
 80031ec:	e001      	b.n	80031f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800321e:	2302      	movs	r3, #2
 8003220:	e0ae      	b.n	8003380 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b0c      	cmp	r3, #12
 800322e:	f200 809f 	bhi.w	8003370 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003232:	a201      	add	r2, pc, #4	@ (adr r2, 8003238 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003238:	0800326d 	.word	0x0800326d
 800323c:	08003371 	.word	0x08003371
 8003240:	08003371 	.word	0x08003371
 8003244:	08003371 	.word	0x08003371
 8003248:	080032ad 	.word	0x080032ad
 800324c:	08003371 	.word	0x08003371
 8003250:	08003371 	.word	0x08003371
 8003254:	08003371 	.word	0x08003371
 8003258:	080032ef 	.word	0x080032ef
 800325c:	08003371 	.word	0x08003371
 8003260:	08003371 	.word	0x08003371
 8003264:	08003371 	.word	0x08003371
 8003268:	0800332f 	.word	0x0800332f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fa38 	bl	80036e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0208 	orr.w	r2, r2, #8
 8003286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0204 	bic.w	r2, r2, #4
 8003296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6999      	ldr	r1, [r3, #24]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	619a      	str	r2, [r3, #24]
      break;
 80032aa:	e064      	b.n	8003376 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fa7e 	bl	80037b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6999      	ldr	r1, [r3, #24]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	021a      	lsls	r2, r3, #8
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	619a      	str	r2, [r3, #24]
      break;
 80032ec:	e043      	b.n	8003376 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68b9      	ldr	r1, [r7, #8]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fac9 	bl	800388c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69da      	ldr	r2, [r3, #28]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0208 	orr.w	r2, r2, #8
 8003308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69da      	ldr	r2, [r3, #28]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0204 	bic.w	r2, r2, #4
 8003318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69d9      	ldr	r1, [r3, #28]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	61da      	str	r2, [r3, #28]
      break;
 800332c:	e023      	b.n	8003376 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68b9      	ldr	r1, [r7, #8]
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fb13 	bl	8003960 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69da      	ldr	r2, [r3, #28]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69da      	ldr	r2, [r3, #28]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69d9      	ldr	r1, [r3, #28]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	021a      	lsls	r2, r3, #8
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	61da      	str	r2, [r3, #28]
      break;
 800336e:	e002      	b.n	8003376 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	75fb      	strb	r3, [r7, #23]
      break;
 8003374:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800337e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_TIM_ConfigClockSource+0x1c>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e0b4      	b.n	800350e <HAL_TIM_ConfigClockSource+0x186>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80033c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033dc:	d03e      	beq.n	800345c <HAL_TIM_ConfigClockSource+0xd4>
 80033de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033e2:	f200 8087 	bhi.w	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
 80033e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ea:	f000 8086 	beq.w	80034fa <HAL_TIM_ConfigClockSource+0x172>
 80033ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033f2:	d87f      	bhi.n	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
 80033f4:	2b70      	cmp	r3, #112	@ 0x70
 80033f6:	d01a      	beq.n	800342e <HAL_TIM_ConfigClockSource+0xa6>
 80033f8:	2b70      	cmp	r3, #112	@ 0x70
 80033fa:	d87b      	bhi.n	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
 80033fc:	2b60      	cmp	r3, #96	@ 0x60
 80033fe:	d050      	beq.n	80034a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003400:	2b60      	cmp	r3, #96	@ 0x60
 8003402:	d877      	bhi.n	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003404:	2b50      	cmp	r3, #80	@ 0x50
 8003406:	d03c      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0xfa>
 8003408:	2b50      	cmp	r3, #80	@ 0x50
 800340a:	d873      	bhi.n	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
 800340c:	2b40      	cmp	r3, #64	@ 0x40
 800340e:	d058      	beq.n	80034c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003410:	2b40      	cmp	r3, #64	@ 0x40
 8003412:	d86f      	bhi.n	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003414:	2b30      	cmp	r3, #48	@ 0x30
 8003416:	d064      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003418:	2b30      	cmp	r3, #48	@ 0x30
 800341a:	d86b      	bhi.n	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
 800341c:	2b20      	cmp	r3, #32
 800341e:	d060      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003420:	2b20      	cmp	r3, #32
 8003422:	d867      	bhi.n	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003424:	2b00      	cmp	r3, #0
 8003426:	d05c      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003428:	2b10      	cmp	r3, #16
 800342a:	d05a      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0x15a>
 800342c:	e062      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800343e:	f000 fc77 	bl	8003d30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003450:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	609a      	str	r2, [r3, #8]
      break;
 800345a:	e04f      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800346c:	f000 fc60 	bl	8003d30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800347e:	609a      	str	r2, [r3, #8]
      break;
 8003480:	e03c      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800348e:	461a      	mov	r2, r3
 8003490:	f000 fb1e 	bl	8003ad0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2150      	movs	r1, #80	@ 0x50
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fc2d 	bl	8003cfa <TIM_ITRx_SetConfig>
      break;
 80034a0:	e02c      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ae:	461a      	mov	r2, r3
 80034b0:	f000 fb7a 	bl	8003ba8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2160      	movs	r1, #96	@ 0x60
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 fc1d 	bl	8003cfa <TIM_ITRx_SetConfig>
      break;
 80034c0:	e01c      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ce:	461a      	mov	r2, r3
 80034d0:	f000 fafe 	bl	8003ad0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2140      	movs	r1, #64	@ 0x40
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fc0d 	bl	8003cfa <TIM_ITRx_SetConfig>
      break;
 80034e0:	e00c      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4619      	mov	r1, r3
 80034ec:	4610      	mov	r0, r2
 80034ee:	f000 fc04 	bl	8003cfa <TIM_ITRx_SetConfig>
      break;
 80034f2:	e003      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
      break;
 80034f8:	e000      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800350c:	7bfb      	ldrb	r3, [r7, #15]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b0c      	cmp	r3, #12
 800352a:	d831      	bhi.n	8003590 <HAL_TIM_ReadCapturedValue+0x78>
 800352c:	a201      	add	r2, pc, #4	@ (adr r2, 8003534 <HAL_TIM_ReadCapturedValue+0x1c>)
 800352e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003532:	bf00      	nop
 8003534:	08003569 	.word	0x08003569
 8003538:	08003591 	.word	0x08003591
 800353c:	08003591 	.word	0x08003591
 8003540:	08003591 	.word	0x08003591
 8003544:	08003573 	.word	0x08003573
 8003548:	08003591 	.word	0x08003591
 800354c:	08003591 	.word	0x08003591
 8003550:	08003591 	.word	0x08003591
 8003554:	0800357d 	.word	0x0800357d
 8003558:	08003591 	.word	0x08003591
 800355c:	08003591 	.word	0x08003591
 8003560:	08003591 	.word	0x08003591
 8003564:	08003587 	.word	0x08003587
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800356e:	60fb      	str	r3, [r7, #12]

      break;
 8003570:	e00f      	b.n	8003592 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003578:	60fb      	str	r3, [r7, #12]

      break;
 800357a:	e00a      	b.n	8003592 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003582:	60fb      	str	r3, [r7, #12]

      break;
 8003584:	e005      	b.n	8003592 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358c:	60fb      	str	r3, [r7, #12]

      break;
 800358e:	e000      	b.n	8003592 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003590:	bf00      	nop
  }

  return tmpreg;
 8003592:	68fb      	ldr	r3, [r7, #12]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a37      	ldr	r2, [pc, #220]	@ (80036cc <TIM_Base_SetConfig+0xf0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00f      	beq.n	8003614 <TIM_Base_SetConfig+0x38>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035fa:	d00b      	beq.n	8003614 <TIM_Base_SetConfig+0x38>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a34      	ldr	r2, [pc, #208]	@ (80036d0 <TIM_Base_SetConfig+0xf4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d007      	beq.n	8003614 <TIM_Base_SetConfig+0x38>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a33      	ldr	r2, [pc, #204]	@ (80036d4 <TIM_Base_SetConfig+0xf8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d003      	beq.n	8003614 <TIM_Base_SetConfig+0x38>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a32      	ldr	r2, [pc, #200]	@ (80036d8 <TIM_Base_SetConfig+0xfc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d108      	bne.n	8003626 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800361a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a28      	ldr	r2, [pc, #160]	@ (80036cc <TIM_Base_SetConfig+0xf0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d01b      	beq.n	8003666 <TIM_Base_SetConfig+0x8a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003634:	d017      	beq.n	8003666 <TIM_Base_SetConfig+0x8a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a25      	ldr	r2, [pc, #148]	@ (80036d0 <TIM_Base_SetConfig+0xf4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d013      	beq.n	8003666 <TIM_Base_SetConfig+0x8a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a24      	ldr	r2, [pc, #144]	@ (80036d4 <TIM_Base_SetConfig+0xf8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00f      	beq.n	8003666 <TIM_Base_SetConfig+0x8a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a23      	ldr	r2, [pc, #140]	@ (80036d8 <TIM_Base_SetConfig+0xfc>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00b      	beq.n	8003666 <TIM_Base_SetConfig+0x8a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a22      	ldr	r2, [pc, #136]	@ (80036dc <TIM_Base_SetConfig+0x100>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d007      	beq.n	8003666 <TIM_Base_SetConfig+0x8a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a21      	ldr	r2, [pc, #132]	@ (80036e0 <TIM_Base_SetConfig+0x104>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d003      	beq.n	8003666 <TIM_Base_SetConfig+0x8a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a20      	ldr	r2, [pc, #128]	@ (80036e4 <TIM_Base_SetConfig+0x108>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d108      	bne.n	8003678 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800366c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a0c      	ldr	r2, [pc, #48]	@ (80036cc <TIM_Base_SetConfig+0xf0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d103      	bne.n	80036a6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f043 0204 	orr.w	r2, r3, #4
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	601a      	str	r2, [r3, #0]
}
 80036be:	bf00      	nop
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40010000 	.word	0x40010000
 80036d0:	40000400 	.word	0x40000400
 80036d4:	40000800 	.word	0x40000800
 80036d8:	40000c00 	.word	0x40000c00
 80036dc:	40014000 	.word	0x40014000
 80036e0:	40014400 	.word	0x40014400
 80036e4:	40014800 	.word	0x40014800

080036e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f023 0201 	bic.w	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0303 	bic.w	r3, r3, #3
 800371e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f023 0302 	bic.w	r3, r3, #2
 8003730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a1c      	ldr	r2, [pc, #112]	@ (80037b0 <TIM_OC1_SetConfig+0xc8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d10c      	bne.n	800375e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f023 0308 	bic.w	r3, r3, #8
 800374a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f023 0304 	bic.w	r3, r3, #4
 800375c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a13      	ldr	r2, [pc, #76]	@ (80037b0 <TIM_OC1_SetConfig+0xc8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d111      	bne.n	800378a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800376c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	621a      	str	r2, [r3, #32]
}
 80037a4:	bf00      	nop
 80037a6:	371c      	adds	r7, #28
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	40010000 	.word	0x40010000

080037b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	f023 0210 	bic.w	r2, r3, #16
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	021b      	lsls	r3, r3, #8
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f023 0320 	bic.w	r3, r3, #32
 80037fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a1e      	ldr	r2, [pc, #120]	@ (8003888 <TIM_OC2_SetConfig+0xd4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d10d      	bne.n	8003830 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800381a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800382e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a15      	ldr	r2, [pc, #84]	@ (8003888 <TIM_OC2_SetConfig+0xd4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d113      	bne.n	8003860 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800383e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003846:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	621a      	str	r2, [r3, #32]
}
 800387a:	bf00      	nop
 800387c:	371c      	adds	r7, #28
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	40010000 	.word	0x40010000

0800388c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0303 	bic.w	r3, r3, #3
 80038c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	021b      	lsls	r3, r3, #8
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	4313      	orrs	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a1d      	ldr	r2, [pc, #116]	@ (800395c <TIM_OC3_SetConfig+0xd0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d10d      	bne.n	8003906 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	021b      	lsls	r3, r3, #8
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a14      	ldr	r2, [pc, #80]	@ (800395c <TIM_OC3_SetConfig+0xd0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d113      	bne.n	8003936 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800391c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	621a      	str	r2, [r3, #32]
}
 8003950:	bf00      	nop
 8003952:	371c      	adds	r7, #28
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	40010000 	.word	0x40010000

08003960 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800398e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	021b      	lsls	r3, r3, #8
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	031b      	lsls	r3, r3, #12
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a10      	ldr	r2, [pc, #64]	@ (80039fc <TIM_OC4_SetConfig+0x9c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d109      	bne.n	80039d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	019b      	lsls	r3, r3, #6
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	621a      	str	r2, [r3, #32]
}
 80039ee:	bf00      	nop
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40010000 	.word	0x40010000

08003a00 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	f023 0201 	bic.w	r2, r3, #1
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4a24      	ldr	r2, [pc, #144]	@ (8003abc <TIM_TI1_SetConfig+0xbc>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d013      	beq.n	8003a56 <TIM_TI1_SetConfig+0x56>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a34:	d00f      	beq.n	8003a56 <TIM_TI1_SetConfig+0x56>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4a21      	ldr	r2, [pc, #132]	@ (8003ac0 <TIM_TI1_SetConfig+0xc0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00b      	beq.n	8003a56 <TIM_TI1_SetConfig+0x56>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4a20      	ldr	r2, [pc, #128]	@ (8003ac4 <TIM_TI1_SetConfig+0xc4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d007      	beq.n	8003a56 <TIM_TI1_SetConfig+0x56>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac8 <TIM_TI1_SetConfig+0xc8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d003      	beq.n	8003a56 <TIM_TI1_SetConfig+0x56>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4a1e      	ldr	r2, [pc, #120]	@ (8003acc <TIM_TI1_SetConfig+0xcc>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d101      	bne.n	8003a5a <TIM_TI1_SetConfig+0x5a>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <TIM_TI1_SetConfig+0x5c>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f023 0303 	bic.w	r3, r3, #3
 8003a66:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	e003      	b.n	8003a7a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f023 030a 	bic.w	r3, r3, #10
 8003a94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	f003 030a 	and.w	r3, r3, #10
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	621a      	str	r2, [r3, #32]
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40010000 	.word	0x40010000
 8003ac0:	40000400 	.word	0x40000400
 8003ac4:	40000800 	.word	0x40000800
 8003ac8:	40000c00 	.word	0x40000c00
 8003acc:	40014000 	.word	0x40014000

08003ad0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	f023 0201 	bic.w	r2, r3, #1
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f023 030a 	bic.w	r3, r3, #10
 8003b0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	621a      	str	r2, [r3, #32]
}
 8003b22:	bf00      	nop
 8003b24:	371c      	adds	r7, #28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b087      	sub	sp, #28
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	f023 0210 	bic.w	r2, r3, #16
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	031b      	lsls	r3, r3, #12
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b80:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	621a      	str	r2, [r3, #32]
}
 8003b9c:	bf00      	nop
 8003b9e:	371c      	adds	r7, #28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	f023 0210 	bic.w	r2, r3, #16
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	031b      	lsls	r3, r3, #12
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003be4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	621a      	str	r2, [r3, #32]
}
 8003bfc:	bf00      	nop
 8003bfe:	371c      	adds	r7, #28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
 8003c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f023 0303 	bic.w	r3, r3, #3
 8003c34:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c44:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003c58:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	021b      	lsls	r3, r3, #8
 8003c5e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	621a      	str	r2, [r3, #32]
}
 8003c74:	bf00      	nop
 8003c76:	371c      	adds	r7, #28
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	021b      	lsls	r3, r3, #8
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003cbe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	031b      	lsls	r3, r3, #12
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003cd2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	031b      	lsls	r3, r3, #12
 8003cd8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	621a      	str	r2, [r3, #32]
}
 8003cee:	bf00      	nop
 8003cf0:	371c      	adds	r7, #28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b085      	sub	sp, #20
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f043 0307 	orr.w	r3, r3, #7
 8003d1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	609a      	str	r2, [r3, #8]
}
 8003d24:	bf00      	nop
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	021a      	lsls	r2, r3, #8
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	609a      	str	r2, [r3, #8]
}
 8003d64:	bf00      	nop
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f003 031f 	and.w	r3, r3, #31
 8003d82:	2201      	movs	r2, #1
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a1a      	ldr	r2, [r3, #32]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	43db      	mvns	r3, r3
 8003d92:	401a      	ands	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a1a      	ldr	r2, [r3, #32]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f003 031f 	and.w	r3, r3, #31
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	fa01 f303 	lsl.w	r3, r1, r3
 8003da8:	431a      	orrs	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	621a      	str	r2, [r3, #32]
}
 8003dae:	bf00      	nop
 8003db0:	371c      	adds	r7, #28
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
	...

08003dbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e050      	b.n	8003e76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a1c      	ldr	r2, [pc, #112]	@ (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d018      	beq.n	8003e4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e20:	d013      	beq.n	8003e4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a18      	ldr	r2, [pc, #96]	@ (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d00e      	beq.n	8003e4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a16      	ldr	r2, [pc, #88]	@ (8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d009      	beq.n	8003e4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a15      	ldr	r2, [pc, #84]	@ (8003e90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d004      	beq.n	8003e4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a13      	ldr	r2, [pc, #76]	@ (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d10c      	bne.n	8003e64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40010000 	.word	0x40010000
 8003e88:	40000400 	.word	0x40000400
 8003e8c:	40000800 	.word	0x40000800
 8003e90:	40000c00 	.word	0x40000c00
 8003e94:	40014000 	.word	0x40014000

08003e98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e042      	b.n	8003f58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d106      	bne.n	8003eec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7fd fba2 	bl	8001630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2224      	movs	r2, #36	@ 0x24
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fdd3 	bl	8004ab0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695a      	ldr	r2, [r3, #20]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08a      	sub	sp, #40	@ 0x28
 8003f64:	af02      	add	r7, sp, #8
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	603b      	str	r3, [r7, #0]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b20      	cmp	r3, #32
 8003f7e:	d175      	bne.n	800406c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <HAL_UART_Transmit+0x2c>
 8003f86:	88fb      	ldrh	r3, [r7, #6]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e06e      	b.n	800406e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2221      	movs	r2, #33	@ 0x21
 8003f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f9e:	f7fd fc33 	bl	8001808 <HAL_GetTick>
 8003fa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	88fa      	ldrh	r2, [r7, #6]
 8003fa8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	88fa      	ldrh	r2, [r7, #6]
 8003fae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fb8:	d108      	bne.n	8003fcc <HAL_UART_Transmit+0x6c>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d104      	bne.n	8003fcc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	61bb      	str	r3, [r7, #24]
 8003fca:	e003      	b.n	8003fd4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fd4:	e02e      	b.n	8004034 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2180      	movs	r1, #128	@ 0x80
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 fb37 	bl	8004654 <UART_WaitOnFlagUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d005      	beq.n	8003ff8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e03a      	b.n	800406e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10b      	bne.n	8004016 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800400c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	3302      	adds	r3, #2
 8004012:	61bb      	str	r3, [r7, #24]
 8004014:	e007      	b.n	8004026 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	781a      	ldrb	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	3301      	adds	r3, #1
 8004024:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800402a:	b29b      	uxth	r3, r3
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1cb      	bne.n	8003fd6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2200      	movs	r2, #0
 8004046:	2140      	movs	r1, #64	@ 0x40
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 fb03 	bl	8004654 <UART_WaitOnFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e006      	b.n	800406e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	e000      	b.n	800406e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800406c:	2302      	movs	r3, #2
  }
}
 800406e:	4618      	mov	r0, r3
 8004070:	3720      	adds	r7, #32
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	4613      	mov	r3, r2
 8004082:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b20      	cmp	r3, #32
 800408e:	d112      	bne.n	80040b6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <HAL_UART_Receive_IT+0x26>
 8004096:	88fb      	ldrh	r3, [r7, #6]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e00b      	b.n	80040b8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80040a6:	88fb      	ldrh	r3, [r7, #6]
 80040a8:	461a      	mov	r2, r3
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 fb2a 	bl	8004706 <UART_Start_Receive_IT>
 80040b2:	4603      	mov	r3, r0
 80040b4:	e000      	b.n	80040b8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80040b6:	2302      	movs	r3, #2
  }
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b0ba      	sub	sp, #232	@ 0xe8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80040fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10f      	bne.n	8004126 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	2b00      	cmp	r3, #0
 8004110:	d009      	beq.n	8004126 <HAL_UART_IRQHandler+0x66>
 8004112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fc07 	bl	8004932 <UART_Receive_IT>
      return;
 8004124:	e273      	b.n	800460e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004126:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 80de 	beq.w	80042ec <HAL_UART_IRQHandler+0x22c>
 8004130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d106      	bne.n	800414a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800413c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004140:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80d1 	beq.w	80042ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800414a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00b      	beq.n	800416e <HAL_UART_IRQHandler+0xae>
 8004156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800415a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800415e:	2b00      	cmp	r3, #0
 8004160:	d005      	beq.n	800416e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004166:	f043 0201 	orr.w	r2, r3, #1
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800416e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00b      	beq.n	8004192 <HAL_UART_IRQHandler+0xd2>
 800417a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d005      	beq.n	8004192 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418a:	f043 0202 	orr.w	r2, r3, #2
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00b      	beq.n	80041b6 <HAL_UART_IRQHandler+0xf6>
 800419e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d005      	beq.n	80041b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ae:	f043 0204 	orr.w	r2, r3, #4
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d011      	beq.n	80041e6 <HAL_UART_IRQHandler+0x126>
 80041c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d105      	bne.n	80041da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d005      	beq.n	80041e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041de:	f043 0208 	orr.w	r2, r3, #8
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 820a 	beq.w	8004604 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_UART_IRQHandler+0x14e>
 80041fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fb92 	bl	8004932 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004218:	2b40      	cmp	r3, #64	@ 0x40
 800421a:	bf0c      	ite	eq
 800421c:	2301      	moveq	r3, #1
 800421e:	2300      	movne	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d103      	bne.n	800423a <HAL_UART_IRQHandler+0x17a>
 8004232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004236:	2b00      	cmp	r3, #0
 8004238:	d04f      	beq.n	80042da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fa9d 	bl	800477a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800424a:	2b40      	cmp	r3, #64	@ 0x40
 800424c:	d141      	bne.n	80042d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3314      	adds	r3, #20
 8004254:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004258:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800425c:	e853 3f00 	ldrex	r3, [r3]
 8004260:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004264:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004268:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800426c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3314      	adds	r3, #20
 8004276:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800427a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800427e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004282:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004286:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1d9      	bne.n	800424e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d013      	beq.n	80042ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a6:	4a8a      	ldr	r2, [pc, #552]	@ (80044d0 <HAL_UART_IRQHandler+0x410>)
 80042a8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fd fc08 	bl	8001ac4 <HAL_DMA_Abort_IT>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d016      	beq.n	80042e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80042c4:	4610      	mov	r0, r2
 80042c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c8:	e00e      	b.n	80042e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f9ac 	bl	8004628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d0:	e00a      	b.n	80042e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f9a8 	bl	8004628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d8:	e006      	b.n	80042e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f9a4 	bl	8004628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80042e6:	e18d      	b.n	8004604 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e8:	bf00      	nop
    return;
 80042ea:	e18b      	b.n	8004604 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	f040 8167 	bne.w	80045c4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80042f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042fa:	f003 0310 	and.w	r3, r3, #16
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 8160 	beq.w	80045c4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 8159 	beq.w	80045c4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004312:	2300      	movs	r3, #0
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004332:	2b40      	cmp	r3, #64	@ 0x40
 8004334:	f040 80ce 	bne.w	80044d4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004344:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 80a9 	beq.w	80044a0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004352:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004356:	429a      	cmp	r2, r3
 8004358:	f080 80a2 	bcs.w	80044a0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004362:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800436e:	f000 8088 	beq.w	8004482 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	330c      	adds	r3, #12
 8004378:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004380:	e853 3f00 	ldrex	r3, [r3]
 8004384:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004388:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800438c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004390:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	330c      	adds	r3, #12
 800439a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800439e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80043aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80043b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1d9      	bne.n	8004372 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3314      	adds	r3, #20
 80043c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043c8:	e853 3f00 	ldrex	r3, [r3]
 80043cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80043ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043d0:	f023 0301 	bic.w	r3, r3, #1
 80043d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3314      	adds	r3, #20
 80043de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80043e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80043e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80043ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80043ee:	e841 2300 	strex	r3, r2, [r1]
 80043f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80043f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1e1      	bne.n	80043be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3314      	adds	r3, #20
 8004400:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004402:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004404:	e853 3f00 	ldrex	r3, [r3]
 8004408:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800440a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800440c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004410:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3314      	adds	r3, #20
 800441a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800441e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004420:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004424:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800442c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e3      	bne.n	80043fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	330c      	adds	r3, #12
 8004446:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004450:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004452:	f023 0310 	bic.w	r3, r3, #16
 8004456:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	330c      	adds	r3, #12
 8004460:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004464:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004466:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800446a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004472:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e3      	bne.n	8004440 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447c:	4618      	mov	r0, r3
 800447e:	f7fd fab1 	bl	80019e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2202      	movs	r2, #2
 8004486:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004490:	b29b      	uxth	r3, r3
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	b29b      	uxth	r3, r3
 8004496:	4619      	mov	r1, r3
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f8cf 	bl	800463c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800449e:	e0b3      	b.n	8004608 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044a8:	429a      	cmp	r2, r3
 80044aa:	f040 80ad 	bne.w	8004608 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044b8:	f040 80a6 	bne.w	8004608 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044c6:	4619      	mov	r1, r3
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f8b7 	bl	800463c <HAL_UARTEx_RxEventCallback>
      return;
 80044ce:	e09b      	b.n	8004608 <HAL_UART_IRQHandler+0x548>
 80044d0:	08004841 	.word	0x08004841
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044dc:	b29b      	uxth	r3, r3
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 808e 	beq.w	800460c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80044f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 8089 	beq.w	800460c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	330c      	adds	r3, #12
 8004500:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800450a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800450c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004510:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	330c      	adds	r3, #12
 800451a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800451e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004520:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004524:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004526:	e841 2300 	strex	r3, r2, [r1]
 800452a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800452c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e3      	bne.n	80044fa <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3314      	adds	r3, #20
 8004538:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	e853 3f00 	ldrex	r3, [r3]
 8004540:	623b      	str	r3, [r7, #32]
   return(result);
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	f023 0301 	bic.w	r3, r3, #1
 8004548:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3314      	adds	r3, #20
 8004552:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004556:	633a      	str	r2, [r7, #48]	@ 0x30
 8004558:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800455c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800455e:	e841 2300 	strex	r3, r2, [r1]
 8004562:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1e3      	bne.n	8004532 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	330c      	adds	r3, #12
 800457e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	e853 3f00 	ldrex	r3, [r3]
 8004586:	60fb      	str	r3, [r7, #12]
   return(result);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0310 	bic.w	r3, r3, #16
 800458e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	330c      	adds	r3, #12
 8004598:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800459c:	61fa      	str	r2, [r7, #28]
 800459e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a0:	69b9      	ldr	r1, [r7, #24]
 80045a2:	69fa      	ldr	r2, [r7, #28]
 80045a4:	e841 2300 	strex	r3, r2, [r1]
 80045a8:	617b      	str	r3, [r7, #20]
   return(result);
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e3      	bne.n	8004578 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045ba:	4619      	mov	r1, r3
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f83d 	bl	800463c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045c2:	e023      	b.n	800460c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d009      	beq.n	80045e4 <HAL_UART_IRQHandler+0x524>
 80045d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f940 	bl	8004862 <UART_Transmit_IT>
    return;
 80045e2:	e014      	b.n	800460e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00e      	beq.n	800460e <HAL_UART_IRQHandler+0x54e>
 80045f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f980 	bl	8004902 <UART_EndTransmit_IT>
    return;
 8004602:	e004      	b.n	800460e <HAL_UART_IRQHandler+0x54e>
    return;
 8004604:	bf00      	nop
 8004606:	e002      	b.n	800460e <HAL_UART_IRQHandler+0x54e>
      return;
 8004608:	bf00      	nop
 800460a:	e000      	b.n	800460e <HAL_UART_IRQHandler+0x54e>
      return;
 800460c:	bf00      	nop
  }
}
 800460e:	37e8      	adds	r7, #232	@ 0xe8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	4613      	mov	r3, r2
 8004662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004664:	e03b      	b.n	80046de <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800466c:	d037      	beq.n	80046de <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800466e:	f7fd f8cb 	bl	8001808 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	6a3a      	ldr	r2, [r7, #32]
 800467a:	429a      	cmp	r2, r3
 800467c:	d302      	bcc.n	8004684 <UART_WaitOnFlagUntilTimeout+0x30>
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e03a      	b.n	80046fe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	2b00      	cmp	r3, #0
 8004694:	d023      	beq.n	80046de <UART_WaitOnFlagUntilTimeout+0x8a>
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b80      	cmp	r3, #128	@ 0x80
 800469a:	d020      	beq.n	80046de <UART_WaitOnFlagUntilTimeout+0x8a>
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b40      	cmp	r3, #64	@ 0x40
 80046a0:	d01d      	beq.n	80046de <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d116      	bne.n	80046de <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80046b0:	2300      	movs	r3, #0
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 f857 	bl	800477a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2208      	movs	r2, #8
 80046d0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e00f      	b.n	80046fe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4013      	ands	r3, r2
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	bf0c      	ite	eq
 80046ee:	2301      	moveq	r3, #1
 80046f0:	2300      	movne	r3, #0
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	461a      	mov	r2, r3
 80046f6:	79fb      	ldrb	r3, [r7, #7]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d0b4      	beq.n	8004666 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004706:	b480      	push	{r7}
 8004708:	b085      	sub	sp, #20
 800470a:	af00      	add	r7, sp, #0
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	4613      	mov	r3, r2
 8004712:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	88fa      	ldrh	r2, [r7, #6]
 800471e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	88fa      	ldrh	r2, [r7, #6]
 8004724:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2222      	movs	r2, #34	@ 0x22
 8004730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d007      	beq.n	800474c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800474a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695a      	ldr	r2, [r3, #20]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0201 	orr.w	r2, r2, #1
 800475a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0220 	orr.w	r2, r2, #32
 800476a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800477a:	b480      	push	{r7}
 800477c:	b095      	sub	sp, #84	@ 0x54
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	330c      	adds	r3, #12
 8004788:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800478c:	e853 3f00 	ldrex	r3, [r3]
 8004790:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004794:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004798:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	330c      	adds	r3, #12
 80047a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80047a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80047a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047aa:	e841 2300 	strex	r3, r2, [r1]
 80047ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1e5      	bne.n	8004782 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3314      	adds	r3, #20
 80047bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	e853 3f00 	ldrex	r3, [r3]
 80047c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	f023 0301 	bic.w	r3, r3, #1
 80047cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3314      	adds	r3, #20
 80047d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047de:	e841 2300 	strex	r3, r2, [r1]
 80047e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1e5      	bne.n	80047b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d119      	bne.n	8004826 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	330c      	adds	r3, #12
 80047f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	60bb      	str	r3, [r7, #8]
   return(result);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f023 0310 	bic.w	r3, r3, #16
 8004808:	647b      	str	r3, [r7, #68]	@ 0x44
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	330c      	adds	r3, #12
 8004810:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004812:	61ba      	str	r2, [r7, #24]
 8004814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004816:	6979      	ldr	r1, [r7, #20]
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	e841 2300 	strex	r3, r2, [r1]
 800481e:	613b      	str	r3, [r7, #16]
   return(result);
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1e5      	bne.n	80047f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2220      	movs	r2, #32
 800482a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004834:	bf00      	nop
 8004836:	3754      	adds	r7, #84	@ 0x54
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f7ff fee7 	bl	8004628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800485a:	bf00      	nop
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004862:	b480      	push	{r7}
 8004864:	b085      	sub	sp, #20
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b21      	cmp	r3, #33	@ 0x21
 8004874:	d13e      	bne.n	80048f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800487e:	d114      	bne.n	80048aa <UART_Transmit_IT+0x48>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d110      	bne.n	80048aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	461a      	mov	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800489c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	1c9a      	adds	r2, r3, #2
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	621a      	str	r2, [r3, #32]
 80048a8:	e008      	b.n	80048bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	1c59      	adds	r1, r3, #1
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6211      	str	r1, [r2, #32]
 80048b4:	781a      	ldrb	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	4619      	mov	r1, r3
 80048ca:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10f      	bne.n	80048f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	e000      	b.n	80048f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048f4:	2302      	movs	r3, #2
  }
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004918:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7ff fe76 	bl	8004614 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b08c      	sub	sp, #48	@ 0x30
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800493a:	2300      	movs	r3, #0
 800493c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800493e:	2300      	movs	r3, #0
 8004940:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b22      	cmp	r3, #34	@ 0x22
 800494c:	f040 80aa 	bne.w	8004aa4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004958:	d115      	bne.n	8004986 <UART_Receive_IT+0x54>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d111      	bne.n	8004986 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004966:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	b29b      	uxth	r3, r3
 8004970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004974:	b29a      	uxth	r2, r3
 8004976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004978:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497e:	1c9a      	adds	r2, r3, #2
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	629a      	str	r2, [r3, #40]	@ 0x28
 8004984:	e024      	b.n	80049d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004994:	d007      	beq.n	80049a6 <UART_Receive_IT+0x74>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10a      	bne.n	80049b4 <UART_Receive_IT+0x82>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b0:	701a      	strb	r2, [r3, #0]
 80049b2:	e008      	b.n	80049c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	3b01      	subs	r3, #1
 80049d8:	b29b      	uxth	r3, r3
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	4619      	mov	r1, r3
 80049de:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d15d      	bne.n	8004aa0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0220 	bic.w	r2, r2, #32
 80049f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68da      	ldr	r2, [r3, #12]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695a      	ldr	r2, [r3, #20]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0201 	bic.w	r2, r2, #1
 8004a12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d135      	bne.n	8004a96 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	330c      	adds	r3, #12
 8004a36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	e853 3f00 	ldrex	r3, [r3]
 8004a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f023 0310 	bic.w	r3, r3, #16
 8004a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	330c      	adds	r3, #12
 8004a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a50:	623a      	str	r2, [r7, #32]
 8004a52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a54:	69f9      	ldr	r1, [r7, #28]
 8004a56:	6a3a      	ldr	r2, [r7, #32]
 8004a58:	e841 2300 	strex	r3, r2, [r1]
 8004a5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e5      	bne.n	8004a30 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0310 	and.w	r3, r3, #16
 8004a6e:	2b10      	cmp	r3, #16
 8004a70:	d10a      	bne.n	8004a88 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a72:	2300      	movs	r3, #0
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7ff fdd4 	bl	800463c <HAL_UARTEx_RxEventCallback>
 8004a94:	e002      	b.n	8004a9c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7fb fdc0 	bl	800061c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	e002      	b.n	8004aa6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	e000      	b.n	8004aa6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004aa4:	2302      	movs	r3, #2
  }
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3730      	adds	r7, #48	@ 0x30
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ab4:	b0c0      	sub	sp, #256	@ 0x100
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004acc:	68d9      	ldr	r1, [r3, #12]
 8004ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	ea40 0301 	orr.w	r3, r0, r1
 8004ad8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	431a      	orrs	r2, r3
 8004af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b08:	f021 010c 	bic.w	r1, r1, #12
 8004b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b16:	430b      	orrs	r3, r1
 8004b18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b2a:	6999      	ldr	r1, [r3, #24]
 8004b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	ea40 0301 	orr.w	r3, r0, r1
 8004b36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	4b8f      	ldr	r3, [pc, #572]	@ (8004d7c <UART_SetConfig+0x2cc>)
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d005      	beq.n	8004b50 <UART_SetConfig+0xa0>
 8004b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	4b8d      	ldr	r3, [pc, #564]	@ (8004d80 <UART_SetConfig+0x2d0>)
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d104      	bne.n	8004b5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b50:	f7fd fdfc 	bl	800274c <HAL_RCC_GetPCLK2Freq>
 8004b54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b58:	e003      	b.n	8004b62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b5a:	f7fd fde3 	bl	8002724 <HAL_RCC_GetPCLK1Freq>
 8004b5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b6c:	f040 810c 	bne.w	8004d88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b74:	2200      	movs	r2, #0
 8004b76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004b7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004b82:	4622      	mov	r2, r4
 8004b84:	462b      	mov	r3, r5
 8004b86:	1891      	adds	r1, r2, r2
 8004b88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004b8a:	415b      	adcs	r3, r3
 8004b8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b92:	4621      	mov	r1, r4
 8004b94:	eb12 0801 	adds.w	r8, r2, r1
 8004b98:	4629      	mov	r1, r5
 8004b9a:	eb43 0901 	adc.w	r9, r3, r1
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	f04f 0300 	mov.w	r3, #0
 8004ba6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004baa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bb2:	4690      	mov	r8, r2
 8004bb4:	4699      	mov	r9, r3
 8004bb6:	4623      	mov	r3, r4
 8004bb8:	eb18 0303 	adds.w	r3, r8, r3
 8004bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004bc0:	462b      	mov	r3, r5
 8004bc2:	eb49 0303 	adc.w	r3, r9, r3
 8004bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004bd6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004bda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004bde:	460b      	mov	r3, r1
 8004be0:	18db      	adds	r3, r3, r3
 8004be2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004be4:	4613      	mov	r3, r2
 8004be6:	eb42 0303 	adc.w	r3, r2, r3
 8004bea:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004bf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004bf4:	f7fb fb44 	bl	8000280 <__aeabi_uldivmod>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4b61      	ldr	r3, [pc, #388]	@ (8004d84 <UART_SetConfig+0x2d4>)
 8004bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8004c02:	095b      	lsrs	r3, r3, #5
 8004c04:	011c      	lsls	r4, r3, #4
 8004c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c18:	4642      	mov	r2, r8
 8004c1a:	464b      	mov	r3, r9
 8004c1c:	1891      	adds	r1, r2, r2
 8004c1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c20:	415b      	adcs	r3, r3
 8004c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c28:	4641      	mov	r1, r8
 8004c2a:	eb12 0a01 	adds.w	sl, r2, r1
 8004c2e:	4649      	mov	r1, r9
 8004c30:	eb43 0b01 	adc.w	fp, r3, r1
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c48:	4692      	mov	sl, r2
 8004c4a:	469b      	mov	fp, r3
 8004c4c:	4643      	mov	r3, r8
 8004c4e:	eb1a 0303 	adds.w	r3, sl, r3
 8004c52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c56:	464b      	mov	r3, r9
 8004c58:	eb4b 0303 	adc.w	r3, fp, r3
 8004c5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004c70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c74:	460b      	mov	r3, r1
 8004c76:	18db      	adds	r3, r3, r3
 8004c78:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	eb42 0303 	adc.w	r3, r2, r3
 8004c80:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004c8a:	f7fb faf9 	bl	8000280 <__aeabi_uldivmod>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	4611      	mov	r1, r2
 8004c94:	4b3b      	ldr	r3, [pc, #236]	@ (8004d84 <UART_SetConfig+0x2d4>)
 8004c96:	fba3 2301 	umull	r2, r3, r3, r1
 8004c9a:	095b      	lsrs	r3, r3, #5
 8004c9c:	2264      	movs	r2, #100	@ 0x64
 8004c9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ca2:	1acb      	subs	r3, r1, r3
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004caa:	4b36      	ldr	r3, [pc, #216]	@ (8004d84 <UART_SetConfig+0x2d4>)
 8004cac:	fba3 2302 	umull	r2, r3, r3, r2
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004cb8:	441c      	add	r4, r3
 8004cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cc4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004cc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ccc:	4642      	mov	r2, r8
 8004cce:	464b      	mov	r3, r9
 8004cd0:	1891      	adds	r1, r2, r2
 8004cd2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004cd4:	415b      	adcs	r3, r3
 8004cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004cdc:	4641      	mov	r1, r8
 8004cde:	1851      	adds	r1, r2, r1
 8004ce0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ce2:	4649      	mov	r1, r9
 8004ce4:	414b      	adcs	r3, r1
 8004ce6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004cf4:	4659      	mov	r1, fp
 8004cf6:	00cb      	lsls	r3, r1, #3
 8004cf8:	4651      	mov	r1, sl
 8004cfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cfe:	4651      	mov	r1, sl
 8004d00:	00ca      	lsls	r2, r1, #3
 8004d02:	4610      	mov	r0, r2
 8004d04:	4619      	mov	r1, r3
 8004d06:	4603      	mov	r3, r0
 8004d08:	4642      	mov	r2, r8
 8004d0a:	189b      	adds	r3, r3, r2
 8004d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d10:	464b      	mov	r3, r9
 8004d12:	460a      	mov	r2, r1
 8004d14:	eb42 0303 	adc.w	r3, r2, r3
 8004d18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d30:	460b      	mov	r3, r1
 8004d32:	18db      	adds	r3, r3, r3
 8004d34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d36:	4613      	mov	r3, r2
 8004d38:	eb42 0303 	adc.w	r3, r2, r3
 8004d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004d46:	f7fb fa9b 	bl	8000280 <__aeabi_uldivmod>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d84 <UART_SetConfig+0x2d4>)
 8004d50:	fba3 1302 	umull	r1, r3, r3, r2
 8004d54:	095b      	lsrs	r3, r3, #5
 8004d56:	2164      	movs	r1, #100	@ 0x64
 8004d58:	fb01 f303 	mul.w	r3, r1, r3
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	3332      	adds	r3, #50	@ 0x32
 8004d62:	4a08      	ldr	r2, [pc, #32]	@ (8004d84 <UART_SetConfig+0x2d4>)
 8004d64:	fba2 2303 	umull	r2, r3, r2, r3
 8004d68:	095b      	lsrs	r3, r3, #5
 8004d6a:	f003 0207 	and.w	r2, r3, #7
 8004d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4422      	add	r2, r4
 8004d76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d78:	e106      	b.n	8004f88 <UART_SetConfig+0x4d8>
 8004d7a:	bf00      	nop
 8004d7c:	40011000 	.word	0x40011000
 8004d80:	40011400 	.word	0x40011400
 8004d84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004d96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004d9a:	4642      	mov	r2, r8
 8004d9c:	464b      	mov	r3, r9
 8004d9e:	1891      	adds	r1, r2, r2
 8004da0:	6239      	str	r1, [r7, #32]
 8004da2:	415b      	adcs	r3, r3
 8004da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004da6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004daa:	4641      	mov	r1, r8
 8004dac:	1854      	adds	r4, r2, r1
 8004dae:	4649      	mov	r1, r9
 8004db0:	eb43 0501 	adc.w	r5, r3, r1
 8004db4:	f04f 0200 	mov.w	r2, #0
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	00eb      	lsls	r3, r5, #3
 8004dbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dc2:	00e2      	lsls	r2, r4, #3
 8004dc4:	4614      	mov	r4, r2
 8004dc6:	461d      	mov	r5, r3
 8004dc8:	4643      	mov	r3, r8
 8004dca:	18e3      	adds	r3, r4, r3
 8004dcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004dd0:	464b      	mov	r3, r9
 8004dd2:	eb45 0303 	adc.w	r3, r5, r3
 8004dd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004de6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	f04f 0300 	mov.w	r3, #0
 8004df2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004df6:	4629      	mov	r1, r5
 8004df8:	008b      	lsls	r3, r1, #2
 8004dfa:	4621      	mov	r1, r4
 8004dfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e00:	4621      	mov	r1, r4
 8004e02:	008a      	lsls	r2, r1, #2
 8004e04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e08:	f7fb fa3a 	bl	8000280 <__aeabi_uldivmod>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4b60      	ldr	r3, [pc, #384]	@ (8004f94 <UART_SetConfig+0x4e4>)
 8004e12:	fba3 2302 	umull	r2, r3, r3, r2
 8004e16:	095b      	lsrs	r3, r3, #5
 8004e18:	011c      	lsls	r4, r3, #4
 8004e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e2c:	4642      	mov	r2, r8
 8004e2e:	464b      	mov	r3, r9
 8004e30:	1891      	adds	r1, r2, r2
 8004e32:	61b9      	str	r1, [r7, #24]
 8004e34:	415b      	adcs	r3, r3
 8004e36:	61fb      	str	r3, [r7, #28]
 8004e38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e3c:	4641      	mov	r1, r8
 8004e3e:	1851      	adds	r1, r2, r1
 8004e40:	6139      	str	r1, [r7, #16]
 8004e42:	4649      	mov	r1, r9
 8004e44:	414b      	adcs	r3, r1
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	f04f 0300 	mov.w	r3, #0
 8004e50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e54:	4659      	mov	r1, fp
 8004e56:	00cb      	lsls	r3, r1, #3
 8004e58:	4651      	mov	r1, sl
 8004e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e5e:	4651      	mov	r1, sl
 8004e60:	00ca      	lsls	r2, r1, #3
 8004e62:	4610      	mov	r0, r2
 8004e64:	4619      	mov	r1, r3
 8004e66:	4603      	mov	r3, r0
 8004e68:	4642      	mov	r2, r8
 8004e6a:	189b      	adds	r3, r3, r2
 8004e6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e70:	464b      	mov	r3, r9
 8004e72:	460a      	mov	r2, r1
 8004e74:	eb42 0303 	adc.w	r3, r2, r3
 8004e78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004e94:	4649      	mov	r1, r9
 8004e96:	008b      	lsls	r3, r1, #2
 8004e98:	4641      	mov	r1, r8
 8004e9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e9e:	4641      	mov	r1, r8
 8004ea0:	008a      	lsls	r2, r1, #2
 8004ea2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004ea6:	f7fb f9eb 	bl	8000280 <__aeabi_uldivmod>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	4611      	mov	r1, r2
 8004eb0:	4b38      	ldr	r3, [pc, #224]	@ (8004f94 <UART_SetConfig+0x4e4>)
 8004eb2:	fba3 2301 	umull	r2, r3, r3, r1
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	2264      	movs	r2, #100	@ 0x64
 8004eba:	fb02 f303 	mul.w	r3, r2, r3
 8004ebe:	1acb      	subs	r3, r1, r3
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	3332      	adds	r3, #50	@ 0x32
 8004ec4:	4a33      	ldr	r2, [pc, #204]	@ (8004f94 <UART_SetConfig+0x4e4>)
 8004ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ed0:	441c      	add	r4, r3
 8004ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004eda:	677a      	str	r2, [r7, #116]	@ 0x74
 8004edc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004ee0:	4642      	mov	r2, r8
 8004ee2:	464b      	mov	r3, r9
 8004ee4:	1891      	adds	r1, r2, r2
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	415b      	adcs	r3, r3
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ef0:	4641      	mov	r1, r8
 8004ef2:	1851      	adds	r1, r2, r1
 8004ef4:	6039      	str	r1, [r7, #0]
 8004ef6:	4649      	mov	r1, r9
 8004ef8:	414b      	adcs	r3, r1
 8004efa:	607b      	str	r3, [r7, #4]
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f08:	4659      	mov	r1, fp
 8004f0a:	00cb      	lsls	r3, r1, #3
 8004f0c:	4651      	mov	r1, sl
 8004f0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f12:	4651      	mov	r1, sl
 8004f14:	00ca      	lsls	r2, r1, #3
 8004f16:	4610      	mov	r0, r2
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	4642      	mov	r2, r8
 8004f1e:	189b      	adds	r3, r3, r2
 8004f20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f22:	464b      	mov	r3, r9
 8004f24:	460a      	mov	r2, r1
 8004f26:	eb42 0303 	adc.w	r3, r2, r3
 8004f2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f36:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004f44:	4649      	mov	r1, r9
 8004f46:	008b      	lsls	r3, r1, #2
 8004f48:	4641      	mov	r1, r8
 8004f4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f4e:	4641      	mov	r1, r8
 8004f50:	008a      	lsls	r2, r1, #2
 8004f52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f56:	f7fb f993 	bl	8000280 <__aeabi_uldivmod>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f94 <UART_SetConfig+0x4e4>)
 8004f60:	fba3 1302 	umull	r1, r3, r3, r2
 8004f64:	095b      	lsrs	r3, r3, #5
 8004f66:	2164      	movs	r1, #100	@ 0x64
 8004f68:	fb01 f303 	mul.w	r3, r1, r3
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	011b      	lsls	r3, r3, #4
 8004f70:	3332      	adds	r3, #50	@ 0x32
 8004f72:	4a08      	ldr	r2, [pc, #32]	@ (8004f94 <UART_SetConfig+0x4e4>)
 8004f74:	fba2 2303 	umull	r2, r3, r2, r3
 8004f78:	095b      	lsrs	r3, r3, #5
 8004f7a:	f003 020f 	and.w	r2, r3, #15
 8004f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4422      	add	r2, r4
 8004f86:	609a      	str	r2, [r3, #8]
}
 8004f88:	bf00      	nop
 8004f8a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f94:	51eb851f 	.word	0x51eb851f

08004f98 <__NVIC_SetPriority>:
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	6039      	str	r1, [r7, #0]
 8004fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	db0a      	blt.n	8004fc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	490c      	ldr	r1, [pc, #48]	@ (8004fe4 <__NVIC_SetPriority+0x4c>)
 8004fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb6:	0112      	lsls	r2, r2, #4
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	440b      	add	r3, r1
 8004fbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004fc0:	e00a      	b.n	8004fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	4908      	ldr	r1, [pc, #32]	@ (8004fe8 <__NVIC_SetPriority+0x50>)
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	3b04      	subs	r3, #4
 8004fd0:	0112      	lsls	r2, r2, #4
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	761a      	strb	r2, [r3, #24]
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	e000e100 	.word	0xe000e100
 8004fe8:	e000ed00 	.word	0xe000ed00

08004fec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004ff0:	4b05      	ldr	r3, [pc, #20]	@ (8005008 <SysTick_Handler+0x1c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004ff4:	f001 fd46 	bl	8006a84 <xTaskGetSchedulerState>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d001      	beq.n	8005002 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004ffe:	f002 fb3b 	bl	8007678 <xPortSysTickHandler>
  }
}
 8005002:	bf00      	nop
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	e000e010 	.word	0xe000e010

0800500c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005010:	2100      	movs	r1, #0
 8005012:	f06f 0004 	mvn.w	r0, #4
 8005016:	f7ff ffbf 	bl	8004f98 <__NVIC_SetPriority>
#endif
}
 800501a:	bf00      	nop
 800501c:	bd80      	pop	{r7, pc}
	...

08005020 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005026:	f3ef 8305 	mrs	r3, IPSR
 800502a:	603b      	str	r3, [r7, #0]
  return(result);
 800502c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005032:	f06f 0305 	mvn.w	r3, #5
 8005036:	607b      	str	r3, [r7, #4]
 8005038:	e00c      	b.n	8005054 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800503a:	4b0a      	ldr	r3, [pc, #40]	@ (8005064 <osKernelInitialize+0x44>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d105      	bne.n	800504e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005042:	4b08      	ldr	r3, [pc, #32]	@ (8005064 <osKernelInitialize+0x44>)
 8005044:	2201      	movs	r2, #1
 8005046:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005048:	2300      	movs	r3, #0
 800504a:	607b      	str	r3, [r7, #4]
 800504c:	e002      	b.n	8005054 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800504e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005052:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005054:	687b      	ldr	r3, [r7, #4]
}
 8005056:	4618      	mov	r0, r3
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	20000268 	.word	0x20000268

08005068 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800506e:	f3ef 8305 	mrs	r3, IPSR
 8005072:	603b      	str	r3, [r7, #0]
  return(result);
 8005074:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <osKernelStart+0x1a>
    stat = osErrorISR;
 800507a:	f06f 0305 	mvn.w	r3, #5
 800507e:	607b      	str	r3, [r7, #4]
 8005080:	e010      	b.n	80050a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005082:	4b0b      	ldr	r3, [pc, #44]	@ (80050b0 <osKernelStart+0x48>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d109      	bne.n	800509e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800508a:	f7ff ffbf 	bl	800500c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800508e:	4b08      	ldr	r3, [pc, #32]	@ (80050b0 <osKernelStart+0x48>)
 8005090:	2202      	movs	r2, #2
 8005092:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005094:	f001 f892 	bl	80061bc <vTaskStartScheduler>
      stat = osOK;
 8005098:	2300      	movs	r3, #0
 800509a:	607b      	str	r3, [r7, #4]
 800509c:	e002      	b.n	80050a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800509e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050a4:	687b      	ldr	r3, [r7, #4]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	20000268 	.word	0x20000268

080050b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08e      	sub	sp, #56	@ 0x38
 80050b8:	af04      	add	r7, sp, #16
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050c4:	f3ef 8305 	mrs	r3, IPSR
 80050c8:	617b      	str	r3, [r7, #20]
  return(result);
 80050ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d17e      	bne.n	80051ce <osThreadNew+0x11a>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d07b      	beq.n	80051ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80050d6:	2380      	movs	r3, #128	@ 0x80
 80050d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80050da:	2318      	movs	r3, #24
 80050dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80050de:	2300      	movs	r3, #0
 80050e0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80050e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d045      	beq.n	800517a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <osThreadNew+0x48>
        name = attr->name;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d008      	beq.n	8005122 <osThreadNew+0x6e>
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	2b38      	cmp	r3, #56	@ 0x38
 8005114:	d805      	bhi.n	8005122 <osThreadNew+0x6e>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <osThreadNew+0x72>
        return (NULL);
 8005122:	2300      	movs	r3, #0
 8005124:	e054      	b.n	80051d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	089b      	lsrs	r3, r3, #2
 8005134:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00e      	beq.n	800515c <osThreadNew+0xa8>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	2ba7      	cmp	r3, #167	@ 0xa7
 8005144:	d90a      	bls.n	800515c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800514a:	2b00      	cmp	r3, #0
 800514c:	d006      	beq.n	800515c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <osThreadNew+0xa8>
        mem = 1;
 8005156:	2301      	movs	r3, #1
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	e010      	b.n	800517e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10c      	bne.n	800517e <osThreadNew+0xca>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d108      	bne.n	800517e <osThreadNew+0xca>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d104      	bne.n	800517e <osThreadNew+0xca>
          mem = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	61bb      	str	r3, [r7, #24]
 8005178:	e001      	b.n	800517e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800517a:	2300      	movs	r3, #0
 800517c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d110      	bne.n	80051a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800518c:	9202      	str	r2, [sp, #8]
 800518e:	9301      	str	r3, [sp, #4]
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	6a3a      	ldr	r2, [r7, #32]
 8005198:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 fe1a 	bl	8005dd4 <xTaskCreateStatic>
 80051a0:	4603      	mov	r3, r0
 80051a2:	613b      	str	r3, [r7, #16]
 80051a4:	e013      	b.n	80051ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d110      	bne.n	80051ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	f107 0310 	add.w	r3, r7, #16
 80051b4:	9301      	str	r3, [sp, #4]
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 fe68 	bl	8005e94 <xTaskCreate>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d001      	beq.n	80051ce <osThreadNew+0x11a>
            hTask = NULL;
 80051ca:	2300      	movs	r3, #0
 80051cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80051ce:	693b      	ldr	r3, [r7, #16]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3728      	adds	r7, #40	@ 0x28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051e0:	f3ef 8305 	mrs	r3, IPSR
 80051e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80051e6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <osDelay+0x1c>
    stat = osErrorISR;
 80051ec:	f06f 0305 	mvn.w	r3, #5
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	e007      	b.n	8005204 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80051f4:	2300      	movs	r3, #0
 80051f6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <osDelay+0x2c>
      vTaskDelay(ticks);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 ffa6 	bl	8006150 <vTaskDelay>
    }
  }

  return (stat);
 8005204:	68fb      	ldr	r3, [r7, #12]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
	...

08005210 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4a07      	ldr	r2, [pc, #28]	@ (800523c <vApplicationGetIdleTaskMemory+0x2c>)
 8005220:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	4a06      	ldr	r2, [pc, #24]	@ (8005240 <vApplicationGetIdleTaskMemory+0x30>)
 8005226:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2280      	movs	r2, #128	@ 0x80
 800522c:	601a      	str	r2, [r3, #0]
}
 800522e:	bf00      	nop
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	2000026c 	.word	0x2000026c
 8005240:	20000314 	.word	0x20000314

08005244 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4a07      	ldr	r2, [pc, #28]	@ (8005270 <vApplicationGetTimerTaskMemory+0x2c>)
 8005254:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	4a06      	ldr	r2, [pc, #24]	@ (8005274 <vApplicationGetTimerTaskMemory+0x30>)
 800525a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005262:	601a      	str	r2, [r3, #0]
}
 8005264:	bf00      	nop
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	20000514 	.word	0x20000514
 8005274:	200005bc 	.word	0x200005bc

08005278 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f103 0208 	add.w	r2, r3, #8
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005290:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f103 0208 	add.w	r2, r3, #8
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f103 0208 	add.w	r2, r3, #8
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	601a      	str	r2, [r3, #0]
}
 800530e:	bf00      	nop
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800531a:	b480      	push	{r7}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005330:	d103      	bne.n	800533a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	e00c      	b.n	8005354 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3308      	adds	r3, #8
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	e002      	b.n	8005348 <vListInsert+0x2e>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	429a      	cmp	r2, r3
 8005352:	d2f6      	bcs.n	8005342 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	601a      	str	r2, [r3, #0]
}
 8005380:	bf00      	nop
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	6892      	ldr	r2, [r2, #8]
 80053a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6852      	ldr	r2, [r2, #4]
 80053ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d103      	bne.n	80053c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	1e5a      	subs	r2, r3, #1
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10b      	bne.n	800540c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005406:	bf00      	nop
 8005408:	bf00      	nop
 800540a:	e7fd      	b.n	8005408 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800540c:	f002 f8a4 	bl	8007558 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005418:	68f9      	ldr	r1, [r7, #12]
 800541a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800541c:	fb01 f303 	mul.w	r3, r1, r3
 8005420:	441a      	add	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800543c:	3b01      	subs	r3, #1
 800543e:	68f9      	ldr	r1, [r7, #12]
 8005440:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005442:	fb01 f303 	mul.w	r3, r1, r3
 8005446:	441a      	add	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	22ff      	movs	r2, #255	@ 0xff
 8005450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	22ff      	movs	r2, #255	@ 0xff
 8005458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d114      	bne.n	800548c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d01a      	beq.n	80054a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3310      	adds	r3, #16
 800546e:	4618      	mov	r0, r3
 8005470:	f001 f942 	bl	80066f8 <xTaskRemoveFromEventList>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d012      	beq.n	80054a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800547a:	4b0d      	ldr	r3, [pc, #52]	@ (80054b0 <xQueueGenericReset+0xd0>)
 800547c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	e009      	b.n	80054a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	3310      	adds	r3, #16
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff fef1 	bl	8005278 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	3324      	adds	r3, #36	@ 0x24
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff feec 	bl	8005278 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80054a0:	f002 f88c 	bl	80075bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80054a4:	2301      	movs	r3, #1
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	e000ed04 	.word	0xe000ed04

080054b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b08e      	sub	sp, #56	@ 0x38
 80054b8:	af02      	add	r7, sp, #8
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10b      	bne.n	80054e0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80054c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054cc:	f383 8811 	msr	BASEPRI, r3
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80054da:	bf00      	nop
 80054dc:	bf00      	nop
 80054de:	e7fd      	b.n	80054dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10b      	bne.n	80054fe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80054f8:	bf00      	nop
 80054fa:	bf00      	nop
 80054fc:	e7fd      	b.n	80054fa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <xQueueGenericCreateStatic+0x56>
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <xQueueGenericCreateStatic+0x5a>
 800550a:	2301      	movs	r3, #1
 800550c:	e000      	b.n	8005510 <xQueueGenericCreateStatic+0x5c>
 800550e:	2300      	movs	r3, #0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10b      	bne.n	800552c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	623b      	str	r3, [r7, #32]
}
 8005526:	bf00      	nop
 8005528:	bf00      	nop
 800552a:	e7fd      	b.n	8005528 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d102      	bne.n	8005538 <xQueueGenericCreateStatic+0x84>
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <xQueueGenericCreateStatic+0x88>
 8005538:	2301      	movs	r3, #1
 800553a:	e000      	b.n	800553e <xQueueGenericCreateStatic+0x8a>
 800553c:	2300      	movs	r3, #0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10b      	bne.n	800555a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005546:	f383 8811 	msr	BASEPRI, r3
 800554a:	f3bf 8f6f 	isb	sy
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	61fb      	str	r3, [r7, #28]
}
 8005554:	bf00      	nop
 8005556:	bf00      	nop
 8005558:	e7fd      	b.n	8005556 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800555a:	2350      	movs	r3, #80	@ 0x50
 800555c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2b50      	cmp	r3, #80	@ 0x50
 8005562:	d00b      	beq.n	800557c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	61bb      	str	r3, [r7, #24]
}
 8005576:	bf00      	nop
 8005578:	bf00      	nop
 800557a:	e7fd      	b.n	8005578 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800557c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00d      	beq.n	80055a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005590:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	4613      	mov	r3, r2
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 f805 	bl	80055ae <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3730      	adds	r7, #48	@ 0x30
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b084      	sub	sp, #16
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	607a      	str	r2, [r7, #4]
 80055ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d103      	bne.n	80055ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	601a      	str	r2, [r3, #0]
 80055c8:	e002      	b.n	80055d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055dc:	2101      	movs	r1, #1
 80055de:	69b8      	ldr	r0, [r7, #24]
 80055e0:	f7ff fefe 	bl	80053e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	78fa      	ldrb	r2, [r7, #3]
 80055e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80055ec:	bf00      	nop
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08e      	sub	sp, #56	@ 0x38
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
 8005600:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005602:	2300      	movs	r3, #0
 8005604:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800560a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10b      	bne.n	8005628 <xQueueGenericSend+0x34>
	__asm volatile
 8005610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005622:	bf00      	nop
 8005624:	bf00      	nop
 8005626:	e7fd      	b.n	8005624 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d103      	bne.n	8005636 <xQueueGenericSend+0x42>
 800562e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <xQueueGenericSend+0x46>
 8005636:	2301      	movs	r3, #1
 8005638:	e000      	b.n	800563c <xQueueGenericSend+0x48>
 800563a:	2300      	movs	r3, #0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10b      	bne.n	8005658 <xQueueGenericSend+0x64>
	__asm volatile
 8005640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005652:	bf00      	nop
 8005654:	bf00      	nop
 8005656:	e7fd      	b.n	8005654 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2b02      	cmp	r3, #2
 800565c:	d103      	bne.n	8005666 <xQueueGenericSend+0x72>
 800565e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005662:	2b01      	cmp	r3, #1
 8005664:	d101      	bne.n	800566a <xQueueGenericSend+0x76>
 8005666:	2301      	movs	r3, #1
 8005668:	e000      	b.n	800566c <xQueueGenericSend+0x78>
 800566a:	2300      	movs	r3, #0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10b      	bne.n	8005688 <xQueueGenericSend+0x94>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	623b      	str	r3, [r7, #32]
}
 8005682:	bf00      	nop
 8005684:	bf00      	nop
 8005686:	e7fd      	b.n	8005684 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005688:	f001 f9fc 	bl	8006a84 <xTaskGetSchedulerState>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d102      	bne.n	8005698 <xQueueGenericSend+0xa4>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <xQueueGenericSend+0xa8>
 8005698:	2301      	movs	r3, #1
 800569a:	e000      	b.n	800569e <xQueueGenericSend+0xaa>
 800569c:	2300      	movs	r3, #0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10b      	bne.n	80056ba <xQueueGenericSend+0xc6>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	61fb      	str	r3, [r7, #28]
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop
 80056b8:	e7fd      	b.n	80056b6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056ba:	f001 ff4d 	bl	8007558 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d302      	bcc.n	80056d0 <xQueueGenericSend+0xdc>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d129      	bne.n	8005724 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	68b9      	ldr	r1, [r7, #8]
 80056d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056d6:	f000 fa0f 	bl	8005af8 <prvCopyDataToQueue>
 80056da:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d010      	beq.n	8005706 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e6:	3324      	adds	r3, #36	@ 0x24
 80056e8:	4618      	mov	r0, r3
 80056ea:	f001 f805 	bl	80066f8 <xTaskRemoveFromEventList>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d013      	beq.n	800571c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80056f4:	4b3f      	ldr	r3, [pc, #252]	@ (80057f4 <xQueueGenericSend+0x200>)
 80056f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	e00a      	b.n	800571c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005708:	2b00      	cmp	r3, #0
 800570a:	d007      	beq.n	800571c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800570c:	4b39      	ldr	r3, [pc, #228]	@ (80057f4 <xQueueGenericSend+0x200>)
 800570e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800571c:	f001 ff4e 	bl	80075bc <vPortExitCritical>
				return pdPASS;
 8005720:	2301      	movs	r3, #1
 8005722:	e063      	b.n	80057ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d103      	bne.n	8005732 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800572a:	f001 ff47 	bl	80075bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800572e:	2300      	movs	r3, #0
 8005730:	e05c      	b.n	80057ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005734:	2b00      	cmp	r3, #0
 8005736:	d106      	bne.n	8005746 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005738:	f107 0314 	add.w	r3, r7, #20
 800573c:	4618      	mov	r0, r3
 800573e:	f001 f83f 	bl	80067c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005742:	2301      	movs	r3, #1
 8005744:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005746:	f001 ff39 	bl	80075bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800574a:	f000 fda7 	bl	800629c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800574e:	f001 ff03 	bl	8007558 <vPortEnterCritical>
 8005752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005754:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005758:	b25b      	sxtb	r3, r3
 800575a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800575e:	d103      	bne.n	8005768 <xQueueGenericSend+0x174>
 8005760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800576e:	b25b      	sxtb	r3, r3
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005774:	d103      	bne.n	800577e <xQueueGenericSend+0x18a>
 8005776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800577e:	f001 ff1d 	bl	80075bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005782:	1d3a      	adds	r2, r7, #4
 8005784:	f107 0314 	add.w	r3, r7, #20
 8005788:	4611      	mov	r1, r2
 800578a:	4618      	mov	r0, r3
 800578c:	f001 f82e 	bl	80067ec <xTaskCheckForTimeOut>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d124      	bne.n	80057e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005796:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005798:	f000 faa6 	bl	8005ce8 <prvIsQueueFull>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d018      	beq.n	80057d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a4:	3310      	adds	r3, #16
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	4611      	mov	r1, r2
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 ff52 	bl	8006654 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057b2:	f000 fa31 	bl	8005c18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057b6:	f000 fd7f 	bl	80062b8 <xTaskResumeAll>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f47f af7c 	bne.w	80056ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80057c2:	4b0c      	ldr	r3, [pc, #48]	@ (80057f4 <xQueueGenericSend+0x200>)
 80057c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	e772      	b.n	80056ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057d6:	f000 fa1f 	bl	8005c18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057da:	f000 fd6d 	bl	80062b8 <xTaskResumeAll>
 80057de:	e76c      	b.n	80056ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80057e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057e2:	f000 fa19 	bl	8005c18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057e6:	f000 fd67 	bl	80062b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80057ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3738      	adds	r7, #56	@ 0x38
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	e000ed04 	.word	0xe000ed04

080057f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b090      	sub	sp, #64	@ 0x40
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800580a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10b      	bne.n	8005828 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005822:	bf00      	nop
 8005824:	bf00      	nop
 8005826:	e7fd      	b.n	8005824 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d103      	bne.n	8005836 <xQueueGenericSendFromISR+0x3e>
 800582e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <xQueueGenericSendFromISR+0x42>
 8005836:	2301      	movs	r3, #1
 8005838:	e000      	b.n	800583c <xQueueGenericSendFromISR+0x44>
 800583a:	2300      	movs	r3, #0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10b      	bne.n	8005858 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005852:	bf00      	nop
 8005854:	bf00      	nop
 8005856:	e7fd      	b.n	8005854 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2b02      	cmp	r3, #2
 800585c:	d103      	bne.n	8005866 <xQueueGenericSendFromISR+0x6e>
 800585e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005862:	2b01      	cmp	r3, #1
 8005864:	d101      	bne.n	800586a <xQueueGenericSendFromISR+0x72>
 8005866:	2301      	movs	r3, #1
 8005868:	e000      	b.n	800586c <xQueueGenericSendFromISR+0x74>
 800586a:	2300      	movs	r3, #0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10b      	bne.n	8005888 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	623b      	str	r3, [r7, #32]
}
 8005882:	bf00      	nop
 8005884:	bf00      	nop
 8005886:	e7fd      	b.n	8005884 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005888:	f001 ff46 	bl	8007718 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800588c:	f3ef 8211 	mrs	r2, BASEPRI
 8005890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	61fa      	str	r2, [r7, #28]
 80058a2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058a4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058a6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d302      	bcc.n	80058ba <xQueueGenericSendFromISR+0xc2>
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d12f      	bne.n	800591a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	68b9      	ldr	r1, [r7, #8]
 80058ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80058d0:	f000 f912 	bl	8005af8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80058d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058dc:	d112      	bne.n	8005904 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d016      	beq.n	8005914 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e8:	3324      	adds	r3, #36	@ 0x24
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 ff04 	bl	80066f8 <xTaskRemoveFromEventList>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00e      	beq.n	8005914 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00b      	beq.n	8005914 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	e007      	b.n	8005914 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005904:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005908:	3301      	adds	r3, #1
 800590a:	b2db      	uxtb	r3, r3
 800590c:	b25a      	sxtb	r2, r3
 800590e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005910:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005914:	2301      	movs	r3, #1
 8005916:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005918:	e001      	b.n	800591e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800591a:	2300      	movs	r3, #0
 800591c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800591e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005920:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005928:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800592a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800592c:	4618      	mov	r0, r3
 800592e:	3740      	adds	r7, #64	@ 0x40
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b08c      	sub	sp, #48	@ 0x30
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005940:	2300      	movs	r3, #0
 8005942:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10b      	bne.n	8005966 <xQueueReceive+0x32>
	__asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	623b      	str	r3, [r7, #32]
}
 8005960:	bf00      	nop
 8005962:	bf00      	nop
 8005964:	e7fd      	b.n	8005962 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d103      	bne.n	8005974 <xQueueReceive+0x40>
 800596c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <xQueueReceive+0x44>
 8005974:	2301      	movs	r3, #1
 8005976:	e000      	b.n	800597a <xQueueReceive+0x46>
 8005978:	2300      	movs	r3, #0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10b      	bne.n	8005996 <xQueueReceive+0x62>
	__asm volatile
 800597e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	61fb      	str	r3, [r7, #28]
}
 8005990:	bf00      	nop
 8005992:	bf00      	nop
 8005994:	e7fd      	b.n	8005992 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005996:	f001 f875 	bl	8006a84 <xTaskGetSchedulerState>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d102      	bne.n	80059a6 <xQueueReceive+0x72>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <xQueueReceive+0x76>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <xQueueReceive+0x78>
 80059aa:	2300      	movs	r3, #0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10b      	bne.n	80059c8 <xQueueReceive+0x94>
	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	61bb      	str	r3, [r7, #24]
}
 80059c2:	bf00      	nop
 80059c4:	bf00      	nop
 80059c6:	e7fd      	b.n	80059c4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059c8:	f001 fdc6 	bl	8007558 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d01f      	beq.n	8005a18 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059d8:	68b9      	ldr	r1, [r7, #8]
 80059da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059dc:	f000 f8f6 	bl	8005bcc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e2:	1e5a      	subs	r2, r3, #1
 80059e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00f      	beq.n	8005a10 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f2:	3310      	adds	r3, #16
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 fe7f 	bl	80066f8 <xTaskRemoveFromEventList>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d007      	beq.n	8005a10 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a00:	4b3c      	ldr	r3, [pc, #240]	@ (8005af4 <xQueueReceive+0x1c0>)
 8005a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a10:	f001 fdd4 	bl	80075bc <vPortExitCritical>
				return pdPASS;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e069      	b.n	8005aec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d103      	bne.n	8005a26 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a1e:	f001 fdcd 	bl	80075bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a22:	2300      	movs	r3, #0
 8005a24:	e062      	b.n	8005aec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d106      	bne.n	8005a3a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a2c:	f107 0310 	add.w	r3, r7, #16
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fec5 	bl	80067c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a36:	2301      	movs	r3, #1
 8005a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a3a:	f001 fdbf 	bl	80075bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a3e:	f000 fc2d 	bl	800629c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a42:	f001 fd89 	bl	8007558 <vPortEnterCritical>
 8005a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a4c:	b25b      	sxtb	r3, r3
 8005a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a52:	d103      	bne.n	8005a5c <xQueueReceive+0x128>
 8005a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a62:	b25b      	sxtb	r3, r3
 8005a64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a68:	d103      	bne.n	8005a72 <xQueueReceive+0x13e>
 8005a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a72:	f001 fda3 	bl	80075bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a76:	1d3a      	adds	r2, r7, #4
 8005a78:	f107 0310 	add.w	r3, r7, #16
 8005a7c:	4611      	mov	r1, r2
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 feb4 	bl	80067ec <xTaskCheckForTimeOut>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d123      	bne.n	8005ad2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a8c:	f000 f916 	bl	8005cbc <prvIsQueueEmpty>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d017      	beq.n	8005ac6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a98:	3324      	adds	r3, #36	@ 0x24
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 fdd8 	bl	8006654 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005aa4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005aa6:	f000 f8b7 	bl	8005c18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005aaa:	f000 fc05 	bl	80062b8 <xTaskResumeAll>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d189      	bne.n	80059c8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8005af4 <xQueueReceive+0x1c0>)
 8005ab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	f3bf 8f6f 	isb	sy
 8005ac4:	e780      	b.n	80059c8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ac6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ac8:	f000 f8a6 	bl	8005c18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005acc:	f000 fbf4 	bl	80062b8 <xTaskResumeAll>
 8005ad0:	e77a      	b.n	80059c8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ad2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ad4:	f000 f8a0 	bl	8005c18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ad8:	f000 fbee 	bl	80062b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005adc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ade:	f000 f8ed 	bl	8005cbc <prvIsQueueEmpty>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f43f af6f 	beq.w	80059c8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005aea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3730      	adds	r7, #48	@ 0x30
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	e000ed04 	.word	0xe000ed04

08005af8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b04:	2300      	movs	r3, #0
 8005b06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10d      	bne.n	8005b32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d14d      	bne.n	8005bba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 ffcc 	bl	8006ac0 <xTaskPriorityDisinherit>
 8005b28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	609a      	str	r2, [r3, #8]
 8005b30:	e043      	b.n	8005bba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d119      	bne.n	8005b6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6858      	ldr	r0, [r3, #4]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b40:	461a      	mov	r2, r3
 8005b42:	68b9      	ldr	r1, [r7, #8]
 8005b44:	f002 fa09 	bl	8007f5a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b50:	441a      	add	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d32b      	bcc.n	8005bba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	605a      	str	r2, [r3, #4]
 8005b6a:	e026      	b.n	8005bba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	68d8      	ldr	r0, [r3, #12]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b74:	461a      	mov	r2, r3
 8005b76:	68b9      	ldr	r1, [r7, #8]
 8005b78:	f002 f9ef 	bl	8007f5a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b84:	425b      	negs	r3, r3
 8005b86:	441a      	add	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d207      	bcs.n	8005ba8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	689a      	ldr	r2, [r3, #8]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba0:	425b      	negs	r3, r3
 8005ba2:	441a      	add	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d105      	bne.n	8005bba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d002      	beq.n	8005bba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005bc2:	697b      	ldr	r3, [r7, #20]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3718      	adds	r7, #24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d018      	beq.n	8005c10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be6:	441a      	add	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68da      	ldr	r2, [r3, #12]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d303      	bcc.n	8005c00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68d9      	ldr	r1, [r3, #12]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c08:	461a      	mov	r2, r3
 8005c0a:	6838      	ldr	r0, [r7, #0]
 8005c0c:	f002 f9a5 	bl	8007f5a <memcpy>
	}
}
 8005c10:	bf00      	nop
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c20:	f001 fc9a 	bl	8007558 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c2c:	e011      	b.n	8005c52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d012      	beq.n	8005c5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	3324      	adds	r3, #36	@ 0x24
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 fd5c 	bl	80066f8 <xTaskRemoveFromEventList>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c46:	f000 fe35 	bl	80068b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c4a:	7bfb      	ldrb	r3, [r7, #15]
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	dce9      	bgt.n	8005c2e <prvUnlockQueue+0x16>
 8005c5a:	e000      	b.n	8005c5e <prvUnlockQueue+0x46>
					break;
 8005c5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	22ff      	movs	r2, #255	@ 0xff
 8005c62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005c66:	f001 fca9 	bl	80075bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c6a:	f001 fc75 	bl	8007558 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c76:	e011      	b.n	8005c9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d012      	beq.n	8005ca6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	3310      	adds	r3, #16
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 fd37 	bl	80066f8 <xTaskRemoveFromEventList>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c90:	f000 fe10 	bl	80068b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c94:	7bbb      	ldrb	r3, [r7, #14]
 8005c96:	3b01      	subs	r3, #1
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	dce9      	bgt.n	8005c78 <prvUnlockQueue+0x60>
 8005ca4:	e000      	b.n	8005ca8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ca6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	22ff      	movs	r2, #255	@ 0xff
 8005cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005cb0:	f001 fc84 	bl	80075bc <vPortExitCritical>
}
 8005cb4:	bf00      	nop
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cc4:	f001 fc48 	bl	8007558 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d102      	bne.n	8005cd6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	e001      	b.n	8005cda <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cda:	f001 fc6f 	bl	80075bc <vPortExitCritical>

	return xReturn;
 8005cde:	68fb      	ldr	r3, [r7, #12]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cf0:	f001 fc32 	bl	8007558 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d102      	bne.n	8005d06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d00:	2301      	movs	r3, #1
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	e001      	b.n	8005d0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d06:	2300      	movs	r3, #0
 8005d08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d0a:	f001 fc57 	bl	80075bc <vPortExitCritical>

	return xReturn;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	e014      	b.n	8005d52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d28:	4a0f      	ldr	r2, [pc, #60]	@ (8005d68 <vQueueAddToRegistry+0x50>)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10b      	bne.n	8005d4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d34:	490c      	ldr	r1, [pc, #48]	@ (8005d68 <vQueueAddToRegistry+0x50>)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8005d68 <vQueueAddToRegistry+0x50>)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	4413      	add	r3, r2
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d4a:	e006      	b.n	8005d5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b07      	cmp	r3, #7
 8005d56:	d9e7      	bls.n	8005d28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d58:	bf00      	nop
 8005d5a:	bf00      	nop
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	200009bc 	.word	0x200009bc

08005d6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d7c:	f001 fbec 	bl	8007558 <vPortEnterCritical>
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d86:	b25b      	sxtb	r3, r3
 8005d88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d8c:	d103      	bne.n	8005d96 <vQueueWaitForMessageRestricted+0x2a>
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d9c:	b25b      	sxtb	r3, r3
 8005d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005da2:	d103      	bne.n	8005dac <vQueueWaitForMessageRestricted+0x40>
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dac:	f001 fc06 	bl	80075bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d106      	bne.n	8005dc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	3324      	adds	r3, #36	@ 0x24
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	68b9      	ldr	r1, [r7, #8]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 fc6d 	bl	80066a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005dc6:	6978      	ldr	r0, [r7, #20]
 8005dc8:	f7ff ff26 	bl	8005c18 <prvUnlockQueue>
	}
 8005dcc:	bf00      	nop
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08e      	sub	sp, #56	@ 0x38
 8005dd8:	af04      	add	r7, sp, #16
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
 8005de0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10b      	bne.n	8005e00 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	623b      	str	r3, [r7, #32]
}
 8005dfa:	bf00      	nop
 8005dfc:	bf00      	nop
 8005dfe:	e7fd      	b.n	8005dfc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10b      	bne.n	8005e1e <xTaskCreateStatic+0x4a>
	__asm volatile
 8005e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	61fb      	str	r3, [r7, #28]
}
 8005e18:	bf00      	nop
 8005e1a:	bf00      	nop
 8005e1c:	e7fd      	b.n	8005e1a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e1e:	23a8      	movs	r3, #168	@ 0xa8
 8005e20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	2ba8      	cmp	r3, #168	@ 0xa8
 8005e26:	d00b      	beq.n	8005e40 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	61bb      	str	r3, [r7, #24]
}
 8005e3a:	bf00      	nop
 8005e3c:	bf00      	nop
 8005e3e:	e7fd      	b.n	8005e3c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e40:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d01e      	beq.n	8005e86 <xTaskCreateStatic+0xb2>
 8005e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d01b      	beq.n	8005e86 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e50:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e56:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e60:	2300      	movs	r3, #0
 8005e62:	9303      	str	r3, [sp, #12]
 8005e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e66:	9302      	str	r3, [sp, #8]
 8005e68:	f107 0314 	add.w	r3, r7, #20
 8005e6c:	9301      	str	r3, [sp, #4]
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	68b9      	ldr	r1, [r7, #8]
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f000 f851 	bl	8005f20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005e80:	f000 f8f6 	bl	8006070 <prvAddNewTaskToReadyList>
 8005e84:	e001      	b.n	8005e8a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005e86:	2300      	movs	r3, #0
 8005e88:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e8a:	697b      	ldr	r3, [r7, #20]
	}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3728      	adds	r7, #40	@ 0x28
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08c      	sub	sp, #48	@ 0x30
 8005e98:	af04      	add	r7, sp, #16
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	603b      	str	r3, [r7, #0]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ea4:	88fb      	ldrh	r3, [r7, #6]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f001 fc77 	bl	800779c <pvPortMalloc>
 8005eae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00e      	beq.n	8005ed4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005eb6:	20a8      	movs	r0, #168	@ 0xa8
 8005eb8:	f001 fc70 	bl	800779c <pvPortMalloc>
 8005ebc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d003      	beq.n	8005ecc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	631a      	str	r2, [r3, #48]	@ 0x30
 8005eca:	e005      	b.n	8005ed8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ecc:	6978      	ldr	r0, [r7, #20]
 8005ece:	f001 fd33 	bl	8007938 <vPortFree>
 8005ed2:	e001      	b.n	8005ed8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d017      	beq.n	8005f0e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ee6:	88fa      	ldrh	r2, [r7, #6]
 8005ee8:	2300      	movs	r3, #0
 8005eea:	9303      	str	r3, [sp, #12]
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	9302      	str	r3, [sp, #8]
 8005ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef2:	9301      	str	r3, [sp, #4]
 8005ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	68b9      	ldr	r1, [r7, #8]
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 f80f 	bl	8005f20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f02:	69f8      	ldr	r0, [r7, #28]
 8005f04:	f000 f8b4 	bl	8006070 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	61bb      	str	r3, [r7, #24]
 8005f0c:	e002      	b.n	8005f14 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f14:	69bb      	ldr	r3, [r7, #24]
	}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3720      	adds	r7, #32
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
	...

08005f20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b088      	sub	sp, #32
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f30:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	461a      	mov	r2, r3
 8005f38:	21a5      	movs	r1, #165	@ 0xa5
 8005f3a:	f001 ff34 	bl	8007da6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	f023 0307 	bic.w	r3, r3, #7
 8005f56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	f003 0307 	and.w	r3, r3, #7
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00b      	beq.n	8005f7a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	617b      	str	r3, [r7, #20]
}
 8005f74:	bf00      	nop
 8005f76:	bf00      	nop
 8005f78:	e7fd      	b.n	8005f76 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d01f      	beq.n	8005fc0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f80:	2300      	movs	r3, #0
 8005f82:	61fb      	str	r3, [r7, #28]
 8005f84:	e012      	b.n	8005fac <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	7819      	ldrb	r1, [r3, #0]
 8005f8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	4413      	add	r3, r2
 8005f94:	3334      	adds	r3, #52	@ 0x34
 8005f96:	460a      	mov	r2, r1
 8005f98:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d006      	beq.n	8005fb4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	61fb      	str	r3, [r7, #28]
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	2b0f      	cmp	r3, #15
 8005fb0:	d9e9      	bls.n	8005f86 <prvInitialiseNewTask+0x66>
 8005fb2:	e000      	b.n	8005fb6 <prvInitialiseNewTask+0x96>
			{
				break;
 8005fb4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005fbe:	e003      	b.n	8005fc8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fca:	2b37      	cmp	r3, #55	@ 0x37
 8005fcc:	d901      	bls.n	8005fd2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005fce:	2337      	movs	r3, #55	@ 0x37
 8005fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fdc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7ff f965 	bl	80052b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff0:	3318      	adds	r3, #24
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff f960 	bl	80052b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ffc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006000:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006006:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800600c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800600e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006010:	2200      	movs	r2, #0
 8006012:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006018:	2200      	movs	r2, #0
 800601a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800601e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006020:	3354      	adds	r3, #84	@ 0x54
 8006022:	224c      	movs	r2, #76	@ 0x4c
 8006024:	2100      	movs	r1, #0
 8006026:	4618      	mov	r0, r3
 8006028:	f001 febd 	bl	8007da6 <memset>
 800602c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602e:	4a0d      	ldr	r2, [pc, #52]	@ (8006064 <prvInitialiseNewTask+0x144>)
 8006030:	659a      	str	r2, [r3, #88]	@ 0x58
 8006032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006034:	4a0c      	ldr	r2, [pc, #48]	@ (8006068 <prvInitialiseNewTask+0x148>)
 8006036:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603a:	4a0c      	ldr	r2, [pc, #48]	@ (800606c <prvInitialiseNewTask+0x14c>)
 800603c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	68f9      	ldr	r1, [r7, #12]
 8006042:	69b8      	ldr	r0, [r7, #24]
 8006044:	f001 f95a 	bl	80072fc <pxPortInitialiseStack>
 8006048:	4602      	mov	r2, r0
 800604a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800604e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006058:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800605a:	bf00      	nop
 800605c:	3720      	adds	r7, #32
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	20004c50 	.word	0x20004c50
 8006068:	20004cb8 	.word	0x20004cb8
 800606c:	20004d20 	.word	0x20004d20

08006070 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006078:	f001 fa6e 	bl	8007558 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800607c:	4b2d      	ldr	r3, [pc, #180]	@ (8006134 <prvAddNewTaskToReadyList+0xc4>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3301      	adds	r3, #1
 8006082:	4a2c      	ldr	r2, [pc, #176]	@ (8006134 <prvAddNewTaskToReadyList+0xc4>)
 8006084:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006086:	4b2c      	ldr	r3, [pc, #176]	@ (8006138 <prvAddNewTaskToReadyList+0xc8>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d109      	bne.n	80060a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800608e:	4a2a      	ldr	r2, [pc, #168]	@ (8006138 <prvAddNewTaskToReadyList+0xc8>)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006094:	4b27      	ldr	r3, [pc, #156]	@ (8006134 <prvAddNewTaskToReadyList+0xc4>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d110      	bne.n	80060be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800609c:	f000 fc2e 	bl	80068fc <prvInitialiseTaskLists>
 80060a0:	e00d      	b.n	80060be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060a2:	4b26      	ldr	r3, [pc, #152]	@ (800613c <prvAddNewTaskToReadyList+0xcc>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d109      	bne.n	80060be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060aa:	4b23      	ldr	r3, [pc, #140]	@ (8006138 <prvAddNewTaskToReadyList+0xc8>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d802      	bhi.n	80060be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060b8:	4a1f      	ldr	r2, [pc, #124]	@ (8006138 <prvAddNewTaskToReadyList+0xc8>)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060be:	4b20      	ldr	r3, [pc, #128]	@ (8006140 <prvAddNewTaskToReadyList+0xd0>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3301      	adds	r3, #1
 80060c4:	4a1e      	ldr	r2, [pc, #120]	@ (8006140 <prvAddNewTaskToReadyList+0xd0>)
 80060c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80060c8:	4b1d      	ldr	r3, [pc, #116]	@ (8006140 <prvAddNewTaskToReadyList+0xd0>)
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006144 <prvAddNewTaskToReadyList+0xd4>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d903      	bls.n	80060e4 <prvAddNewTaskToReadyList+0x74>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e0:	4a18      	ldr	r2, [pc, #96]	@ (8006144 <prvAddNewTaskToReadyList+0xd4>)
 80060e2:	6013      	str	r3, [r2, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060e8:	4613      	mov	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4a15      	ldr	r2, [pc, #84]	@ (8006148 <prvAddNewTaskToReadyList+0xd8>)
 80060f2:	441a      	add	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3304      	adds	r3, #4
 80060f8:	4619      	mov	r1, r3
 80060fa:	4610      	mov	r0, r2
 80060fc:	f7ff f8e9 	bl	80052d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006100:	f001 fa5c 	bl	80075bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006104:	4b0d      	ldr	r3, [pc, #52]	@ (800613c <prvAddNewTaskToReadyList+0xcc>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00e      	beq.n	800612a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800610c:	4b0a      	ldr	r3, [pc, #40]	@ (8006138 <prvAddNewTaskToReadyList+0xc8>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006116:	429a      	cmp	r2, r3
 8006118:	d207      	bcs.n	800612a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800611a:	4b0c      	ldr	r3, [pc, #48]	@ (800614c <prvAddNewTaskToReadyList+0xdc>)
 800611c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800612a:	bf00      	nop
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	20000ed0 	.word	0x20000ed0
 8006138:	200009fc 	.word	0x200009fc
 800613c:	20000edc 	.word	0x20000edc
 8006140:	20000eec 	.word	0x20000eec
 8006144:	20000ed8 	.word	0x20000ed8
 8006148:	20000a00 	.word	0x20000a00
 800614c:	e000ed04 	.word	0xe000ed04

08006150 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006158:	2300      	movs	r3, #0
 800615a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d018      	beq.n	8006194 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006162:	4b14      	ldr	r3, [pc, #80]	@ (80061b4 <vTaskDelay+0x64>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00b      	beq.n	8006182 <vTaskDelay+0x32>
	__asm volatile
 800616a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	60bb      	str	r3, [r7, #8]
}
 800617c:	bf00      	nop
 800617e:	bf00      	nop
 8006180:	e7fd      	b.n	800617e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006182:	f000 f88b 	bl	800629c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006186:	2100      	movs	r1, #0
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fd09 	bl	8006ba0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800618e:	f000 f893 	bl	80062b8 <xTaskResumeAll>
 8006192:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d107      	bne.n	80061aa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800619a:	4b07      	ldr	r3, [pc, #28]	@ (80061b8 <vTaskDelay+0x68>)
 800619c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061aa:	bf00      	nop
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	20000ef8 	.word	0x20000ef8
 80061b8:	e000ed04 	.word	0xe000ed04

080061bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b08a      	sub	sp, #40	@ 0x28
 80061c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80061c6:	2300      	movs	r3, #0
 80061c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80061ca:	463a      	mov	r2, r7
 80061cc:	1d39      	adds	r1, r7, #4
 80061ce:	f107 0308 	add.w	r3, r7, #8
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff f81c 	bl	8005210 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	9202      	str	r2, [sp, #8]
 80061e0:	9301      	str	r3, [sp, #4]
 80061e2:	2300      	movs	r3, #0
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	2300      	movs	r3, #0
 80061e8:	460a      	mov	r2, r1
 80061ea:	4924      	ldr	r1, [pc, #144]	@ (800627c <vTaskStartScheduler+0xc0>)
 80061ec:	4824      	ldr	r0, [pc, #144]	@ (8006280 <vTaskStartScheduler+0xc4>)
 80061ee:	f7ff fdf1 	bl	8005dd4 <xTaskCreateStatic>
 80061f2:	4603      	mov	r3, r0
 80061f4:	4a23      	ldr	r2, [pc, #140]	@ (8006284 <vTaskStartScheduler+0xc8>)
 80061f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061f8:	4b22      	ldr	r3, [pc, #136]	@ (8006284 <vTaskStartScheduler+0xc8>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006200:	2301      	movs	r3, #1
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	e001      	b.n	800620a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006206:	2300      	movs	r3, #0
 8006208:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d102      	bne.n	8006216 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006210:	f000 fd1a 	bl	8006c48 <xTimerCreateTimerTask>
 8006214:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d11b      	bne.n	8006254 <vTaskStartScheduler+0x98>
	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	613b      	str	r3, [r7, #16]
}
 800622e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006230:	4b15      	ldr	r3, [pc, #84]	@ (8006288 <vTaskStartScheduler+0xcc>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3354      	adds	r3, #84	@ 0x54
 8006236:	4a15      	ldr	r2, [pc, #84]	@ (800628c <vTaskStartScheduler+0xd0>)
 8006238:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800623a:	4b15      	ldr	r3, [pc, #84]	@ (8006290 <vTaskStartScheduler+0xd4>)
 800623c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006240:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006242:	4b14      	ldr	r3, [pc, #80]	@ (8006294 <vTaskStartScheduler+0xd8>)
 8006244:	2201      	movs	r2, #1
 8006246:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006248:	4b13      	ldr	r3, [pc, #76]	@ (8006298 <vTaskStartScheduler+0xdc>)
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800624e:	f001 f8df 	bl	8007410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006252:	e00f      	b.n	8006274 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800625a:	d10b      	bne.n	8006274 <vTaskStartScheduler+0xb8>
	__asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	60fb      	str	r3, [r7, #12]
}
 800626e:	bf00      	nop
 8006270:	bf00      	nop
 8006272:	e7fd      	b.n	8006270 <vTaskStartScheduler+0xb4>
}
 8006274:	bf00      	nop
 8006276:	3718      	adds	r7, #24
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	08008b10 	.word	0x08008b10
 8006280:	080068cd 	.word	0x080068cd
 8006284:	20000ef4 	.word	0x20000ef4
 8006288:	200009fc 	.word	0x200009fc
 800628c:	2000001c 	.word	0x2000001c
 8006290:	20000ef0 	.word	0x20000ef0
 8006294:	20000edc 	.word	0x20000edc
 8006298:	20000ed4 	.word	0x20000ed4

0800629c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800629c:	b480      	push	{r7}
 800629e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80062a0:	4b04      	ldr	r3, [pc, #16]	@ (80062b4 <vTaskSuspendAll+0x18>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3301      	adds	r3, #1
 80062a6:	4a03      	ldr	r2, [pc, #12]	@ (80062b4 <vTaskSuspendAll+0x18>)
 80062a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80062aa:	bf00      	nop
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr
 80062b4:	20000ef8 	.word	0x20000ef8

080062b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062be:	2300      	movs	r3, #0
 80062c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062c2:	2300      	movs	r3, #0
 80062c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062c6:	4b42      	ldr	r3, [pc, #264]	@ (80063d0 <xTaskResumeAll+0x118>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10b      	bne.n	80062e6 <xTaskResumeAll+0x2e>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	603b      	str	r3, [r7, #0]
}
 80062e0:	bf00      	nop
 80062e2:	bf00      	nop
 80062e4:	e7fd      	b.n	80062e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80062e6:	f001 f937 	bl	8007558 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80062ea:	4b39      	ldr	r3, [pc, #228]	@ (80063d0 <xTaskResumeAll+0x118>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3b01      	subs	r3, #1
 80062f0:	4a37      	ldr	r2, [pc, #220]	@ (80063d0 <xTaskResumeAll+0x118>)
 80062f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062f4:	4b36      	ldr	r3, [pc, #216]	@ (80063d0 <xTaskResumeAll+0x118>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d162      	bne.n	80063c2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062fc:	4b35      	ldr	r3, [pc, #212]	@ (80063d4 <xTaskResumeAll+0x11c>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d05e      	beq.n	80063c2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006304:	e02f      	b.n	8006366 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006306:	4b34      	ldr	r3, [pc, #208]	@ (80063d8 <xTaskResumeAll+0x120>)
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3318      	adds	r3, #24
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff f83a 	bl	800538c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	3304      	adds	r3, #4
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff f835 	bl	800538c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006326:	4b2d      	ldr	r3, [pc, #180]	@ (80063dc <xTaskResumeAll+0x124>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	429a      	cmp	r2, r3
 800632c:	d903      	bls.n	8006336 <xTaskResumeAll+0x7e>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006332:	4a2a      	ldr	r2, [pc, #168]	@ (80063dc <xTaskResumeAll+0x124>)
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800633a:	4613      	mov	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4a27      	ldr	r2, [pc, #156]	@ (80063e0 <xTaskResumeAll+0x128>)
 8006344:	441a      	add	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	3304      	adds	r3, #4
 800634a:	4619      	mov	r1, r3
 800634c:	4610      	mov	r0, r2
 800634e:	f7fe ffc0 	bl	80052d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006356:	4b23      	ldr	r3, [pc, #140]	@ (80063e4 <xTaskResumeAll+0x12c>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635c:	429a      	cmp	r2, r3
 800635e:	d302      	bcc.n	8006366 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006360:	4b21      	ldr	r3, [pc, #132]	@ (80063e8 <xTaskResumeAll+0x130>)
 8006362:	2201      	movs	r2, #1
 8006364:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006366:	4b1c      	ldr	r3, [pc, #112]	@ (80063d8 <xTaskResumeAll+0x120>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1cb      	bne.n	8006306 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006374:	f000 fb66 	bl	8006a44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006378:	4b1c      	ldr	r3, [pc, #112]	@ (80063ec <xTaskResumeAll+0x134>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d010      	beq.n	80063a6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006384:	f000 f846 	bl	8006414 <xTaskIncrementTick>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d002      	beq.n	8006394 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800638e:	4b16      	ldr	r3, [pc, #88]	@ (80063e8 <xTaskResumeAll+0x130>)
 8006390:	2201      	movs	r2, #1
 8006392:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	3b01      	subs	r3, #1
 8006398:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1f1      	bne.n	8006384 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80063a0:	4b12      	ldr	r3, [pc, #72]	@ (80063ec <xTaskResumeAll+0x134>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063a6:	4b10      	ldr	r3, [pc, #64]	@ (80063e8 <xTaskResumeAll+0x130>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d009      	beq.n	80063c2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063ae:	2301      	movs	r3, #1
 80063b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063b2:	4b0f      	ldr	r3, [pc, #60]	@ (80063f0 <xTaskResumeAll+0x138>)
 80063b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063c2:	f001 f8fb 	bl	80075bc <vPortExitCritical>

	return xAlreadyYielded;
 80063c6:	68bb      	ldr	r3, [r7, #8]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	20000ef8 	.word	0x20000ef8
 80063d4:	20000ed0 	.word	0x20000ed0
 80063d8:	20000e90 	.word	0x20000e90
 80063dc:	20000ed8 	.word	0x20000ed8
 80063e0:	20000a00 	.word	0x20000a00
 80063e4:	200009fc 	.word	0x200009fc
 80063e8:	20000ee4 	.word	0x20000ee4
 80063ec:	20000ee0 	.word	0x20000ee0
 80063f0:	e000ed04 	.word	0xe000ed04

080063f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80063fa:	4b05      	ldr	r3, [pc, #20]	@ (8006410 <xTaskGetTickCount+0x1c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006400:	687b      	ldr	r3, [r7, #4]
}
 8006402:	4618      	mov	r0, r3
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	20000ed4 	.word	0x20000ed4

08006414 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800641a:	2300      	movs	r3, #0
 800641c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800641e:	4b4f      	ldr	r3, [pc, #316]	@ (800655c <xTaskIncrementTick+0x148>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	f040 8090 	bne.w	8006548 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006428:	4b4d      	ldr	r3, [pc, #308]	@ (8006560 <xTaskIncrementTick+0x14c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3301      	adds	r3, #1
 800642e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006430:	4a4b      	ldr	r2, [pc, #300]	@ (8006560 <xTaskIncrementTick+0x14c>)
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d121      	bne.n	8006480 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800643c:	4b49      	ldr	r3, [pc, #292]	@ (8006564 <xTaskIncrementTick+0x150>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00b      	beq.n	800645e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800644a:	f383 8811 	msr	BASEPRI, r3
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	603b      	str	r3, [r7, #0]
}
 8006458:	bf00      	nop
 800645a:	bf00      	nop
 800645c:	e7fd      	b.n	800645a <xTaskIncrementTick+0x46>
 800645e:	4b41      	ldr	r3, [pc, #260]	@ (8006564 <xTaskIncrementTick+0x150>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	4b40      	ldr	r3, [pc, #256]	@ (8006568 <xTaskIncrementTick+0x154>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a3e      	ldr	r2, [pc, #248]	@ (8006564 <xTaskIncrementTick+0x150>)
 800646a:	6013      	str	r3, [r2, #0]
 800646c:	4a3e      	ldr	r2, [pc, #248]	@ (8006568 <xTaskIncrementTick+0x154>)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	4b3e      	ldr	r3, [pc, #248]	@ (800656c <xTaskIncrementTick+0x158>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3301      	adds	r3, #1
 8006478:	4a3c      	ldr	r2, [pc, #240]	@ (800656c <xTaskIncrementTick+0x158>)
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	f000 fae2 	bl	8006a44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006480:	4b3b      	ldr	r3, [pc, #236]	@ (8006570 <xTaskIncrementTick+0x15c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	429a      	cmp	r2, r3
 8006488:	d349      	bcc.n	800651e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800648a:	4b36      	ldr	r3, [pc, #216]	@ (8006564 <xTaskIncrementTick+0x150>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d104      	bne.n	800649e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006494:	4b36      	ldr	r3, [pc, #216]	@ (8006570 <xTaskIncrementTick+0x15c>)
 8006496:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800649a:	601a      	str	r2, [r3, #0]
					break;
 800649c:	e03f      	b.n	800651e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800649e:	4b31      	ldr	r3, [pc, #196]	@ (8006564 <xTaskIncrementTick+0x150>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d203      	bcs.n	80064be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80064b6:	4a2e      	ldr	r2, [pc, #184]	@ (8006570 <xTaskIncrementTick+0x15c>)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80064bc:	e02f      	b.n	800651e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	3304      	adds	r3, #4
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7fe ff62 	bl	800538c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d004      	beq.n	80064da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	3318      	adds	r3, #24
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7fe ff59 	bl	800538c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064de:	4b25      	ldr	r3, [pc, #148]	@ (8006574 <xTaskIncrementTick+0x160>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d903      	bls.n	80064ee <xTaskIncrementTick+0xda>
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ea:	4a22      	ldr	r2, [pc, #136]	@ (8006574 <xTaskIncrementTick+0x160>)
 80064ec:	6013      	str	r3, [r2, #0]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064f2:	4613      	mov	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4a1f      	ldr	r2, [pc, #124]	@ (8006578 <xTaskIncrementTick+0x164>)
 80064fc:	441a      	add	r2, r3
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	3304      	adds	r3, #4
 8006502:	4619      	mov	r1, r3
 8006504:	4610      	mov	r0, r2
 8006506:	f7fe fee4 	bl	80052d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800650e:	4b1b      	ldr	r3, [pc, #108]	@ (800657c <xTaskIncrementTick+0x168>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006514:	429a      	cmp	r2, r3
 8006516:	d3b8      	bcc.n	800648a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006518:	2301      	movs	r3, #1
 800651a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800651c:	e7b5      	b.n	800648a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800651e:	4b17      	ldr	r3, [pc, #92]	@ (800657c <xTaskIncrementTick+0x168>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006524:	4914      	ldr	r1, [pc, #80]	@ (8006578 <xTaskIncrementTick+0x164>)
 8006526:	4613      	mov	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	440b      	add	r3, r1
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d901      	bls.n	800653a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006536:	2301      	movs	r3, #1
 8006538:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800653a:	4b11      	ldr	r3, [pc, #68]	@ (8006580 <xTaskIncrementTick+0x16c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d007      	beq.n	8006552 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006542:	2301      	movs	r3, #1
 8006544:	617b      	str	r3, [r7, #20]
 8006546:	e004      	b.n	8006552 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006548:	4b0e      	ldr	r3, [pc, #56]	@ (8006584 <xTaskIncrementTick+0x170>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3301      	adds	r3, #1
 800654e:	4a0d      	ldr	r2, [pc, #52]	@ (8006584 <xTaskIncrementTick+0x170>)
 8006550:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006552:	697b      	ldr	r3, [r7, #20]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	20000ef8 	.word	0x20000ef8
 8006560:	20000ed4 	.word	0x20000ed4
 8006564:	20000e88 	.word	0x20000e88
 8006568:	20000e8c 	.word	0x20000e8c
 800656c:	20000ee8 	.word	0x20000ee8
 8006570:	20000ef0 	.word	0x20000ef0
 8006574:	20000ed8 	.word	0x20000ed8
 8006578:	20000a00 	.word	0x20000a00
 800657c:	200009fc 	.word	0x200009fc
 8006580:	20000ee4 	.word	0x20000ee4
 8006584:	20000ee0 	.word	0x20000ee0

08006588 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800658e:	4b2b      	ldr	r3, [pc, #172]	@ (800663c <vTaskSwitchContext+0xb4>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006596:	4b2a      	ldr	r3, [pc, #168]	@ (8006640 <vTaskSwitchContext+0xb8>)
 8006598:	2201      	movs	r2, #1
 800659a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800659c:	e047      	b.n	800662e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800659e:	4b28      	ldr	r3, [pc, #160]	@ (8006640 <vTaskSwitchContext+0xb8>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065a4:	4b27      	ldr	r3, [pc, #156]	@ (8006644 <vTaskSwitchContext+0xbc>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	60fb      	str	r3, [r7, #12]
 80065aa:	e011      	b.n	80065d0 <vTaskSwitchContext+0x48>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10b      	bne.n	80065ca <vTaskSwitchContext+0x42>
	__asm volatile
 80065b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	607b      	str	r3, [r7, #4]
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop
 80065c8:	e7fd      	b.n	80065c6 <vTaskSwitchContext+0x3e>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	3b01      	subs	r3, #1
 80065ce:	60fb      	str	r3, [r7, #12]
 80065d0:	491d      	ldr	r1, [pc, #116]	@ (8006648 <vTaskSwitchContext+0xc0>)
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4613      	mov	r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4413      	add	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	440b      	add	r3, r1
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d0e3      	beq.n	80065ac <vTaskSwitchContext+0x24>
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	4613      	mov	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	4a16      	ldr	r2, [pc, #88]	@ (8006648 <vTaskSwitchContext+0xc0>)
 80065f0:	4413      	add	r3, r2
 80065f2:	60bb      	str	r3, [r7, #8]
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	605a      	str	r2, [r3, #4]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	3308      	adds	r3, #8
 8006606:	429a      	cmp	r2, r3
 8006608:	d104      	bne.n	8006614 <vTaskSwitchContext+0x8c>
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	605a      	str	r2, [r3, #4]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	4a0c      	ldr	r2, [pc, #48]	@ (800664c <vTaskSwitchContext+0xc4>)
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	4a09      	ldr	r2, [pc, #36]	@ (8006644 <vTaskSwitchContext+0xbc>)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006624:	4b09      	ldr	r3, [pc, #36]	@ (800664c <vTaskSwitchContext+0xc4>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3354      	adds	r3, #84	@ 0x54
 800662a:	4a09      	ldr	r2, [pc, #36]	@ (8006650 <vTaskSwitchContext+0xc8>)
 800662c:	6013      	str	r3, [r2, #0]
}
 800662e:	bf00      	nop
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	20000ef8 	.word	0x20000ef8
 8006640:	20000ee4 	.word	0x20000ee4
 8006644:	20000ed8 	.word	0x20000ed8
 8006648:	20000a00 	.word	0x20000a00
 800664c:	200009fc 	.word	0x200009fc
 8006650:	2000001c 	.word	0x2000001c

08006654 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10b      	bne.n	800667c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006668:	f383 8811 	msr	BASEPRI, r3
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	60fb      	str	r3, [r7, #12]
}
 8006676:	bf00      	nop
 8006678:	bf00      	nop
 800667a:	e7fd      	b.n	8006678 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800667c:	4b07      	ldr	r3, [pc, #28]	@ (800669c <vTaskPlaceOnEventList+0x48>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3318      	adds	r3, #24
 8006682:	4619      	mov	r1, r3
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7fe fe48 	bl	800531a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800668a:	2101      	movs	r1, #1
 800668c:	6838      	ldr	r0, [r7, #0]
 800668e:	f000 fa87 	bl	8006ba0 <prvAddCurrentTaskToDelayedList>
}
 8006692:	bf00      	nop
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	200009fc 	.word	0x200009fc

080066a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10b      	bne.n	80066ca <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80066b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	617b      	str	r3, [r7, #20]
}
 80066c4:	bf00      	nop
 80066c6:	bf00      	nop
 80066c8:	e7fd      	b.n	80066c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066ca:	4b0a      	ldr	r3, [pc, #40]	@ (80066f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	3318      	adds	r3, #24
 80066d0:	4619      	mov	r1, r3
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f7fe fdfd 	bl	80052d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80066de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80066e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80066e4:	6879      	ldr	r1, [r7, #4]
 80066e6:	68b8      	ldr	r0, [r7, #8]
 80066e8:	f000 fa5a 	bl	8006ba0 <prvAddCurrentTaskToDelayedList>
	}
 80066ec:	bf00      	nop
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	200009fc 	.word	0x200009fc

080066f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10b      	bne.n	8006726 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	60fb      	str	r3, [r7, #12]
}
 8006720:	bf00      	nop
 8006722:	bf00      	nop
 8006724:	e7fd      	b.n	8006722 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	3318      	adds	r3, #24
 800672a:	4618      	mov	r0, r3
 800672c:	f7fe fe2e 	bl	800538c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006730:	4b1d      	ldr	r3, [pc, #116]	@ (80067a8 <xTaskRemoveFromEventList+0xb0>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d11d      	bne.n	8006774 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	3304      	adds	r3, #4
 800673c:	4618      	mov	r0, r3
 800673e:	f7fe fe25 	bl	800538c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006746:	4b19      	ldr	r3, [pc, #100]	@ (80067ac <xTaskRemoveFromEventList+0xb4>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	429a      	cmp	r2, r3
 800674c:	d903      	bls.n	8006756 <xTaskRemoveFromEventList+0x5e>
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006752:	4a16      	ldr	r2, [pc, #88]	@ (80067ac <xTaskRemoveFromEventList+0xb4>)
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800675a:	4613      	mov	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4a13      	ldr	r2, [pc, #76]	@ (80067b0 <xTaskRemoveFromEventList+0xb8>)
 8006764:	441a      	add	r2, r3
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	3304      	adds	r3, #4
 800676a:	4619      	mov	r1, r3
 800676c:	4610      	mov	r0, r2
 800676e:	f7fe fdb0 	bl	80052d2 <vListInsertEnd>
 8006772:	e005      	b.n	8006780 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	3318      	adds	r3, #24
 8006778:	4619      	mov	r1, r3
 800677a:	480e      	ldr	r0, [pc, #56]	@ (80067b4 <xTaskRemoveFromEventList+0xbc>)
 800677c:	f7fe fda9 	bl	80052d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006784:	4b0c      	ldr	r3, [pc, #48]	@ (80067b8 <xTaskRemoveFromEventList+0xc0>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800678a:	429a      	cmp	r2, r3
 800678c:	d905      	bls.n	800679a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800678e:	2301      	movs	r3, #1
 8006790:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006792:	4b0a      	ldr	r3, [pc, #40]	@ (80067bc <xTaskRemoveFromEventList+0xc4>)
 8006794:	2201      	movs	r2, #1
 8006796:	601a      	str	r2, [r3, #0]
 8006798:	e001      	b.n	800679e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800679a:	2300      	movs	r3, #0
 800679c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800679e:	697b      	ldr	r3, [r7, #20]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	20000ef8 	.word	0x20000ef8
 80067ac:	20000ed8 	.word	0x20000ed8
 80067b0:	20000a00 	.word	0x20000a00
 80067b4:	20000e90 	.word	0x20000e90
 80067b8:	200009fc 	.word	0x200009fc
 80067bc:	20000ee4 	.word	0x20000ee4

080067c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067c8:	4b06      	ldr	r3, [pc, #24]	@ (80067e4 <vTaskInternalSetTimeOutState+0x24>)
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067d0:	4b05      	ldr	r3, [pc, #20]	@ (80067e8 <vTaskInternalSetTimeOutState+0x28>)
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	605a      	str	r2, [r3, #4]
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	20000ee8 	.word	0x20000ee8
 80067e8:	20000ed4 	.word	0x20000ed4

080067ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10b      	bne.n	8006814 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	613b      	str	r3, [r7, #16]
}
 800680e:	bf00      	nop
 8006810:	bf00      	nop
 8006812:	e7fd      	b.n	8006810 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10b      	bne.n	8006832 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	60fb      	str	r3, [r7, #12]
}
 800682c:	bf00      	nop
 800682e:	bf00      	nop
 8006830:	e7fd      	b.n	800682e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006832:	f000 fe91 	bl	8007558 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006836:	4b1d      	ldr	r3, [pc, #116]	@ (80068ac <xTaskCheckForTimeOut+0xc0>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800684e:	d102      	bne.n	8006856 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006850:	2300      	movs	r3, #0
 8006852:	61fb      	str	r3, [r7, #28]
 8006854:	e023      	b.n	800689e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	4b15      	ldr	r3, [pc, #84]	@ (80068b0 <xTaskCheckForTimeOut+0xc4>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	429a      	cmp	r2, r3
 8006860:	d007      	beq.n	8006872 <xTaskCheckForTimeOut+0x86>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	429a      	cmp	r2, r3
 800686a:	d302      	bcc.n	8006872 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800686c:	2301      	movs	r3, #1
 800686e:	61fb      	str	r3, [r7, #28]
 8006870:	e015      	b.n	800689e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	429a      	cmp	r2, r3
 800687a:	d20b      	bcs.n	8006894 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	1ad2      	subs	r2, r2, r3
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff ff99 	bl	80067c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800688e:	2300      	movs	r3, #0
 8006890:	61fb      	str	r3, [r7, #28]
 8006892:	e004      	b.n	800689e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	2200      	movs	r2, #0
 8006898:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800689a:	2301      	movs	r3, #1
 800689c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800689e:	f000 fe8d 	bl	80075bc <vPortExitCritical>

	return xReturn;
 80068a2:	69fb      	ldr	r3, [r7, #28]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3720      	adds	r7, #32
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	20000ed4 	.word	0x20000ed4
 80068b0:	20000ee8 	.word	0x20000ee8

080068b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068b4:	b480      	push	{r7}
 80068b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80068b8:	4b03      	ldr	r3, [pc, #12]	@ (80068c8 <vTaskMissedYield+0x14>)
 80068ba:	2201      	movs	r2, #1
 80068bc:	601a      	str	r2, [r3, #0]
}
 80068be:	bf00      	nop
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	20000ee4 	.word	0x20000ee4

080068cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068d4:	f000 f852 	bl	800697c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068d8:	4b06      	ldr	r3, [pc, #24]	@ (80068f4 <prvIdleTask+0x28>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d9f9      	bls.n	80068d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80068e0:	4b05      	ldr	r3, [pc, #20]	@ (80068f8 <prvIdleTask+0x2c>)
 80068e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068e6:	601a      	str	r2, [r3, #0]
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80068f0:	e7f0      	b.n	80068d4 <prvIdleTask+0x8>
 80068f2:	bf00      	nop
 80068f4:	20000a00 	.word	0x20000a00
 80068f8:	e000ed04 	.word	0xe000ed04

080068fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006902:	2300      	movs	r3, #0
 8006904:	607b      	str	r3, [r7, #4]
 8006906:	e00c      	b.n	8006922 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	4613      	mov	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4a12      	ldr	r2, [pc, #72]	@ (800695c <prvInitialiseTaskLists+0x60>)
 8006914:	4413      	add	r3, r2
 8006916:	4618      	mov	r0, r3
 8006918:	f7fe fcae 	bl	8005278 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3301      	adds	r3, #1
 8006920:	607b      	str	r3, [r7, #4]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b37      	cmp	r3, #55	@ 0x37
 8006926:	d9ef      	bls.n	8006908 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006928:	480d      	ldr	r0, [pc, #52]	@ (8006960 <prvInitialiseTaskLists+0x64>)
 800692a:	f7fe fca5 	bl	8005278 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800692e:	480d      	ldr	r0, [pc, #52]	@ (8006964 <prvInitialiseTaskLists+0x68>)
 8006930:	f7fe fca2 	bl	8005278 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006934:	480c      	ldr	r0, [pc, #48]	@ (8006968 <prvInitialiseTaskLists+0x6c>)
 8006936:	f7fe fc9f 	bl	8005278 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800693a:	480c      	ldr	r0, [pc, #48]	@ (800696c <prvInitialiseTaskLists+0x70>)
 800693c:	f7fe fc9c 	bl	8005278 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006940:	480b      	ldr	r0, [pc, #44]	@ (8006970 <prvInitialiseTaskLists+0x74>)
 8006942:	f7fe fc99 	bl	8005278 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006946:	4b0b      	ldr	r3, [pc, #44]	@ (8006974 <prvInitialiseTaskLists+0x78>)
 8006948:	4a05      	ldr	r2, [pc, #20]	@ (8006960 <prvInitialiseTaskLists+0x64>)
 800694a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800694c:	4b0a      	ldr	r3, [pc, #40]	@ (8006978 <prvInitialiseTaskLists+0x7c>)
 800694e:	4a05      	ldr	r2, [pc, #20]	@ (8006964 <prvInitialiseTaskLists+0x68>)
 8006950:	601a      	str	r2, [r3, #0]
}
 8006952:	bf00      	nop
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	20000a00 	.word	0x20000a00
 8006960:	20000e60 	.word	0x20000e60
 8006964:	20000e74 	.word	0x20000e74
 8006968:	20000e90 	.word	0x20000e90
 800696c:	20000ea4 	.word	0x20000ea4
 8006970:	20000ebc 	.word	0x20000ebc
 8006974:	20000e88 	.word	0x20000e88
 8006978:	20000e8c 	.word	0x20000e8c

0800697c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006982:	e019      	b.n	80069b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006984:	f000 fde8 	bl	8007558 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006988:	4b10      	ldr	r3, [pc, #64]	@ (80069cc <prvCheckTasksWaitingTermination+0x50>)
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	3304      	adds	r3, #4
 8006994:	4618      	mov	r0, r3
 8006996:	f7fe fcf9 	bl	800538c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800699a:	4b0d      	ldr	r3, [pc, #52]	@ (80069d0 <prvCheckTasksWaitingTermination+0x54>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	3b01      	subs	r3, #1
 80069a0:	4a0b      	ldr	r2, [pc, #44]	@ (80069d0 <prvCheckTasksWaitingTermination+0x54>)
 80069a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069a4:	4b0b      	ldr	r3, [pc, #44]	@ (80069d4 <prvCheckTasksWaitingTermination+0x58>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3b01      	subs	r3, #1
 80069aa:	4a0a      	ldr	r2, [pc, #40]	@ (80069d4 <prvCheckTasksWaitingTermination+0x58>)
 80069ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069ae:	f000 fe05 	bl	80075bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f810 	bl	80069d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069b8:	4b06      	ldr	r3, [pc, #24]	@ (80069d4 <prvCheckTasksWaitingTermination+0x58>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1e1      	bne.n	8006984 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069c0:	bf00      	nop
 80069c2:	bf00      	nop
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	20000ea4 	.word	0x20000ea4
 80069d0:	20000ed0 	.word	0x20000ed0
 80069d4:	20000eb8 	.word	0x20000eb8

080069d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3354      	adds	r3, #84	@ 0x54
 80069e4:	4618      	mov	r0, r3
 80069e6:	f001 f9f7 	bl	8007dd8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d108      	bne.n	8006a06 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f8:	4618      	mov	r0, r3
 80069fa:	f000 ff9d 	bl	8007938 <vPortFree>
				vPortFree( pxTCB );
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 ff9a 	bl	8007938 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a04:	e019      	b.n	8006a3a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d103      	bne.n	8006a18 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 ff91 	bl	8007938 <vPortFree>
	}
 8006a16:	e010      	b.n	8006a3a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d00b      	beq.n	8006a3a <prvDeleteTCB+0x62>
	__asm volatile
 8006a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	60fb      	str	r3, [r7, #12]
}
 8006a34:	bf00      	nop
 8006a36:	bf00      	nop
 8006a38:	e7fd      	b.n	8006a36 <prvDeleteTCB+0x5e>
	}
 8006a3a:	bf00      	nop
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
	...

08006a44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a7c <prvResetNextTaskUnblockTime+0x38>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d104      	bne.n	8006a5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a54:	4b0a      	ldr	r3, [pc, #40]	@ (8006a80 <prvResetNextTaskUnblockTime+0x3c>)
 8006a56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a5c:	e008      	b.n	8006a70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a5e:	4b07      	ldr	r3, [pc, #28]	@ (8006a7c <prvResetNextTaskUnblockTime+0x38>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	4a04      	ldr	r2, [pc, #16]	@ (8006a80 <prvResetNextTaskUnblockTime+0x3c>)
 8006a6e:	6013      	str	r3, [r2, #0]
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	20000e88 	.word	0x20000e88
 8006a80:	20000ef0 	.word	0x20000ef0

08006a84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab8 <xTaskGetSchedulerState+0x34>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d102      	bne.n	8006a98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a92:	2301      	movs	r3, #1
 8006a94:	607b      	str	r3, [r7, #4]
 8006a96:	e008      	b.n	8006aaa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a98:	4b08      	ldr	r3, [pc, #32]	@ (8006abc <xTaskGetSchedulerState+0x38>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d102      	bne.n	8006aa6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	607b      	str	r3, [r7, #4]
 8006aa4:	e001      	b.n	8006aaa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006aaa:	687b      	ldr	r3, [r7, #4]
	}
 8006aac:	4618      	mov	r0, r3
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	20000edc 	.word	0x20000edc
 8006abc:	20000ef8 	.word	0x20000ef8

08006ac0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006acc:	2300      	movs	r3, #0
 8006ace:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d058      	beq.n	8006b88 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8006b94 <xTaskPriorityDisinherit+0xd4>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d00b      	beq.n	8006af8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae4:	f383 8811 	msr	BASEPRI, r3
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	60fb      	str	r3, [r7, #12]
}
 8006af2:	bf00      	nop
 8006af4:	bf00      	nop
 8006af6:	e7fd      	b.n	8006af4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10b      	bne.n	8006b18 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	60bb      	str	r3, [r7, #8]
}
 8006b12:	bf00      	nop
 8006b14:	bf00      	nop
 8006b16:	e7fd      	b.n	8006b14 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b1c:	1e5a      	subs	r2, r3, #1
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d02c      	beq.n	8006b88 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d128      	bne.n	8006b88 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	3304      	adds	r3, #4
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fe fc26 	bl	800538c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b4c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b58:	4b0f      	ldr	r3, [pc, #60]	@ (8006b98 <xTaskPriorityDisinherit+0xd8>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d903      	bls.n	8006b68 <xTaskPriorityDisinherit+0xa8>
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b64:	4a0c      	ldr	r2, [pc, #48]	@ (8006b98 <xTaskPriorityDisinherit+0xd8>)
 8006b66:	6013      	str	r3, [r2, #0]
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4a09      	ldr	r2, [pc, #36]	@ (8006b9c <xTaskPriorityDisinherit+0xdc>)
 8006b76:	441a      	add	r2, r3
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	4610      	mov	r0, r2
 8006b80:	f7fe fba7 	bl	80052d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b84:	2301      	movs	r3, #1
 8006b86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b88:	697b      	ldr	r3, [r7, #20]
	}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	200009fc 	.word	0x200009fc
 8006b98:	20000ed8 	.word	0x20000ed8
 8006b9c:	20000a00 	.word	0x20000a00

08006ba0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006baa:	4b21      	ldr	r3, [pc, #132]	@ (8006c30 <prvAddCurrentTaskToDelayedList+0x90>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bb0:	4b20      	ldr	r3, [pc, #128]	@ (8006c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fe fbe8 	bl	800538c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bc2:	d10a      	bne.n	8006bda <prvAddCurrentTaskToDelayedList+0x3a>
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d007      	beq.n	8006bda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bca:	4b1a      	ldr	r3, [pc, #104]	@ (8006c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	3304      	adds	r3, #4
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	4819      	ldr	r0, [pc, #100]	@ (8006c38 <prvAddCurrentTaskToDelayedList+0x98>)
 8006bd4:	f7fe fb7d 	bl	80052d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006bd8:	e026      	b.n	8006c28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4413      	add	r3, r2
 8006be0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006be2:	4b14      	ldr	r3, [pc, #80]	@ (8006c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d209      	bcs.n	8006c06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bf2:	4b12      	ldr	r3, [pc, #72]	@ (8006c3c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8006c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3304      	adds	r3, #4
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	4610      	mov	r0, r2
 8006c00:	f7fe fb8b 	bl	800531a <vListInsert>
}
 8006c04:	e010      	b.n	8006c28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c06:	4b0e      	ldr	r3, [pc, #56]	@ (8006c40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8006c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3304      	adds	r3, #4
 8006c10:	4619      	mov	r1, r3
 8006c12:	4610      	mov	r0, r2
 8006c14:	f7fe fb81 	bl	800531a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c18:	4b0a      	ldr	r3, [pc, #40]	@ (8006c44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d202      	bcs.n	8006c28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006c22:	4a08      	ldr	r2, [pc, #32]	@ (8006c44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	6013      	str	r3, [r2, #0]
}
 8006c28:	bf00      	nop
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	20000ed4 	.word	0x20000ed4
 8006c34:	200009fc 	.word	0x200009fc
 8006c38:	20000ebc 	.word	0x20000ebc
 8006c3c:	20000e8c 	.word	0x20000e8c
 8006c40:	20000e88 	.word	0x20000e88
 8006c44:	20000ef0 	.word	0x20000ef0

08006c48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08a      	sub	sp, #40	@ 0x28
 8006c4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c52:	f000 fb13 	bl	800727c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c56:	4b1d      	ldr	r3, [pc, #116]	@ (8006ccc <xTimerCreateTimerTask+0x84>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d021      	beq.n	8006ca2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c62:	2300      	movs	r3, #0
 8006c64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c66:	1d3a      	adds	r2, r7, #4
 8006c68:	f107 0108 	add.w	r1, r7, #8
 8006c6c:	f107 030c 	add.w	r3, r7, #12
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fe fae7 	bl	8005244 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	9202      	str	r2, [sp, #8]
 8006c7e:	9301      	str	r3, [sp, #4]
 8006c80:	2302      	movs	r3, #2
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	2300      	movs	r3, #0
 8006c86:	460a      	mov	r2, r1
 8006c88:	4911      	ldr	r1, [pc, #68]	@ (8006cd0 <xTimerCreateTimerTask+0x88>)
 8006c8a:	4812      	ldr	r0, [pc, #72]	@ (8006cd4 <xTimerCreateTimerTask+0x8c>)
 8006c8c:	f7ff f8a2 	bl	8005dd4 <xTaskCreateStatic>
 8006c90:	4603      	mov	r3, r0
 8006c92:	4a11      	ldr	r2, [pc, #68]	@ (8006cd8 <xTimerCreateTimerTask+0x90>)
 8006c94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c96:	4b10      	ldr	r3, [pc, #64]	@ (8006cd8 <xTimerCreateTimerTask+0x90>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10b      	bne.n	8006cc0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	613b      	str	r3, [r7, #16]
}
 8006cba:	bf00      	nop
 8006cbc:	bf00      	nop
 8006cbe:	e7fd      	b.n	8006cbc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006cc0:	697b      	ldr	r3, [r7, #20]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000f2c 	.word	0x20000f2c
 8006cd0:	08008b18 	.word	0x08008b18
 8006cd4:	08006e15 	.word	0x08006e15
 8006cd8:	20000f30 	.word	0x20000f30

08006cdc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08a      	sub	sp, #40	@ 0x28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006cea:	2300      	movs	r3, #0
 8006cec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10b      	bne.n	8006d0c <xTimerGenericCommand+0x30>
	__asm volatile
 8006cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf8:	f383 8811 	msr	BASEPRI, r3
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	623b      	str	r3, [r7, #32]
}
 8006d06:	bf00      	nop
 8006d08:	bf00      	nop
 8006d0a:	e7fd      	b.n	8006d08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d0c:	4b19      	ldr	r3, [pc, #100]	@ (8006d74 <xTimerGenericCommand+0x98>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d02a      	beq.n	8006d6a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	2b05      	cmp	r3, #5
 8006d24:	dc18      	bgt.n	8006d58 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d26:	f7ff fead 	bl	8006a84 <xTaskGetSchedulerState>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d109      	bne.n	8006d44 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d30:	4b10      	ldr	r3, [pc, #64]	@ (8006d74 <xTimerGenericCommand+0x98>)
 8006d32:	6818      	ldr	r0, [r3, #0]
 8006d34:	f107 0110 	add.w	r1, r7, #16
 8006d38:	2300      	movs	r3, #0
 8006d3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d3c:	f7fe fc5a 	bl	80055f4 <xQueueGenericSend>
 8006d40:	6278      	str	r0, [r7, #36]	@ 0x24
 8006d42:	e012      	b.n	8006d6a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d44:	4b0b      	ldr	r3, [pc, #44]	@ (8006d74 <xTimerGenericCommand+0x98>)
 8006d46:	6818      	ldr	r0, [r3, #0]
 8006d48:	f107 0110 	add.w	r1, r7, #16
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f7fe fc50 	bl	80055f4 <xQueueGenericSend>
 8006d54:	6278      	str	r0, [r7, #36]	@ 0x24
 8006d56:	e008      	b.n	8006d6a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d58:	4b06      	ldr	r3, [pc, #24]	@ (8006d74 <xTimerGenericCommand+0x98>)
 8006d5a:	6818      	ldr	r0, [r3, #0]
 8006d5c:	f107 0110 	add.w	r1, r7, #16
 8006d60:	2300      	movs	r3, #0
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	f7fe fd48 	bl	80057f8 <xQueueGenericSendFromISR>
 8006d68:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3728      	adds	r7, #40	@ 0x28
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	20000f2c 	.word	0x20000f2c

08006d78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b088      	sub	sp, #32
 8006d7c:	af02      	add	r7, sp, #8
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d82:	4b23      	ldr	r3, [pc, #140]	@ (8006e10 <prvProcessExpiredTimer+0x98>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	3304      	adds	r3, #4
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7fe fafb 	bl	800538c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d9c:	f003 0304 	and.w	r3, r3, #4
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d023      	beq.n	8006dec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	699a      	ldr	r2, [r3, #24]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	18d1      	adds	r1, r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	6978      	ldr	r0, [r7, #20]
 8006db2:	f000 f8d5 	bl	8006f60 <prvInsertTimerInActiveList>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d020      	beq.n	8006dfe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	6978      	ldr	r0, [r7, #20]
 8006dc8:	f7ff ff88 	bl	8006cdc <xTimerGenericCommand>
 8006dcc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d114      	bne.n	8006dfe <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	60fb      	str	r3, [r7, #12]
}
 8006de6:	bf00      	nop
 8006de8:	bf00      	nop
 8006dea:	e7fd      	b.n	8006de8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006df2:	f023 0301 	bic.w	r3, r3, #1
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	6978      	ldr	r0, [r7, #20]
 8006e04:	4798      	blx	r3
}
 8006e06:	bf00      	nop
 8006e08:	3718      	adds	r7, #24
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	20000f24 	.word	0x20000f24

08006e14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e1c:	f107 0308 	add.w	r3, r7, #8
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 f859 	bl	8006ed8 <prvGetNextExpireTime>
 8006e26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 f805 	bl	8006e3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e32:	f000 f8d7 	bl	8006fe4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e36:	bf00      	nop
 8006e38:	e7f0      	b.n	8006e1c <prvTimerTask+0x8>
	...

08006e3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e46:	f7ff fa29 	bl	800629c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e4a:	f107 0308 	add.w	r3, r7, #8
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 f866 	bl	8006f20 <prvSampleTimeNow>
 8006e54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d130      	bne.n	8006ebe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10a      	bne.n	8006e78 <prvProcessTimerOrBlockTask+0x3c>
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d806      	bhi.n	8006e78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e6a:	f7ff fa25 	bl	80062b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e6e:	68f9      	ldr	r1, [r7, #12]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7ff ff81 	bl	8006d78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e76:	e024      	b.n	8006ec2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d008      	beq.n	8006e90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e7e:	4b13      	ldr	r3, [pc, #76]	@ (8006ecc <prvProcessTimerOrBlockTask+0x90>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <prvProcessTimerOrBlockTask+0x50>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e000      	b.n	8006e8e <prvProcessTimerOrBlockTask+0x52>
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e90:	4b0f      	ldr	r3, [pc, #60]	@ (8006ed0 <prvProcessTimerOrBlockTask+0x94>)
 8006e92:	6818      	ldr	r0, [r3, #0]
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	f7fe ff65 	bl	8005d6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ea2:	f7ff fa09 	bl	80062b8 <xTaskResumeAll>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10a      	bne.n	8006ec2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006eac:	4b09      	ldr	r3, [pc, #36]	@ (8006ed4 <prvProcessTimerOrBlockTask+0x98>)
 8006eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	f3bf 8f6f 	isb	sy
}
 8006ebc:	e001      	b.n	8006ec2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006ebe:	f7ff f9fb 	bl	80062b8 <xTaskResumeAll>
}
 8006ec2:	bf00      	nop
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	20000f28 	.word	0x20000f28
 8006ed0:	20000f2c 	.word	0x20000f2c
 8006ed4:	e000ed04 	.word	0xe000ed04

08006ed8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8006f1c <prvGetNextExpireTime+0x44>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <prvGetNextExpireTime+0x16>
 8006eea:	2201      	movs	r2, #1
 8006eec:	e000      	b.n	8006ef0 <prvGetNextExpireTime+0x18>
 8006eee:	2200      	movs	r2, #0
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d105      	bne.n	8006f08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006efc:	4b07      	ldr	r3, [pc, #28]	@ (8006f1c <prvGetNextExpireTime+0x44>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	60fb      	str	r3, [r7, #12]
 8006f06:	e001      	b.n	8006f0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3714      	adds	r7, #20
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	20000f24 	.word	0x20000f24

08006f20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f28:	f7ff fa64 	bl	80063f4 <xTaskGetTickCount>
 8006f2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8006f5c <prvSampleTimeNow+0x3c>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d205      	bcs.n	8006f44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f38:	f000 f93a 	bl	80071b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	e002      	b.n	8006f4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f4a:	4a04      	ldr	r2, [pc, #16]	@ (8006f5c <prvSampleTimeNow+0x3c>)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f50:	68fb      	ldr	r3, [r7, #12]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20000f34 	.word	0x20000f34

08006f60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d812      	bhi.n	8006fac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	1ad2      	subs	r2, r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d302      	bcc.n	8006f9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f94:	2301      	movs	r3, #1
 8006f96:	617b      	str	r3, [r7, #20]
 8006f98:	e01b      	b.n	8006fd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f9a:	4b10      	ldr	r3, [pc, #64]	@ (8006fdc <prvInsertTimerInActiveList+0x7c>)
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	f7fe f9b8 	bl	800531a <vListInsert>
 8006faa:	e012      	b.n	8006fd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d206      	bcs.n	8006fc2 <prvInsertTimerInActiveList+0x62>
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d302      	bcc.n	8006fc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	e007      	b.n	8006fd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fc2:	4b07      	ldr	r3, [pc, #28]	@ (8006fe0 <prvInsertTimerInActiveList+0x80>)
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4610      	mov	r0, r2
 8006fce:	f7fe f9a4 	bl	800531a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006fd2:	697b      	ldr	r3, [r7, #20]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3718      	adds	r7, #24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	20000f28 	.word	0x20000f28
 8006fe0:	20000f24 	.word	0x20000f24

08006fe4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b08e      	sub	sp, #56	@ 0x38
 8006fe8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fea:	e0ce      	b.n	800718a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	da19      	bge.n	8007026 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ff2:	1d3b      	adds	r3, r7, #4
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10b      	bne.n	8007016 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	61fb      	str	r3, [r7, #28]
}
 8007010:	bf00      	nop
 8007012:	bf00      	nop
 8007014:	e7fd      	b.n	8007012 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800701c:	6850      	ldr	r0, [r2, #4]
 800701e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007020:	6892      	ldr	r2, [r2, #8]
 8007022:	4611      	mov	r1, r2
 8007024:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	f2c0 80ae 	blt.w	800718a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d004      	beq.n	8007044 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800703a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703c:	3304      	adds	r3, #4
 800703e:	4618      	mov	r0, r3
 8007040:	f7fe f9a4 	bl	800538c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007044:	463b      	mov	r3, r7
 8007046:	4618      	mov	r0, r3
 8007048:	f7ff ff6a 	bl	8006f20 <prvSampleTimeNow>
 800704c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b09      	cmp	r3, #9
 8007052:	f200 8097 	bhi.w	8007184 <prvProcessReceivedCommands+0x1a0>
 8007056:	a201      	add	r2, pc, #4	@ (adr r2, 800705c <prvProcessReceivedCommands+0x78>)
 8007058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705c:	08007085 	.word	0x08007085
 8007060:	08007085 	.word	0x08007085
 8007064:	08007085 	.word	0x08007085
 8007068:	080070fb 	.word	0x080070fb
 800706c:	0800710f 	.word	0x0800710f
 8007070:	0800715b 	.word	0x0800715b
 8007074:	08007085 	.word	0x08007085
 8007078:	08007085 	.word	0x08007085
 800707c:	080070fb 	.word	0x080070fb
 8007080:	0800710f 	.word	0x0800710f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007086:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800708a:	f043 0301 	orr.w	r3, r3, #1
 800708e:	b2da      	uxtb	r2, r3
 8007090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007092:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	18d1      	adds	r1, r2, r3
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070a4:	f7ff ff5c 	bl	8006f60 <prvInsertTimerInActiveList>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d06c      	beq.n	8007188 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070bc:	f003 0304 	and.w	r3, r3, #4
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d061      	beq.n	8007188 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	441a      	add	r2, r3
 80070cc:	2300      	movs	r3, #0
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	2300      	movs	r3, #0
 80070d2:	2100      	movs	r1, #0
 80070d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070d6:	f7ff fe01 	bl	8006cdc <xTimerGenericCommand>
 80070da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d152      	bne.n	8007188 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	61bb      	str	r3, [r7, #24]
}
 80070f4:	bf00      	nop
 80070f6:	bf00      	nop
 80070f8:	e7fd      	b.n	80070f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007100:	f023 0301 	bic.w	r3, r3, #1
 8007104:	b2da      	uxtb	r2, r3
 8007106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007108:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800710c:	e03d      	b.n	800718a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800710e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007110:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007114:	f043 0301 	orr.w	r3, r3, #1
 8007118:	b2da      	uxtb	r2, r3
 800711a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007124:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10b      	bne.n	8007146 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	617b      	str	r3, [r7, #20]
}
 8007140:	bf00      	nop
 8007142:	bf00      	nop
 8007144:	e7fd      	b.n	8007142 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007148:	699a      	ldr	r2, [r3, #24]
 800714a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714c:	18d1      	adds	r1, r2, r3
 800714e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007152:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007154:	f7ff ff04 	bl	8006f60 <prvInsertTimerInActiveList>
					break;
 8007158:	e017      	b.n	800718a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800715a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800715c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007160:	f003 0302 	and.w	r3, r3, #2
 8007164:	2b00      	cmp	r3, #0
 8007166:	d103      	bne.n	8007170 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007168:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800716a:	f000 fbe5 	bl	8007938 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800716e:	e00c      	b.n	800718a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007172:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007176:	f023 0301 	bic.w	r3, r3, #1
 800717a:	b2da      	uxtb	r2, r3
 800717c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007182:	e002      	b.n	800718a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007184:	bf00      	nop
 8007186:	e000      	b.n	800718a <prvProcessReceivedCommands+0x1a6>
					break;
 8007188:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800718a:	4b08      	ldr	r3, [pc, #32]	@ (80071ac <prvProcessReceivedCommands+0x1c8>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	1d39      	adds	r1, r7, #4
 8007190:	2200      	movs	r2, #0
 8007192:	4618      	mov	r0, r3
 8007194:	f7fe fbce 	bl	8005934 <xQueueReceive>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	f47f af26 	bne.w	8006fec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80071a0:	bf00      	nop
 80071a2:	bf00      	nop
 80071a4:	3730      	adds	r7, #48	@ 0x30
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	20000f2c 	.word	0x20000f2c

080071b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b088      	sub	sp, #32
 80071b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071b6:	e049      	b.n	800724c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071b8:	4b2e      	ldr	r3, [pc, #184]	@ (8007274 <prvSwitchTimerLists+0xc4>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071c2:	4b2c      	ldr	r3, [pc, #176]	@ (8007274 <prvSwitchTimerLists+0xc4>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	3304      	adds	r3, #4
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7fe f8db 	bl	800538c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d02f      	beq.n	800724c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	4413      	add	r3, r2
 80071f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d90e      	bls.n	800721c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800720a:	4b1a      	ldr	r3, [pc, #104]	@ (8007274 <prvSwitchTimerLists+0xc4>)
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	3304      	adds	r3, #4
 8007212:	4619      	mov	r1, r3
 8007214:	4610      	mov	r0, r2
 8007216:	f7fe f880 	bl	800531a <vListInsert>
 800721a:	e017      	b.n	800724c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800721c:	2300      	movs	r3, #0
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	2300      	movs	r3, #0
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	2100      	movs	r1, #0
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f7ff fd58 	bl	8006cdc <xTimerGenericCommand>
 800722c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10b      	bne.n	800724c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	603b      	str	r3, [r7, #0]
}
 8007246:	bf00      	nop
 8007248:	bf00      	nop
 800724a:	e7fd      	b.n	8007248 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800724c:	4b09      	ldr	r3, [pc, #36]	@ (8007274 <prvSwitchTimerLists+0xc4>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1b0      	bne.n	80071b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007256:	4b07      	ldr	r3, [pc, #28]	@ (8007274 <prvSwitchTimerLists+0xc4>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800725c:	4b06      	ldr	r3, [pc, #24]	@ (8007278 <prvSwitchTimerLists+0xc8>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a04      	ldr	r2, [pc, #16]	@ (8007274 <prvSwitchTimerLists+0xc4>)
 8007262:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007264:	4a04      	ldr	r2, [pc, #16]	@ (8007278 <prvSwitchTimerLists+0xc8>)
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	6013      	str	r3, [r2, #0]
}
 800726a:	bf00      	nop
 800726c:	3718      	adds	r7, #24
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	20000f24 	.word	0x20000f24
 8007278:	20000f28 	.word	0x20000f28

0800727c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007282:	f000 f969 	bl	8007558 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007286:	4b15      	ldr	r3, [pc, #84]	@ (80072dc <prvCheckForValidListAndQueue+0x60>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d120      	bne.n	80072d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800728e:	4814      	ldr	r0, [pc, #80]	@ (80072e0 <prvCheckForValidListAndQueue+0x64>)
 8007290:	f7fd fff2 	bl	8005278 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007294:	4813      	ldr	r0, [pc, #76]	@ (80072e4 <prvCheckForValidListAndQueue+0x68>)
 8007296:	f7fd ffef 	bl	8005278 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800729a:	4b13      	ldr	r3, [pc, #76]	@ (80072e8 <prvCheckForValidListAndQueue+0x6c>)
 800729c:	4a10      	ldr	r2, [pc, #64]	@ (80072e0 <prvCheckForValidListAndQueue+0x64>)
 800729e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80072a0:	4b12      	ldr	r3, [pc, #72]	@ (80072ec <prvCheckForValidListAndQueue+0x70>)
 80072a2:	4a10      	ldr	r2, [pc, #64]	@ (80072e4 <prvCheckForValidListAndQueue+0x68>)
 80072a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80072a6:	2300      	movs	r3, #0
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	4b11      	ldr	r3, [pc, #68]	@ (80072f0 <prvCheckForValidListAndQueue+0x74>)
 80072ac:	4a11      	ldr	r2, [pc, #68]	@ (80072f4 <prvCheckForValidListAndQueue+0x78>)
 80072ae:	2110      	movs	r1, #16
 80072b0:	200a      	movs	r0, #10
 80072b2:	f7fe f8ff 	bl	80054b4 <xQueueGenericCreateStatic>
 80072b6:	4603      	mov	r3, r0
 80072b8:	4a08      	ldr	r2, [pc, #32]	@ (80072dc <prvCheckForValidListAndQueue+0x60>)
 80072ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80072bc:	4b07      	ldr	r3, [pc, #28]	@ (80072dc <prvCheckForValidListAndQueue+0x60>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d005      	beq.n	80072d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80072c4:	4b05      	ldr	r3, [pc, #20]	@ (80072dc <prvCheckForValidListAndQueue+0x60>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	490b      	ldr	r1, [pc, #44]	@ (80072f8 <prvCheckForValidListAndQueue+0x7c>)
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fe fd24 	bl	8005d18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072d0:	f000 f974 	bl	80075bc <vPortExitCritical>
}
 80072d4:	bf00      	nop
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	20000f2c 	.word	0x20000f2c
 80072e0:	20000efc 	.word	0x20000efc
 80072e4:	20000f10 	.word	0x20000f10
 80072e8:	20000f24 	.word	0x20000f24
 80072ec:	20000f28 	.word	0x20000f28
 80072f0:	20000fd8 	.word	0x20000fd8
 80072f4:	20000f38 	.word	0x20000f38
 80072f8:	08008b20 	.word	0x08008b20

080072fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	3b04      	subs	r3, #4
 800730c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007314:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3b04      	subs	r3, #4
 800731a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f023 0201 	bic.w	r2, r3, #1
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	3b04      	subs	r3, #4
 800732a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800732c:	4a0c      	ldr	r2, [pc, #48]	@ (8007360 <pxPortInitialiseStack+0x64>)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	3b14      	subs	r3, #20
 8007336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	3b04      	subs	r3, #4
 8007342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f06f 0202 	mvn.w	r2, #2
 800734a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	3b20      	subs	r3, #32
 8007350:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007352:	68fb      	ldr	r3, [r7, #12]
}
 8007354:	4618      	mov	r0, r3
 8007356:	3714      	adds	r7, #20
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr
 8007360:	08007365 	.word	0x08007365

08007364 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800736a:	2300      	movs	r3, #0
 800736c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800736e:	4b13      	ldr	r3, [pc, #76]	@ (80073bc <prvTaskExitError+0x58>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007376:	d00b      	beq.n	8007390 <prvTaskExitError+0x2c>
	__asm volatile
 8007378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800737c:	f383 8811 	msr	BASEPRI, r3
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	60fb      	str	r3, [r7, #12]
}
 800738a:	bf00      	nop
 800738c:	bf00      	nop
 800738e:	e7fd      	b.n	800738c <prvTaskExitError+0x28>
	__asm volatile
 8007390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	60bb      	str	r3, [r7, #8]
}
 80073a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073a4:	bf00      	nop
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d0fc      	beq.n	80073a6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073ac:	bf00      	nop
 80073ae:	bf00      	nop
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	2000000c 	.word	0x2000000c

080073c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80073c0:	4b07      	ldr	r3, [pc, #28]	@ (80073e0 <pxCurrentTCBConst2>)
 80073c2:	6819      	ldr	r1, [r3, #0]
 80073c4:	6808      	ldr	r0, [r1, #0]
 80073c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ca:	f380 8809 	msr	PSP, r0
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f04f 0000 	mov.w	r0, #0
 80073d6:	f380 8811 	msr	BASEPRI, r0
 80073da:	4770      	bx	lr
 80073dc:	f3af 8000 	nop.w

080073e0 <pxCurrentTCBConst2>:
 80073e0:	200009fc 	.word	0x200009fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80073e4:	bf00      	nop
 80073e6:	bf00      	nop

080073e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80073e8:	4808      	ldr	r0, [pc, #32]	@ (800740c <prvPortStartFirstTask+0x24>)
 80073ea:	6800      	ldr	r0, [r0, #0]
 80073ec:	6800      	ldr	r0, [r0, #0]
 80073ee:	f380 8808 	msr	MSP, r0
 80073f2:	f04f 0000 	mov.w	r0, #0
 80073f6:	f380 8814 	msr	CONTROL, r0
 80073fa:	b662      	cpsie	i
 80073fc:	b661      	cpsie	f
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	df00      	svc	0
 8007408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800740a:	bf00      	nop
 800740c:	e000ed08 	.word	0xe000ed08

08007410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007416:	4b47      	ldr	r3, [pc, #284]	@ (8007534 <xPortStartScheduler+0x124>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a47      	ldr	r2, [pc, #284]	@ (8007538 <xPortStartScheduler+0x128>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d10b      	bne.n	8007438 <xPortStartScheduler+0x28>
	__asm volatile
 8007420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	60fb      	str	r3, [r7, #12]
}
 8007432:	bf00      	nop
 8007434:	bf00      	nop
 8007436:	e7fd      	b.n	8007434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007438:	4b3e      	ldr	r3, [pc, #248]	@ (8007534 <xPortStartScheduler+0x124>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a3f      	ldr	r2, [pc, #252]	@ (800753c <xPortStartScheduler+0x12c>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d10b      	bne.n	800745a <xPortStartScheduler+0x4a>
	__asm volatile
 8007442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	613b      	str	r3, [r7, #16]
}
 8007454:	bf00      	nop
 8007456:	bf00      	nop
 8007458:	e7fd      	b.n	8007456 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800745a:	4b39      	ldr	r3, [pc, #228]	@ (8007540 <xPortStartScheduler+0x130>)
 800745c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	b2db      	uxtb	r3, r3
 8007464:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	22ff      	movs	r2, #255	@ 0xff
 800746a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	b2db      	uxtb	r3, r3
 8007472:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007474:	78fb      	ldrb	r3, [r7, #3]
 8007476:	b2db      	uxtb	r3, r3
 8007478:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800747c:	b2da      	uxtb	r2, r3
 800747e:	4b31      	ldr	r3, [pc, #196]	@ (8007544 <xPortStartScheduler+0x134>)
 8007480:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007482:	4b31      	ldr	r3, [pc, #196]	@ (8007548 <xPortStartScheduler+0x138>)
 8007484:	2207      	movs	r2, #7
 8007486:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007488:	e009      	b.n	800749e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800748a:	4b2f      	ldr	r3, [pc, #188]	@ (8007548 <xPortStartScheduler+0x138>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	3b01      	subs	r3, #1
 8007490:	4a2d      	ldr	r2, [pc, #180]	@ (8007548 <xPortStartScheduler+0x138>)
 8007492:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007494:	78fb      	ldrb	r3, [r7, #3]
 8007496:	b2db      	uxtb	r3, r3
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	b2db      	uxtb	r3, r3
 800749c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800749e:	78fb      	ldrb	r3, [r7, #3]
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074a6:	2b80      	cmp	r3, #128	@ 0x80
 80074a8:	d0ef      	beq.n	800748a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074aa:	4b27      	ldr	r3, [pc, #156]	@ (8007548 <xPortStartScheduler+0x138>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f1c3 0307 	rsb	r3, r3, #7
 80074b2:	2b04      	cmp	r3, #4
 80074b4:	d00b      	beq.n	80074ce <xPortStartScheduler+0xbe>
	__asm volatile
 80074b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ba:	f383 8811 	msr	BASEPRI, r3
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f3bf 8f4f 	dsb	sy
 80074c6:	60bb      	str	r3, [r7, #8]
}
 80074c8:	bf00      	nop
 80074ca:	bf00      	nop
 80074cc:	e7fd      	b.n	80074ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007548 <xPortStartScheduler+0x138>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	021b      	lsls	r3, r3, #8
 80074d4:	4a1c      	ldr	r2, [pc, #112]	@ (8007548 <xPortStartScheduler+0x138>)
 80074d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80074d8:	4b1b      	ldr	r3, [pc, #108]	@ (8007548 <xPortStartScheduler+0x138>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80074e0:	4a19      	ldr	r2, [pc, #100]	@ (8007548 <xPortStartScheduler+0x138>)
 80074e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074ec:	4b17      	ldr	r3, [pc, #92]	@ (800754c <xPortStartScheduler+0x13c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a16      	ldr	r2, [pc, #88]	@ (800754c <xPortStartScheduler+0x13c>)
 80074f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80074f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80074f8:	4b14      	ldr	r3, [pc, #80]	@ (800754c <xPortStartScheduler+0x13c>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a13      	ldr	r2, [pc, #76]	@ (800754c <xPortStartScheduler+0x13c>)
 80074fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007502:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007504:	f000 f8da 	bl	80076bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007508:	4b11      	ldr	r3, [pc, #68]	@ (8007550 <xPortStartScheduler+0x140>)
 800750a:	2200      	movs	r2, #0
 800750c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800750e:	f000 f8f9 	bl	8007704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007512:	4b10      	ldr	r3, [pc, #64]	@ (8007554 <xPortStartScheduler+0x144>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a0f      	ldr	r2, [pc, #60]	@ (8007554 <xPortStartScheduler+0x144>)
 8007518:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800751c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800751e:	f7ff ff63 	bl	80073e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007522:	f7ff f831 	bl	8006588 <vTaskSwitchContext>
	prvTaskExitError();
 8007526:	f7ff ff1d 	bl	8007364 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3718      	adds	r7, #24
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	e000ed00 	.word	0xe000ed00
 8007538:	410fc271 	.word	0x410fc271
 800753c:	410fc270 	.word	0x410fc270
 8007540:	e000e400 	.word	0xe000e400
 8007544:	20001028 	.word	0x20001028
 8007548:	2000102c 	.word	0x2000102c
 800754c:	e000ed20 	.word	0xe000ed20
 8007550:	2000000c 	.word	0x2000000c
 8007554:	e000ef34 	.word	0xe000ef34

08007558 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	607b      	str	r3, [r7, #4]
}
 8007570:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007572:	4b10      	ldr	r3, [pc, #64]	@ (80075b4 <vPortEnterCritical+0x5c>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3301      	adds	r3, #1
 8007578:	4a0e      	ldr	r2, [pc, #56]	@ (80075b4 <vPortEnterCritical+0x5c>)
 800757a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800757c:	4b0d      	ldr	r3, [pc, #52]	@ (80075b4 <vPortEnterCritical+0x5c>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d110      	bne.n	80075a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007584:	4b0c      	ldr	r3, [pc, #48]	@ (80075b8 <vPortEnterCritical+0x60>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00b      	beq.n	80075a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	603b      	str	r3, [r7, #0]
}
 80075a0:	bf00      	nop
 80075a2:	bf00      	nop
 80075a4:	e7fd      	b.n	80075a2 <vPortEnterCritical+0x4a>
	}
}
 80075a6:	bf00      	nop
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	2000000c 	.word	0x2000000c
 80075b8:	e000ed04 	.word	0xe000ed04

080075bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075c2:	4b12      	ldr	r3, [pc, #72]	@ (800760c <vPortExitCritical+0x50>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10b      	bne.n	80075e2 <vPortExitCritical+0x26>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	607b      	str	r3, [r7, #4]
}
 80075dc:	bf00      	nop
 80075de:	bf00      	nop
 80075e0:	e7fd      	b.n	80075de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80075e2:	4b0a      	ldr	r3, [pc, #40]	@ (800760c <vPortExitCritical+0x50>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3b01      	subs	r3, #1
 80075e8:	4a08      	ldr	r2, [pc, #32]	@ (800760c <vPortExitCritical+0x50>)
 80075ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075ec:	4b07      	ldr	r3, [pc, #28]	@ (800760c <vPortExitCritical+0x50>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d105      	bne.n	8007600 <vPortExitCritical+0x44>
 80075f4:	2300      	movs	r3, #0
 80075f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	f383 8811 	msr	BASEPRI, r3
}
 80075fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	2000000c 	.word	0x2000000c

08007610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007610:	f3ef 8009 	mrs	r0, PSP
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	4b15      	ldr	r3, [pc, #84]	@ (8007670 <pxCurrentTCBConst>)
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	f01e 0f10 	tst.w	lr, #16
 8007620:	bf08      	it	eq
 8007622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800762a:	6010      	str	r0, [r2, #0]
 800762c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007630:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007634:	f380 8811 	msr	BASEPRI, r0
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	f3bf 8f6f 	isb	sy
 8007640:	f7fe ffa2 	bl	8006588 <vTaskSwitchContext>
 8007644:	f04f 0000 	mov.w	r0, #0
 8007648:	f380 8811 	msr	BASEPRI, r0
 800764c:	bc09      	pop	{r0, r3}
 800764e:	6819      	ldr	r1, [r3, #0]
 8007650:	6808      	ldr	r0, [r1, #0]
 8007652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007656:	f01e 0f10 	tst.w	lr, #16
 800765a:	bf08      	it	eq
 800765c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007660:	f380 8809 	msr	PSP, r0
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	f3af 8000 	nop.w

08007670 <pxCurrentTCBConst>:
 8007670:	200009fc 	.word	0x200009fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007674:	bf00      	nop
 8007676:	bf00      	nop

08007678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
	__asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	607b      	str	r3, [r7, #4]
}
 8007690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007692:	f7fe febf 	bl	8006414 <xTaskIncrementTick>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d003      	beq.n	80076a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800769c:	4b06      	ldr	r3, [pc, #24]	@ (80076b8 <xPortSysTickHandler+0x40>)
 800769e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076a2:	601a      	str	r2, [r3, #0]
 80076a4:	2300      	movs	r3, #0
 80076a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	f383 8811 	msr	BASEPRI, r3
}
 80076ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076b0:	bf00      	nop
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	e000ed04 	.word	0xe000ed04

080076bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076bc:	b480      	push	{r7}
 80076be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076c0:	4b0b      	ldr	r3, [pc, #44]	@ (80076f0 <vPortSetupTimerInterrupt+0x34>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076c6:	4b0b      	ldr	r3, [pc, #44]	@ (80076f4 <vPortSetupTimerInterrupt+0x38>)
 80076c8:	2200      	movs	r2, #0
 80076ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076cc:	4b0a      	ldr	r3, [pc, #40]	@ (80076f8 <vPortSetupTimerInterrupt+0x3c>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a0a      	ldr	r2, [pc, #40]	@ (80076fc <vPortSetupTimerInterrupt+0x40>)
 80076d2:	fba2 2303 	umull	r2, r3, r2, r3
 80076d6:	099b      	lsrs	r3, r3, #6
 80076d8:	4a09      	ldr	r2, [pc, #36]	@ (8007700 <vPortSetupTimerInterrupt+0x44>)
 80076da:	3b01      	subs	r3, #1
 80076dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076de:	4b04      	ldr	r3, [pc, #16]	@ (80076f0 <vPortSetupTimerInterrupt+0x34>)
 80076e0:	2207      	movs	r2, #7
 80076e2:	601a      	str	r2, [r3, #0]
}
 80076e4:	bf00      	nop
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	e000e010 	.word	0xe000e010
 80076f4:	e000e018 	.word	0xe000e018
 80076f8:	20000000 	.word	0x20000000
 80076fc:	10624dd3 	.word	0x10624dd3
 8007700:	e000e014 	.word	0xe000e014

08007704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007704:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007714 <vPortEnableVFP+0x10>
 8007708:	6801      	ldr	r1, [r0, #0]
 800770a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800770e:	6001      	str	r1, [r0, #0]
 8007710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007712:	bf00      	nop
 8007714:	e000ed88 	.word	0xe000ed88

08007718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800771e:	f3ef 8305 	mrs	r3, IPSR
 8007722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2b0f      	cmp	r3, #15
 8007728:	d915      	bls.n	8007756 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800772a:	4a18      	ldr	r2, [pc, #96]	@ (800778c <vPortValidateInterruptPriority+0x74>)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4413      	add	r3, r2
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007734:	4b16      	ldr	r3, [pc, #88]	@ (8007790 <vPortValidateInterruptPriority+0x78>)
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	7afa      	ldrb	r2, [r7, #11]
 800773a:	429a      	cmp	r2, r3
 800773c:	d20b      	bcs.n	8007756 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	607b      	str	r3, [r7, #4]
}
 8007750:	bf00      	nop
 8007752:	bf00      	nop
 8007754:	e7fd      	b.n	8007752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007756:	4b0f      	ldr	r3, [pc, #60]	@ (8007794 <vPortValidateInterruptPriority+0x7c>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800775e:	4b0e      	ldr	r3, [pc, #56]	@ (8007798 <vPortValidateInterruptPriority+0x80>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	429a      	cmp	r2, r3
 8007764:	d90b      	bls.n	800777e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	603b      	str	r3, [r7, #0]
}
 8007778:	bf00      	nop
 800777a:	bf00      	nop
 800777c:	e7fd      	b.n	800777a <vPortValidateInterruptPriority+0x62>
	}
 800777e:	bf00      	nop
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	e000e3f0 	.word	0xe000e3f0
 8007790:	20001028 	.word	0x20001028
 8007794:	e000ed0c 	.word	0xe000ed0c
 8007798:	2000102c 	.word	0x2000102c

0800779c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b08a      	sub	sp, #40	@ 0x28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80077a4:	2300      	movs	r3, #0
 80077a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80077a8:	f7fe fd78 	bl	800629c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077ac:	4b5c      	ldr	r3, [pc, #368]	@ (8007920 <pvPortMalloc+0x184>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d101      	bne.n	80077b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077b4:	f000 f924 	bl	8007a00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077b8:	4b5a      	ldr	r3, [pc, #360]	@ (8007924 <pvPortMalloc+0x188>)
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4013      	ands	r3, r2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f040 8095 	bne.w	80078f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d01e      	beq.n	800780a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80077cc:	2208      	movs	r2, #8
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4413      	add	r3, r2
 80077d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f003 0307 	and.w	r3, r3, #7
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d015      	beq.n	800780a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f023 0307 	bic.w	r3, r3, #7
 80077e4:	3308      	adds	r3, #8
 80077e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f003 0307 	and.w	r3, r3, #7
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00b      	beq.n	800780a <pvPortMalloc+0x6e>
	__asm volatile
 80077f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	617b      	str	r3, [r7, #20]
}
 8007804:	bf00      	nop
 8007806:	bf00      	nop
 8007808:	e7fd      	b.n	8007806 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d06f      	beq.n	80078f0 <pvPortMalloc+0x154>
 8007810:	4b45      	ldr	r3, [pc, #276]	@ (8007928 <pvPortMalloc+0x18c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	429a      	cmp	r2, r3
 8007818:	d86a      	bhi.n	80078f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800781a:	4b44      	ldr	r3, [pc, #272]	@ (800792c <pvPortMalloc+0x190>)
 800781c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800781e:	4b43      	ldr	r3, [pc, #268]	@ (800792c <pvPortMalloc+0x190>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007824:	e004      	b.n	8007830 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007828:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800782a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	429a      	cmp	r2, r3
 8007838:	d903      	bls.n	8007842 <pvPortMalloc+0xa6>
 800783a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1f1      	bne.n	8007826 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007842:	4b37      	ldr	r3, [pc, #220]	@ (8007920 <pvPortMalloc+0x184>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007848:	429a      	cmp	r2, r3
 800784a:	d051      	beq.n	80078f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800784c:	6a3b      	ldr	r3, [r7, #32]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2208      	movs	r2, #8
 8007852:	4413      	add	r3, r2
 8007854:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	6a3b      	ldr	r3, [r7, #32]
 800785c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800785e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007860:	685a      	ldr	r2, [r3, #4]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	1ad2      	subs	r2, r2, r3
 8007866:	2308      	movs	r3, #8
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	429a      	cmp	r2, r3
 800786c:	d920      	bls.n	80078b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800786e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4413      	add	r3, r2
 8007874:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	f003 0307 	and.w	r3, r3, #7
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00b      	beq.n	8007898 <pvPortMalloc+0xfc>
	__asm volatile
 8007880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	613b      	str	r3, [r7, #16]
}
 8007892:	bf00      	nop
 8007894:	bf00      	nop
 8007896:	e7fd      	b.n	8007894 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	1ad2      	subs	r2, r2, r3
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078aa:	69b8      	ldr	r0, [r7, #24]
 80078ac:	f000 f90a 	bl	8007ac4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007928 <pvPortMalloc+0x18c>)
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	4a1b      	ldr	r2, [pc, #108]	@ (8007928 <pvPortMalloc+0x18c>)
 80078bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078be:	4b1a      	ldr	r3, [pc, #104]	@ (8007928 <pvPortMalloc+0x18c>)
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	4b1b      	ldr	r3, [pc, #108]	@ (8007930 <pvPortMalloc+0x194>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d203      	bcs.n	80078d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078ca:	4b17      	ldr	r3, [pc, #92]	@ (8007928 <pvPortMalloc+0x18c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a18      	ldr	r2, [pc, #96]	@ (8007930 <pvPortMalloc+0x194>)
 80078d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d4:	685a      	ldr	r2, [r3, #4]
 80078d6:	4b13      	ldr	r3, [pc, #76]	@ (8007924 <pvPortMalloc+0x188>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	431a      	orrs	r2, r3
 80078dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80078e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e2:	2200      	movs	r2, #0
 80078e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80078e6:	4b13      	ldr	r3, [pc, #76]	@ (8007934 <pvPortMalloc+0x198>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3301      	adds	r3, #1
 80078ec:	4a11      	ldr	r2, [pc, #68]	@ (8007934 <pvPortMalloc+0x198>)
 80078ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80078f0:	f7fe fce2 	bl	80062b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	f003 0307 	and.w	r3, r3, #7
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00b      	beq.n	8007916 <pvPortMalloc+0x17a>
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	60fb      	str	r3, [r7, #12]
}
 8007910:	bf00      	nop
 8007912:	bf00      	nop
 8007914:	e7fd      	b.n	8007912 <pvPortMalloc+0x176>
	return pvReturn;
 8007916:	69fb      	ldr	r3, [r7, #28]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3728      	adds	r7, #40	@ 0x28
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	20004c38 	.word	0x20004c38
 8007924:	20004c4c 	.word	0x20004c4c
 8007928:	20004c3c 	.word	0x20004c3c
 800792c:	20004c30 	.word	0x20004c30
 8007930:	20004c40 	.word	0x20004c40
 8007934:	20004c44 	.word	0x20004c44

08007938 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d04f      	beq.n	80079ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800794a:	2308      	movs	r3, #8
 800794c:	425b      	negs	r3, r3
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	4413      	add	r3, r2
 8007952:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	4b25      	ldr	r3, [pc, #148]	@ (80079f4 <vPortFree+0xbc>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4013      	ands	r3, r2
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10b      	bne.n	800797e <vPortFree+0x46>
	__asm volatile
 8007966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	60fb      	str	r3, [r7, #12]
}
 8007978:	bf00      	nop
 800797a:	bf00      	nop
 800797c:	e7fd      	b.n	800797a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00b      	beq.n	800799e <vPortFree+0x66>
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	60bb      	str	r3, [r7, #8]
}
 8007998:	bf00      	nop
 800799a:	bf00      	nop
 800799c:	e7fd      	b.n	800799a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	685a      	ldr	r2, [r3, #4]
 80079a2:	4b14      	ldr	r3, [pc, #80]	@ (80079f4 <vPortFree+0xbc>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4013      	ands	r3, r2
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d01e      	beq.n	80079ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d11a      	bne.n	80079ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	4b0e      	ldr	r3, [pc, #56]	@ (80079f4 <vPortFree+0xbc>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	43db      	mvns	r3, r3
 80079be:	401a      	ands	r2, r3
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079c4:	f7fe fc6a 	bl	800629c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	685a      	ldr	r2, [r3, #4]
 80079cc:	4b0a      	ldr	r3, [pc, #40]	@ (80079f8 <vPortFree+0xc0>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4413      	add	r3, r2
 80079d2:	4a09      	ldr	r2, [pc, #36]	@ (80079f8 <vPortFree+0xc0>)
 80079d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079d6:	6938      	ldr	r0, [r7, #16]
 80079d8:	f000 f874 	bl	8007ac4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80079dc:	4b07      	ldr	r3, [pc, #28]	@ (80079fc <vPortFree+0xc4>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3301      	adds	r3, #1
 80079e2:	4a06      	ldr	r2, [pc, #24]	@ (80079fc <vPortFree+0xc4>)
 80079e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80079e6:	f7fe fc67 	bl	80062b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80079ea:	bf00      	nop
 80079ec:	3718      	adds	r7, #24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	20004c4c 	.word	0x20004c4c
 80079f8:	20004c3c 	.word	0x20004c3c
 80079fc:	20004c48 	.word	0x20004c48

08007a00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a06:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007a0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a0c:	4b27      	ldr	r3, [pc, #156]	@ (8007aac <prvHeapInit+0xac>)
 8007a0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f003 0307 	and.w	r3, r3, #7
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00c      	beq.n	8007a34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	3307      	adds	r3, #7
 8007a1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f023 0307 	bic.w	r3, r3, #7
 8007a26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	4a1f      	ldr	r2, [pc, #124]	@ (8007aac <prvHeapInit+0xac>)
 8007a30:	4413      	add	r3, r2
 8007a32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a38:	4a1d      	ldr	r2, [pc, #116]	@ (8007ab0 <prvHeapInit+0xb0>)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8007ab0 <prvHeapInit+0xb0>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	4413      	add	r3, r2
 8007a4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a4c:	2208      	movs	r2, #8
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	1a9b      	subs	r3, r3, r2
 8007a52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f023 0307 	bic.w	r3, r3, #7
 8007a5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	4a15      	ldr	r2, [pc, #84]	@ (8007ab4 <prvHeapInit+0xb4>)
 8007a60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a62:	4b14      	ldr	r3, [pc, #80]	@ (8007ab4 <prvHeapInit+0xb4>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2200      	movs	r2, #0
 8007a68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a6a:	4b12      	ldr	r3, [pc, #72]	@ (8007ab4 <prvHeapInit+0xb4>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	1ad2      	subs	r2, r2, r3
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a80:	4b0c      	ldr	r3, [pc, #48]	@ (8007ab4 <prvHeapInit+0xb4>)
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8007ab8 <prvHeapInit+0xb8>)
 8007a8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	4a09      	ldr	r2, [pc, #36]	@ (8007abc <prvHeapInit+0xbc>)
 8007a96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a98:	4b09      	ldr	r3, [pc, #36]	@ (8007ac0 <prvHeapInit+0xc0>)
 8007a9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007a9e:	601a      	str	r2, [r3, #0]
}
 8007aa0:	bf00      	nop
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	20001030 	.word	0x20001030
 8007ab0:	20004c30 	.word	0x20004c30
 8007ab4:	20004c38 	.word	0x20004c38
 8007ab8:	20004c40 	.word	0x20004c40
 8007abc:	20004c3c 	.word	0x20004c3c
 8007ac0:	20004c4c 	.word	0x20004c4c

08007ac4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007acc:	4b28      	ldr	r3, [pc, #160]	@ (8007b70 <prvInsertBlockIntoFreeList+0xac>)
 8007ace:	60fb      	str	r3, [r7, #12]
 8007ad0:	e002      	b.n	8007ad8 <prvInsertBlockIntoFreeList+0x14>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	60fb      	str	r3, [r7, #12]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d8f7      	bhi.n	8007ad2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	4413      	add	r3, r2
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d108      	bne.n	8007b06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	441a      	add	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	441a      	add	r2, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d118      	bne.n	8007b4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	4b15      	ldr	r3, [pc, #84]	@ (8007b74 <prvInsertBlockIntoFreeList+0xb0>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d00d      	beq.n	8007b42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685a      	ldr	r2, [r3, #4]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	441a      	add	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	601a      	str	r2, [r3, #0]
 8007b40:	e008      	b.n	8007b54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b42:	4b0c      	ldr	r3, [pc, #48]	@ (8007b74 <prvInsertBlockIntoFreeList+0xb0>)
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	e003      	b.n	8007b54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d002      	beq.n	8007b62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b62:	bf00      	nop
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	20004c30 	.word	0x20004c30
 8007b74:	20004c38 	.word	0x20004c38

08007b78 <std>:
 8007b78:	2300      	movs	r3, #0
 8007b7a:	b510      	push	{r4, lr}
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	e9c0 3300 	strd	r3, r3, [r0]
 8007b82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b86:	6083      	str	r3, [r0, #8]
 8007b88:	8181      	strh	r1, [r0, #12]
 8007b8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007b8c:	81c2      	strh	r2, [r0, #14]
 8007b8e:	6183      	str	r3, [r0, #24]
 8007b90:	4619      	mov	r1, r3
 8007b92:	2208      	movs	r2, #8
 8007b94:	305c      	adds	r0, #92	@ 0x5c
 8007b96:	f000 f906 	bl	8007da6 <memset>
 8007b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007bd0 <std+0x58>)
 8007b9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007bd4 <std+0x5c>)
 8007ba0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8007bd8 <std+0x60>)
 8007ba4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8007bdc <std+0x64>)
 8007ba8:	6323      	str	r3, [r4, #48]	@ 0x30
 8007baa:	4b0d      	ldr	r3, [pc, #52]	@ (8007be0 <std+0x68>)
 8007bac:	6224      	str	r4, [r4, #32]
 8007bae:	429c      	cmp	r4, r3
 8007bb0:	d006      	beq.n	8007bc0 <std+0x48>
 8007bb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007bb6:	4294      	cmp	r4, r2
 8007bb8:	d002      	beq.n	8007bc0 <std+0x48>
 8007bba:	33d0      	adds	r3, #208	@ 0xd0
 8007bbc:	429c      	cmp	r4, r3
 8007bbe:	d105      	bne.n	8007bcc <std+0x54>
 8007bc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bc8:	f000 b9c4 	b.w	8007f54 <__retarget_lock_init_recursive>
 8007bcc:	bd10      	pop	{r4, pc}
 8007bce:	bf00      	nop
 8007bd0:	08007d21 	.word	0x08007d21
 8007bd4:	08007d43 	.word	0x08007d43
 8007bd8:	08007d7b 	.word	0x08007d7b
 8007bdc:	08007d9f 	.word	0x08007d9f
 8007be0:	20004c50 	.word	0x20004c50

08007be4 <stdio_exit_handler>:
 8007be4:	4a02      	ldr	r2, [pc, #8]	@ (8007bf0 <stdio_exit_handler+0xc>)
 8007be6:	4903      	ldr	r1, [pc, #12]	@ (8007bf4 <stdio_exit_handler+0x10>)
 8007be8:	4803      	ldr	r0, [pc, #12]	@ (8007bf8 <stdio_exit_handler+0x14>)
 8007bea:	f000 b869 	b.w	8007cc0 <_fwalk_sglue>
 8007bee:	bf00      	nop
 8007bf0:	20000010 	.word	0x20000010
 8007bf4:	0800880d 	.word	0x0800880d
 8007bf8:	20000020 	.word	0x20000020

08007bfc <cleanup_stdio>:
 8007bfc:	6841      	ldr	r1, [r0, #4]
 8007bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8007c30 <cleanup_stdio+0x34>)
 8007c00:	4299      	cmp	r1, r3
 8007c02:	b510      	push	{r4, lr}
 8007c04:	4604      	mov	r4, r0
 8007c06:	d001      	beq.n	8007c0c <cleanup_stdio+0x10>
 8007c08:	f000 fe00 	bl	800880c <_fflush_r>
 8007c0c:	68a1      	ldr	r1, [r4, #8]
 8007c0e:	4b09      	ldr	r3, [pc, #36]	@ (8007c34 <cleanup_stdio+0x38>)
 8007c10:	4299      	cmp	r1, r3
 8007c12:	d002      	beq.n	8007c1a <cleanup_stdio+0x1e>
 8007c14:	4620      	mov	r0, r4
 8007c16:	f000 fdf9 	bl	800880c <_fflush_r>
 8007c1a:	68e1      	ldr	r1, [r4, #12]
 8007c1c:	4b06      	ldr	r3, [pc, #24]	@ (8007c38 <cleanup_stdio+0x3c>)
 8007c1e:	4299      	cmp	r1, r3
 8007c20:	d004      	beq.n	8007c2c <cleanup_stdio+0x30>
 8007c22:	4620      	mov	r0, r4
 8007c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c28:	f000 bdf0 	b.w	800880c <_fflush_r>
 8007c2c:	bd10      	pop	{r4, pc}
 8007c2e:	bf00      	nop
 8007c30:	20004c50 	.word	0x20004c50
 8007c34:	20004cb8 	.word	0x20004cb8
 8007c38:	20004d20 	.word	0x20004d20

08007c3c <global_stdio_init.part.0>:
 8007c3c:	b510      	push	{r4, lr}
 8007c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c6c <global_stdio_init.part.0+0x30>)
 8007c40:	4c0b      	ldr	r4, [pc, #44]	@ (8007c70 <global_stdio_init.part.0+0x34>)
 8007c42:	4a0c      	ldr	r2, [pc, #48]	@ (8007c74 <global_stdio_init.part.0+0x38>)
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	4620      	mov	r0, r4
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2104      	movs	r1, #4
 8007c4c:	f7ff ff94 	bl	8007b78 <std>
 8007c50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c54:	2201      	movs	r2, #1
 8007c56:	2109      	movs	r1, #9
 8007c58:	f7ff ff8e 	bl	8007b78 <std>
 8007c5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c60:	2202      	movs	r2, #2
 8007c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c66:	2112      	movs	r1, #18
 8007c68:	f7ff bf86 	b.w	8007b78 <std>
 8007c6c:	20004d88 	.word	0x20004d88
 8007c70:	20004c50 	.word	0x20004c50
 8007c74:	08007be5 	.word	0x08007be5

08007c78 <__sfp_lock_acquire>:
 8007c78:	4801      	ldr	r0, [pc, #4]	@ (8007c80 <__sfp_lock_acquire+0x8>)
 8007c7a:	f000 b96c 	b.w	8007f56 <__retarget_lock_acquire_recursive>
 8007c7e:	bf00      	nop
 8007c80:	20004d91 	.word	0x20004d91

08007c84 <__sfp_lock_release>:
 8007c84:	4801      	ldr	r0, [pc, #4]	@ (8007c8c <__sfp_lock_release+0x8>)
 8007c86:	f000 b967 	b.w	8007f58 <__retarget_lock_release_recursive>
 8007c8a:	bf00      	nop
 8007c8c:	20004d91 	.word	0x20004d91

08007c90 <__sinit>:
 8007c90:	b510      	push	{r4, lr}
 8007c92:	4604      	mov	r4, r0
 8007c94:	f7ff fff0 	bl	8007c78 <__sfp_lock_acquire>
 8007c98:	6a23      	ldr	r3, [r4, #32]
 8007c9a:	b11b      	cbz	r3, 8007ca4 <__sinit+0x14>
 8007c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ca0:	f7ff bff0 	b.w	8007c84 <__sfp_lock_release>
 8007ca4:	4b04      	ldr	r3, [pc, #16]	@ (8007cb8 <__sinit+0x28>)
 8007ca6:	6223      	str	r3, [r4, #32]
 8007ca8:	4b04      	ldr	r3, [pc, #16]	@ (8007cbc <__sinit+0x2c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1f5      	bne.n	8007c9c <__sinit+0xc>
 8007cb0:	f7ff ffc4 	bl	8007c3c <global_stdio_init.part.0>
 8007cb4:	e7f2      	b.n	8007c9c <__sinit+0xc>
 8007cb6:	bf00      	nop
 8007cb8:	08007bfd 	.word	0x08007bfd
 8007cbc:	20004d88 	.word	0x20004d88

08007cc0 <_fwalk_sglue>:
 8007cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cc4:	4607      	mov	r7, r0
 8007cc6:	4688      	mov	r8, r1
 8007cc8:	4614      	mov	r4, r2
 8007cca:	2600      	movs	r6, #0
 8007ccc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cd0:	f1b9 0901 	subs.w	r9, r9, #1
 8007cd4:	d505      	bpl.n	8007ce2 <_fwalk_sglue+0x22>
 8007cd6:	6824      	ldr	r4, [r4, #0]
 8007cd8:	2c00      	cmp	r4, #0
 8007cda:	d1f7      	bne.n	8007ccc <_fwalk_sglue+0xc>
 8007cdc:	4630      	mov	r0, r6
 8007cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ce2:	89ab      	ldrh	r3, [r5, #12]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d907      	bls.n	8007cf8 <_fwalk_sglue+0x38>
 8007ce8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cec:	3301      	adds	r3, #1
 8007cee:	d003      	beq.n	8007cf8 <_fwalk_sglue+0x38>
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	4638      	mov	r0, r7
 8007cf4:	47c0      	blx	r8
 8007cf6:	4306      	orrs	r6, r0
 8007cf8:	3568      	adds	r5, #104	@ 0x68
 8007cfa:	e7e9      	b.n	8007cd0 <_fwalk_sglue+0x10>

08007cfc <iprintf>:
 8007cfc:	b40f      	push	{r0, r1, r2, r3}
 8007cfe:	b507      	push	{r0, r1, r2, lr}
 8007d00:	4906      	ldr	r1, [pc, #24]	@ (8007d1c <iprintf+0x20>)
 8007d02:	ab04      	add	r3, sp, #16
 8007d04:	6808      	ldr	r0, [r1, #0]
 8007d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d0a:	6881      	ldr	r1, [r0, #8]
 8007d0c:	9301      	str	r3, [sp, #4]
 8007d0e:	f000 fa55 	bl	80081bc <_vfiprintf_r>
 8007d12:	b003      	add	sp, #12
 8007d14:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d18:	b004      	add	sp, #16
 8007d1a:	4770      	bx	lr
 8007d1c:	2000001c 	.word	0x2000001c

08007d20 <__sread>:
 8007d20:	b510      	push	{r4, lr}
 8007d22:	460c      	mov	r4, r1
 8007d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d28:	f000 f8c6 	bl	8007eb8 <_read_r>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	bfab      	itete	ge
 8007d30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d32:	89a3      	ldrhlt	r3, [r4, #12]
 8007d34:	181b      	addge	r3, r3, r0
 8007d36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d3a:	bfac      	ite	ge
 8007d3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d3e:	81a3      	strhlt	r3, [r4, #12]
 8007d40:	bd10      	pop	{r4, pc}

08007d42 <__swrite>:
 8007d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d46:	461f      	mov	r7, r3
 8007d48:	898b      	ldrh	r3, [r1, #12]
 8007d4a:	05db      	lsls	r3, r3, #23
 8007d4c:	4605      	mov	r5, r0
 8007d4e:	460c      	mov	r4, r1
 8007d50:	4616      	mov	r6, r2
 8007d52:	d505      	bpl.n	8007d60 <__swrite+0x1e>
 8007d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d58:	2302      	movs	r3, #2
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f000 f89a 	bl	8007e94 <_lseek_r>
 8007d60:	89a3      	ldrh	r3, [r4, #12]
 8007d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d6a:	81a3      	strh	r3, [r4, #12]
 8007d6c:	4632      	mov	r2, r6
 8007d6e:	463b      	mov	r3, r7
 8007d70:	4628      	mov	r0, r5
 8007d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d76:	f000 b8b1 	b.w	8007edc <_write_r>

08007d7a <__sseek>:
 8007d7a:	b510      	push	{r4, lr}
 8007d7c:	460c      	mov	r4, r1
 8007d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d82:	f000 f887 	bl	8007e94 <_lseek_r>
 8007d86:	1c43      	adds	r3, r0, #1
 8007d88:	89a3      	ldrh	r3, [r4, #12]
 8007d8a:	bf15      	itete	ne
 8007d8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007d8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007d92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007d96:	81a3      	strheq	r3, [r4, #12]
 8007d98:	bf18      	it	ne
 8007d9a:	81a3      	strhne	r3, [r4, #12]
 8007d9c:	bd10      	pop	{r4, pc}

08007d9e <__sclose>:
 8007d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da2:	f000 b809 	b.w	8007db8 <_close_r>

08007da6 <memset>:
 8007da6:	4402      	add	r2, r0
 8007da8:	4603      	mov	r3, r0
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d100      	bne.n	8007db0 <memset+0xa>
 8007dae:	4770      	bx	lr
 8007db0:	f803 1b01 	strb.w	r1, [r3], #1
 8007db4:	e7f9      	b.n	8007daa <memset+0x4>
	...

08007db8 <_close_r>:
 8007db8:	b538      	push	{r3, r4, r5, lr}
 8007dba:	4d06      	ldr	r5, [pc, #24]	@ (8007dd4 <_close_r+0x1c>)
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	4608      	mov	r0, r1
 8007dc2:	602b      	str	r3, [r5, #0]
 8007dc4:	f7f9 f979 	bl	80010ba <_close>
 8007dc8:	1c43      	adds	r3, r0, #1
 8007dca:	d102      	bne.n	8007dd2 <_close_r+0x1a>
 8007dcc:	682b      	ldr	r3, [r5, #0]
 8007dce:	b103      	cbz	r3, 8007dd2 <_close_r+0x1a>
 8007dd0:	6023      	str	r3, [r4, #0]
 8007dd2:	bd38      	pop	{r3, r4, r5, pc}
 8007dd4:	20004d8c 	.word	0x20004d8c

08007dd8 <_reclaim_reent>:
 8007dd8:	4b2d      	ldr	r3, [pc, #180]	@ (8007e90 <_reclaim_reent+0xb8>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4283      	cmp	r3, r0
 8007dde:	b570      	push	{r4, r5, r6, lr}
 8007de0:	4604      	mov	r4, r0
 8007de2:	d053      	beq.n	8007e8c <_reclaim_reent+0xb4>
 8007de4:	69c3      	ldr	r3, [r0, #28]
 8007de6:	b31b      	cbz	r3, 8007e30 <_reclaim_reent+0x58>
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	b163      	cbz	r3, 8007e06 <_reclaim_reent+0x2e>
 8007dec:	2500      	movs	r5, #0
 8007dee:	69e3      	ldr	r3, [r4, #28]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	5959      	ldr	r1, [r3, r5]
 8007df4:	b9b1      	cbnz	r1, 8007e24 <_reclaim_reent+0x4c>
 8007df6:	3504      	adds	r5, #4
 8007df8:	2d80      	cmp	r5, #128	@ 0x80
 8007dfa:	d1f8      	bne.n	8007dee <_reclaim_reent+0x16>
 8007dfc:	69e3      	ldr	r3, [r4, #28]
 8007dfe:	4620      	mov	r0, r4
 8007e00:	68d9      	ldr	r1, [r3, #12]
 8007e02:	f000 f8b9 	bl	8007f78 <_free_r>
 8007e06:	69e3      	ldr	r3, [r4, #28]
 8007e08:	6819      	ldr	r1, [r3, #0]
 8007e0a:	b111      	cbz	r1, 8007e12 <_reclaim_reent+0x3a>
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	f000 f8b3 	bl	8007f78 <_free_r>
 8007e12:	69e3      	ldr	r3, [r4, #28]
 8007e14:	689d      	ldr	r5, [r3, #8]
 8007e16:	b15d      	cbz	r5, 8007e30 <_reclaim_reent+0x58>
 8007e18:	4629      	mov	r1, r5
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	682d      	ldr	r5, [r5, #0]
 8007e1e:	f000 f8ab 	bl	8007f78 <_free_r>
 8007e22:	e7f8      	b.n	8007e16 <_reclaim_reent+0x3e>
 8007e24:	680e      	ldr	r6, [r1, #0]
 8007e26:	4620      	mov	r0, r4
 8007e28:	f000 f8a6 	bl	8007f78 <_free_r>
 8007e2c:	4631      	mov	r1, r6
 8007e2e:	e7e1      	b.n	8007df4 <_reclaim_reent+0x1c>
 8007e30:	6961      	ldr	r1, [r4, #20]
 8007e32:	b111      	cbz	r1, 8007e3a <_reclaim_reent+0x62>
 8007e34:	4620      	mov	r0, r4
 8007e36:	f000 f89f 	bl	8007f78 <_free_r>
 8007e3a:	69e1      	ldr	r1, [r4, #28]
 8007e3c:	b111      	cbz	r1, 8007e44 <_reclaim_reent+0x6c>
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f000 f89a 	bl	8007f78 <_free_r>
 8007e44:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007e46:	b111      	cbz	r1, 8007e4e <_reclaim_reent+0x76>
 8007e48:	4620      	mov	r0, r4
 8007e4a:	f000 f895 	bl	8007f78 <_free_r>
 8007e4e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e50:	b111      	cbz	r1, 8007e58 <_reclaim_reent+0x80>
 8007e52:	4620      	mov	r0, r4
 8007e54:	f000 f890 	bl	8007f78 <_free_r>
 8007e58:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007e5a:	b111      	cbz	r1, 8007e62 <_reclaim_reent+0x8a>
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f000 f88b 	bl	8007f78 <_free_r>
 8007e62:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007e64:	b111      	cbz	r1, 8007e6c <_reclaim_reent+0x94>
 8007e66:	4620      	mov	r0, r4
 8007e68:	f000 f886 	bl	8007f78 <_free_r>
 8007e6c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007e6e:	b111      	cbz	r1, 8007e76 <_reclaim_reent+0x9e>
 8007e70:	4620      	mov	r0, r4
 8007e72:	f000 f881 	bl	8007f78 <_free_r>
 8007e76:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007e78:	b111      	cbz	r1, 8007e80 <_reclaim_reent+0xa8>
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f000 f87c 	bl	8007f78 <_free_r>
 8007e80:	6a23      	ldr	r3, [r4, #32]
 8007e82:	b11b      	cbz	r3, 8007e8c <_reclaim_reent+0xb4>
 8007e84:	4620      	mov	r0, r4
 8007e86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e8a:	4718      	bx	r3
 8007e8c:	bd70      	pop	{r4, r5, r6, pc}
 8007e8e:	bf00      	nop
 8007e90:	2000001c 	.word	0x2000001c

08007e94 <_lseek_r>:
 8007e94:	b538      	push	{r3, r4, r5, lr}
 8007e96:	4d07      	ldr	r5, [pc, #28]	@ (8007eb4 <_lseek_r+0x20>)
 8007e98:	4604      	mov	r4, r0
 8007e9a:	4608      	mov	r0, r1
 8007e9c:	4611      	mov	r1, r2
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	602a      	str	r2, [r5, #0]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f7f9 f930 	bl	8001108 <_lseek>
 8007ea8:	1c43      	adds	r3, r0, #1
 8007eaa:	d102      	bne.n	8007eb2 <_lseek_r+0x1e>
 8007eac:	682b      	ldr	r3, [r5, #0]
 8007eae:	b103      	cbz	r3, 8007eb2 <_lseek_r+0x1e>
 8007eb0:	6023      	str	r3, [r4, #0]
 8007eb2:	bd38      	pop	{r3, r4, r5, pc}
 8007eb4:	20004d8c 	.word	0x20004d8c

08007eb8 <_read_r>:
 8007eb8:	b538      	push	{r3, r4, r5, lr}
 8007eba:	4d07      	ldr	r5, [pc, #28]	@ (8007ed8 <_read_r+0x20>)
 8007ebc:	4604      	mov	r4, r0
 8007ebe:	4608      	mov	r0, r1
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	602a      	str	r2, [r5, #0]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	f7f9 f8be 	bl	8001048 <_read>
 8007ecc:	1c43      	adds	r3, r0, #1
 8007ece:	d102      	bne.n	8007ed6 <_read_r+0x1e>
 8007ed0:	682b      	ldr	r3, [r5, #0]
 8007ed2:	b103      	cbz	r3, 8007ed6 <_read_r+0x1e>
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	bd38      	pop	{r3, r4, r5, pc}
 8007ed8:	20004d8c 	.word	0x20004d8c

08007edc <_write_r>:
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	4d07      	ldr	r5, [pc, #28]	@ (8007efc <_write_r+0x20>)
 8007ee0:	4604      	mov	r4, r0
 8007ee2:	4608      	mov	r0, r1
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	602a      	str	r2, [r5, #0]
 8007eea:	461a      	mov	r2, r3
 8007eec:	f7f9 f8c9 	bl	8001082 <_write>
 8007ef0:	1c43      	adds	r3, r0, #1
 8007ef2:	d102      	bne.n	8007efa <_write_r+0x1e>
 8007ef4:	682b      	ldr	r3, [r5, #0]
 8007ef6:	b103      	cbz	r3, 8007efa <_write_r+0x1e>
 8007ef8:	6023      	str	r3, [r4, #0]
 8007efa:	bd38      	pop	{r3, r4, r5, pc}
 8007efc:	20004d8c 	.word	0x20004d8c

08007f00 <__errno>:
 8007f00:	4b01      	ldr	r3, [pc, #4]	@ (8007f08 <__errno+0x8>)
 8007f02:	6818      	ldr	r0, [r3, #0]
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	2000001c 	.word	0x2000001c

08007f0c <__libc_init_array>:
 8007f0c:	b570      	push	{r4, r5, r6, lr}
 8007f0e:	4d0d      	ldr	r5, [pc, #52]	@ (8007f44 <__libc_init_array+0x38>)
 8007f10:	4c0d      	ldr	r4, [pc, #52]	@ (8007f48 <__libc_init_array+0x3c>)
 8007f12:	1b64      	subs	r4, r4, r5
 8007f14:	10a4      	asrs	r4, r4, #2
 8007f16:	2600      	movs	r6, #0
 8007f18:	42a6      	cmp	r6, r4
 8007f1a:	d109      	bne.n	8007f30 <__libc_init_array+0x24>
 8007f1c:	4d0b      	ldr	r5, [pc, #44]	@ (8007f4c <__libc_init_array+0x40>)
 8007f1e:	4c0c      	ldr	r4, [pc, #48]	@ (8007f50 <__libc_init_array+0x44>)
 8007f20:	f000 fdc4 	bl	8008aac <_init>
 8007f24:	1b64      	subs	r4, r4, r5
 8007f26:	10a4      	asrs	r4, r4, #2
 8007f28:	2600      	movs	r6, #0
 8007f2a:	42a6      	cmp	r6, r4
 8007f2c:	d105      	bne.n	8007f3a <__libc_init_array+0x2e>
 8007f2e:	bd70      	pop	{r4, r5, r6, pc}
 8007f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f34:	4798      	blx	r3
 8007f36:	3601      	adds	r6, #1
 8007f38:	e7ee      	b.n	8007f18 <__libc_init_array+0xc>
 8007f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f3e:	4798      	blx	r3
 8007f40:	3601      	adds	r6, #1
 8007f42:	e7f2      	b.n	8007f2a <__libc_init_array+0x1e>
 8007f44:	08008bc4 	.word	0x08008bc4
 8007f48:	08008bc4 	.word	0x08008bc4
 8007f4c:	08008bc4 	.word	0x08008bc4
 8007f50:	08008bc8 	.word	0x08008bc8

08007f54 <__retarget_lock_init_recursive>:
 8007f54:	4770      	bx	lr

08007f56 <__retarget_lock_acquire_recursive>:
 8007f56:	4770      	bx	lr

08007f58 <__retarget_lock_release_recursive>:
 8007f58:	4770      	bx	lr

08007f5a <memcpy>:
 8007f5a:	440a      	add	r2, r1
 8007f5c:	4291      	cmp	r1, r2
 8007f5e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007f62:	d100      	bne.n	8007f66 <memcpy+0xc>
 8007f64:	4770      	bx	lr
 8007f66:	b510      	push	{r4, lr}
 8007f68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f70:	4291      	cmp	r1, r2
 8007f72:	d1f9      	bne.n	8007f68 <memcpy+0xe>
 8007f74:	bd10      	pop	{r4, pc}
	...

08007f78 <_free_r>:
 8007f78:	b538      	push	{r3, r4, r5, lr}
 8007f7a:	4605      	mov	r5, r0
 8007f7c:	2900      	cmp	r1, #0
 8007f7e:	d041      	beq.n	8008004 <_free_r+0x8c>
 8007f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f84:	1f0c      	subs	r4, r1, #4
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	bfb8      	it	lt
 8007f8a:	18e4      	addlt	r4, r4, r3
 8007f8c:	f000 f8e0 	bl	8008150 <__malloc_lock>
 8007f90:	4a1d      	ldr	r2, [pc, #116]	@ (8008008 <_free_r+0x90>)
 8007f92:	6813      	ldr	r3, [r2, #0]
 8007f94:	b933      	cbnz	r3, 8007fa4 <_free_r+0x2c>
 8007f96:	6063      	str	r3, [r4, #4]
 8007f98:	6014      	str	r4, [r2, #0]
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fa0:	f000 b8dc 	b.w	800815c <__malloc_unlock>
 8007fa4:	42a3      	cmp	r3, r4
 8007fa6:	d908      	bls.n	8007fba <_free_r+0x42>
 8007fa8:	6820      	ldr	r0, [r4, #0]
 8007faa:	1821      	adds	r1, r4, r0
 8007fac:	428b      	cmp	r3, r1
 8007fae:	bf01      	itttt	eq
 8007fb0:	6819      	ldreq	r1, [r3, #0]
 8007fb2:	685b      	ldreq	r3, [r3, #4]
 8007fb4:	1809      	addeq	r1, r1, r0
 8007fb6:	6021      	streq	r1, [r4, #0]
 8007fb8:	e7ed      	b.n	8007f96 <_free_r+0x1e>
 8007fba:	461a      	mov	r2, r3
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	b10b      	cbz	r3, 8007fc4 <_free_r+0x4c>
 8007fc0:	42a3      	cmp	r3, r4
 8007fc2:	d9fa      	bls.n	8007fba <_free_r+0x42>
 8007fc4:	6811      	ldr	r1, [r2, #0]
 8007fc6:	1850      	adds	r0, r2, r1
 8007fc8:	42a0      	cmp	r0, r4
 8007fca:	d10b      	bne.n	8007fe4 <_free_r+0x6c>
 8007fcc:	6820      	ldr	r0, [r4, #0]
 8007fce:	4401      	add	r1, r0
 8007fd0:	1850      	adds	r0, r2, r1
 8007fd2:	4283      	cmp	r3, r0
 8007fd4:	6011      	str	r1, [r2, #0]
 8007fd6:	d1e0      	bne.n	8007f9a <_free_r+0x22>
 8007fd8:	6818      	ldr	r0, [r3, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	6053      	str	r3, [r2, #4]
 8007fde:	4408      	add	r0, r1
 8007fe0:	6010      	str	r0, [r2, #0]
 8007fe2:	e7da      	b.n	8007f9a <_free_r+0x22>
 8007fe4:	d902      	bls.n	8007fec <_free_r+0x74>
 8007fe6:	230c      	movs	r3, #12
 8007fe8:	602b      	str	r3, [r5, #0]
 8007fea:	e7d6      	b.n	8007f9a <_free_r+0x22>
 8007fec:	6820      	ldr	r0, [r4, #0]
 8007fee:	1821      	adds	r1, r4, r0
 8007ff0:	428b      	cmp	r3, r1
 8007ff2:	bf04      	itt	eq
 8007ff4:	6819      	ldreq	r1, [r3, #0]
 8007ff6:	685b      	ldreq	r3, [r3, #4]
 8007ff8:	6063      	str	r3, [r4, #4]
 8007ffa:	bf04      	itt	eq
 8007ffc:	1809      	addeq	r1, r1, r0
 8007ffe:	6021      	streq	r1, [r4, #0]
 8008000:	6054      	str	r4, [r2, #4]
 8008002:	e7ca      	b.n	8007f9a <_free_r+0x22>
 8008004:	bd38      	pop	{r3, r4, r5, pc}
 8008006:	bf00      	nop
 8008008:	20004d98 	.word	0x20004d98

0800800c <sbrk_aligned>:
 800800c:	b570      	push	{r4, r5, r6, lr}
 800800e:	4e0f      	ldr	r6, [pc, #60]	@ (800804c <sbrk_aligned+0x40>)
 8008010:	460c      	mov	r4, r1
 8008012:	6831      	ldr	r1, [r6, #0]
 8008014:	4605      	mov	r5, r0
 8008016:	b911      	cbnz	r1, 800801e <sbrk_aligned+0x12>
 8008018:	f000 fcb4 	bl	8008984 <_sbrk_r>
 800801c:	6030      	str	r0, [r6, #0]
 800801e:	4621      	mov	r1, r4
 8008020:	4628      	mov	r0, r5
 8008022:	f000 fcaf 	bl	8008984 <_sbrk_r>
 8008026:	1c43      	adds	r3, r0, #1
 8008028:	d103      	bne.n	8008032 <sbrk_aligned+0x26>
 800802a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800802e:	4620      	mov	r0, r4
 8008030:	bd70      	pop	{r4, r5, r6, pc}
 8008032:	1cc4      	adds	r4, r0, #3
 8008034:	f024 0403 	bic.w	r4, r4, #3
 8008038:	42a0      	cmp	r0, r4
 800803a:	d0f8      	beq.n	800802e <sbrk_aligned+0x22>
 800803c:	1a21      	subs	r1, r4, r0
 800803e:	4628      	mov	r0, r5
 8008040:	f000 fca0 	bl	8008984 <_sbrk_r>
 8008044:	3001      	adds	r0, #1
 8008046:	d1f2      	bne.n	800802e <sbrk_aligned+0x22>
 8008048:	e7ef      	b.n	800802a <sbrk_aligned+0x1e>
 800804a:	bf00      	nop
 800804c:	20004d94 	.word	0x20004d94

08008050 <_malloc_r>:
 8008050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008054:	1ccd      	adds	r5, r1, #3
 8008056:	f025 0503 	bic.w	r5, r5, #3
 800805a:	3508      	adds	r5, #8
 800805c:	2d0c      	cmp	r5, #12
 800805e:	bf38      	it	cc
 8008060:	250c      	movcc	r5, #12
 8008062:	2d00      	cmp	r5, #0
 8008064:	4606      	mov	r6, r0
 8008066:	db01      	blt.n	800806c <_malloc_r+0x1c>
 8008068:	42a9      	cmp	r1, r5
 800806a:	d904      	bls.n	8008076 <_malloc_r+0x26>
 800806c:	230c      	movs	r3, #12
 800806e:	6033      	str	r3, [r6, #0]
 8008070:	2000      	movs	r0, #0
 8008072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008076:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800814c <_malloc_r+0xfc>
 800807a:	f000 f869 	bl	8008150 <__malloc_lock>
 800807e:	f8d8 3000 	ldr.w	r3, [r8]
 8008082:	461c      	mov	r4, r3
 8008084:	bb44      	cbnz	r4, 80080d8 <_malloc_r+0x88>
 8008086:	4629      	mov	r1, r5
 8008088:	4630      	mov	r0, r6
 800808a:	f7ff ffbf 	bl	800800c <sbrk_aligned>
 800808e:	1c43      	adds	r3, r0, #1
 8008090:	4604      	mov	r4, r0
 8008092:	d158      	bne.n	8008146 <_malloc_r+0xf6>
 8008094:	f8d8 4000 	ldr.w	r4, [r8]
 8008098:	4627      	mov	r7, r4
 800809a:	2f00      	cmp	r7, #0
 800809c:	d143      	bne.n	8008126 <_malloc_r+0xd6>
 800809e:	2c00      	cmp	r4, #0
 80080a0:	d04b      	beq.n	800813a <_malloc_r+0xea>
 80080a2:	6823      	ldr	r3, [r4, #0]
 80080a4:	4639      	mov	r1, r7
 80080a6:	4630      	mov	r0, r6
 80080a8:	eb04 0903 	add.w	r9, r4, r3
 80080ac:	f000 fc6a 	bl	8008984 <_sbrk_r>
 80080b0:	4581      	cmp	r9, r0
 80080b2:	d142      	bne.n	800813a <_malloc_r+0xea>
 80080b4:	6821      	ldr	r1, [r4, #0]
 80080b6:	1a6d      	subs	r5, r5, r1
 80080b8:	4629      	mov	r1, r5
 80080ba:	4630      	mov	r0, r6
 80080bc:	f7ff ffa6 	bl	800800c <sbrk_aligned>
 80080c0:	3001      	adds	r0, #1
 80080c2:	d03a      	beq.n	800813a <_malloc_r+0xea>
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	442b      	add	r3, r5
 80080c8:	6023      	str	r3, [r4, #0]
 80080ca:	f8d8 3000 	ldr.w	r3, [r8]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	bb62      	cbnz	r2, 800812c <_malloc_r+0xdc>
 80080d2:	f8c8 7000 	str.w	r7, [r8]
 80080d6:	e00f      	b.n	80080f8 <_malloc_r+0xa8>
 80080d8:	6822      	ldr	r2, [r4, #0]
 80080da:	1b52      	subs	r2, r2, r5
 80080dc:	d420      	bmi.n	8008120 <_malloc_r+0xd0>
 80080de:	2a0b      	cmp	r2, #11
 80080e0:	d917      	bls.n	8008112 <_malloc_r+0xc2>
 80080e2:	1961      	adds	r1, r4, r5
 80080e4:	42a3      	cmp	r3, r4
 80080e6:	6025      	str	r5, [r4, #0]
 80080e8:	bf18      	it	ne
 80080ea:	6059      	strne	r1, [r3, #4]
 80080ec:	6863      	ldr	r3, [r4, #4]
 80080ee:	bf08      	it	eq
 80080f0:	f8c8 1000 	streq.w	r1, [r8]
 80080f4:	5162      	str	r2, [r4, r5]
 80080f6:	604b      	str	r3, [r1, #4]
 80080f8:	4630      	mov	r0, r6
 80080fa:	f000 f82f 	bl	800815c <__malloc_unlock>
 80080fe:	f104 000b 	add.w	r0, r4, #11
 8008102:	1d23      	adds	r3, r4, #4
 8008104:	f020 0007 	bic.w	r0, r0, #7
 8008108:	1ac2      	subs	r2, r0, r3
 800810a:	bf1c      	itt	ne
 800810c:	1a1b      	subne	r3, r3, r0
 800810e:	50a3      	strne	r3, [r4, r2]
 8008110:	e7af      	b.n	8008072 <_malloc_r+0x22>
 8008112:	6862      	ldr	r2, [r4, #4]
 8008114:	42a3      	cmp	r3, r4
 8008116:	bf0c      	ite	eq
 8008118:	f8c8 2000 	streq.w	r2, [r8]
 800811c:	605a      	strne	r2, [r3, #4]
 800811e:	e7eb      	b.n	80080f8 <_malloc_r+0xa8>
 8008120:	4623      	mov	r3, r4
 8008122:	6864      	ldr	r4, [r4, #4]
 8008124:	e7ae      	b.n	8008084 <_malloc_r+0x34>
 8008126:	463c      	mov	r4, r7
 8008128:	687f      	ldr	r7, [r7, #4]
 800812a:	e7b6      	b.n	800809a <_malloc_r+0x4a>
 800812c:	461a      	mov	r2, r3
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	42a3      	cmp	r3, r4
 8008132:	d1fb      	bne.n	800812c <_malloc_r+0xdc>
 8008134:	2300      	movs	r3, #0
 8008136:	6053      	str	r3, [r2, #4]
 8008138:	e7de      	b.n	80080f8 <_malloc_r+0xa8>
 800813a:	230c      	movs	r3, #12
 800813c:	6033      	str	r3, [r6, #0]
 800813e:	4630      	mov	r0, r6
 8008140:	f000 f80c 	bl	800815c <__malloc_unlock>
 8008144:	e794      	b.n	8008070 <_malloc_r+0x20>
 8008146:	6005      	str	r5, [r0, #0]
 8008148:	e7d6      	b.n	80080f8 <_malloc_r+0xa8>
 800814a:	bf00      	nop
 800814c:	20004d98 	.word	0x20004d98

08008150 <__malloc_lock>:
 8008150:	4801      	ldr	r0, [pc, #4]	@ (8008158 <__malloc_lock+0x8>)
 8008152:	f7ff bf00 	b.w	8007f56 <__retarget_lock_acquire_recursive>
 8008156:	bf00      	nop
 8008158:	20004d90 	.word	0x20004d90

0800815c <__malloc_unlock>:
 800815c:	4801      	ldr	r0, [pc, #4]	@ (8008164 <__malloc_unlock+0x8>)
 800815e:	f7ff befb 	b.w	8007f58 <__retarget_lock_release_recursive>
 8008162:	bf00      	nop
 8008164:	20004d90 	.word	0x20004d90

08008168 <__sfputc_r>:
 8008168:	6893      	ldr	r3, [r2, #8]
 800816a:	3b01      	subs	r3, #1
 800816c:	2b00      	cmp	r3, #0
 800816e:	b410      	push	{r4}
 8008170:	6093      	str	r3, [r2, #8]
 8008172:	da08      	bge.n	8008186 <__sfputc_r+0x1e>
 8008174:	6994      	ldr	r4, [r2, #24]
 8008176:	42a3      	cmp	r3, r4
 8008178:	db01      	blt.n	800817e <__sfputc_r+0x16>
 800817a:	290a      	cmp	r1, #10
 800817c:	d103      	bne.n	8008186 <__sfputc_r+0x1e>
 800817e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008182:	f000 bb6b 	b.w	800885c <__swbuf_r>
 8008186:	6813      	ldr	r3, [r2, #0]
 8008188:	1c58      	adds	r0, r3, #1
 800818a:	6010      	str	r0, [r2, #0]
 800818c:	7019      	strb	r1, [r3, #0]
 800818e:	4608      	mov	r0, r1
 8008190:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008194:	4770      	bx	lr

08008196 <__sfputs_r>:
 8008196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008198:	4606      	mov	r6, r0
 800819a:	460f      	mov	r7, r1
 800819c:	4614      	mov	r4, r2
 800819e:	18d5      	adds	r5, r2, r3
 80081a0:	42ac      	cmp	r4, r5
 80081a2:	d101      	bne.n	80081a8 <__sfputs_r+0x12>
 80081a4:	2000      	movs	r0, #0
 80081a6:	e007      	b.n	80081b8 <__sfputs_r+0x22>
 80081a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ac:	463a      	mov	r2, r7
 80081ae:	4630      	mov	r0, r6
 80081b0:	f7ff ffda 	bl	8008168 <__sfputc_r>
 80081b4:	1c43      	adds	r3, r0, #1
 80081b6:	d1f3      	bne.n	80081a0 <__sfputs_r+0xa>
 80081b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081bc <_vfiprintf_r>:
 80081bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c0:	460d      	mov	r5, r1
 80081c2:	b09d      	sub	sp, #116	@ 0x74
 80081c4:	4614      	mov	r4, r2
 80081c6:	4698      	mov	r8, r3
 80081c8:	4606      	mov	r6, r0
 80081ca:	b118      	cbz	r0, 80081d4 <_vfiprintf_r+0x18>
 80081cc:	6a03      	ldr	r3, [r0, #32]
 80081ce:	b90b      	cbnz	r3, 80081d4 <_vfiprintf_r+0x18>
 80081d0:	f7ff fd5e 	bl	8007c90 <__sinit>
 80081d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081d6:	07d9      	lsls	r1, r3, #31
 80081d8:	d405      	bmi.n	80081e6 <_vfiprintf_r+0x2a>
 80081da:	89ab      	ldrh	r3, [r5, #12]
 80081dc:	059a      	lsls	r2, r3, #22
 80081de:	d402      	bmi.n	80081e6 <_vfiprintf_r+0x2a>
 80081e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081e2:	f7ff feb8 	bl	8007f56 <__retarget_lock_acquire_recursive>
 80081e6:	89ab      	ldrh	r3, [r5, #12]
 80081e8:	071b      	lsls	r3, r3, #28
 80081ea:	d501      	bpl.n	80081f0 <_vfiprintf_r+0x34>
 80081ec:	692b      	ldr	r3, [r5, #16]
 80081ee:	b99b      	cbnz	r3, 8008218 <_vfiprintf_r+0x5c>
 80081f0:	4629      	mov	r1, r5
 80081f2:	4630      	mov	r0, r6
 80081f4:	f000 fb70 	bl	80088d8 <__swsetup_r>
 80081f8:	b170      	cbz	r0, 8008218 <_vfiprintf_r+0x5c>
 80081fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081fc:	07dc      	lsls	r4, r3, #31
 80081fe:	d504      	bpl.n	800820a <_vfiprintf_r+0x4e>
 8008200:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008204:	b01d      	add	sp, #116	@ 0x74
 8008206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820a:	89ab      	ldrh	r3, [r5, #12]
 800820c:	0598      	lsls	r0, r3, #22
 800820e:	d4f7      	bmi.n	8008200 <_vfiprintf_r+0x44>
 8008210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008212:	f7ff fea1 	bl	8007f58 <__retarget_lock_release_recursive>
 8008216:	e7f3      	b.n	8008200 <_vfiprintf_r+0x44>
 8008218:	2300      	movs	r3, #0
 800821a:	9309      	str	r3, [sp, #36]	@ 0x24
 800821c:	2320      	movs	r3, #32
 800821e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008222:	f8cd 800c 	str.w	r8, [sp, #12]
 8008226:	2330      	movs	r3, #48	@ 0x30
 8008228:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80083d8 <_vfiprintf_r+0x21c>
 800822c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008230:	f04f 0901 	mov.w	r9, #1
 8008234:	4623      	mov	r3, r4
 8008236:	469a      	mov	sl, r3
 8008238:	f813 2b01 	ldrb.w	r2, [r3], #1
 800823c:	b10a      	cbz	r2, 8008242 <_vfiprintf_r+0x86>
 800823e:	2a25      	cmp	r2, #37	@ 0x25
 8008240:	d1f9      	bne.n	8008236 <_vfiprintf_r+0x7a>
 8008242:	ebba 0b04 	subs.w	fp, sl, r4
 8008246:	d00b      	beq.n	8008260 <_vfiprintf_r+0xa4>
 8008248:	465b      	mov	r3, fp
 800824a:	4622      	mov	r2, r4
 800824c:	4629      	mov	r1, r5
 800824e:	4630      	mov	r0, r6
 8008250:	f7ff ffa1 	bl	8008196 <__sfputs_r>
 8008254:	3001      	adds	r0, #1
 8008256:	f000 80a7 	beq.w	80083a8 <_vfiprintf_r+0x1ec>
 800825a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800825c:	445a      	add	r2, fp
 800825e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008260:	f89a 3000 	ldrb.w	r3, [sl]
 8008264:	2b00      	cmp	r3, #0
 8008266:	f000 809f 	beq.w	80083a8 <_vfiprintf_r+0x1ec>
 800826a:	2300      	movs	r3, #0
 800826c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008274:	f10a 0a01 	add.w	sl, sl, #1
 8008278:	9304      	str	r3, [sp, #16]
 800827a:	9307      	str	r3, [sp, #28]
 800827c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008280:	931a      	str	r3, [sp, #104]	@ 0x68
 8008282:	4654      	mov	r4, sl
 8008284:	2205      	movs	r2, #5
 8008286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800828a:	4853      	ldr	r0, [pc, #332]	@ (80083d8 <_vfiprintf_r+0x21c>)
 800828c:	f7f7 ffa8 	bl	80001e0 <memchr>
 8008290:	9a04      	ldr	r2, [sp, #16]
 8008292:	b9d8      	cbnz	r0, 80082cc <_vfiprintf_r+0x110>
 8008294:	06d1      	lsls	r1, r2, #27
 8008296:	bf44      	itt	mi
 8008298:	2320      	movmi	r3, #32
 800829a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800829e:	0713      	lsls	r3, r2, #28
 80082a0:	bf44      	itt	mi
 80082a2:	232b      	movmi	r3, #43	@ 0x2b
 80082a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082a8:	f89a 3000 	ldrb.w	r3, [sl]
 80082ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80082ae:	d015      	beq.n	80082dc <_vfiprintf_r+0x120>
 80082b0:	9a07      	ldr	r2, [sp, #28]
 80082b2:	4654      	mov	r4, sl
 80082b4:	2000      	movs	r0, #0
 80082b6:	f04f 0c0a 	mov.w	ip, #10
 80082ba:	4621      	mov	r1, r4
 80082bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082c0:	3b30      	subs	r3, #48	@ 0x30
 80082c2:	2b09      	cmp	r3, #9
 80082c4:	d94b      	bls.n	800835e <_vfiprintf_r+0x1a2>
 80082c6:	b1b0      	cbz	r0, 80082f6 <_vfiprintf_r+0x13a>
 80082c8:	9207      	str	r2, [sp, #28]
 80082ca:	e014      	b.n	80082f6 <_vfiprintf_r+0x13a>
 80082cc:	eba0 0308 	sub.w	r3, r0, r8
 80082d0:	fa09 f303 	lsl.w	r3, r9, r3
 80082d4:	4313      	orrs	r3, r2
 80082d6:	9304      	str	r3, [sp, #16]
 80082d8:	46a2      	mov	sl, r4
 80082da:	e7d2      	b.n	8008282 <_vfiprintf_r+0xc6>
 80082dc:	9b03      	ldr	r3, [sp, #12]
 80082de:	1d19      	adds	r1, r3, #4
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	9103      	str	r1, [sp, #12]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	bfbb      	ittet	lt
 80082e8:	425b      	neglt	r3, r3
 80082ea:	f042 0202 	orrlt.w	r2, r2, #2
 80082ee:	9307      	strge	r3, [sp, #28]
 80082f0:	9307      	strlt	r3, [sp, #28]
 80082f2:	bfb8      	it	lt
 80082f4:	9204      	strlt	r2, [sp, #16]
 80082f6:	7823      	ldrb	r3, [r4, #0]
 80082f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80082fa:	d10a      	bne.n	8008312 <_vfiprintf_r+0x156>
 80082fc:	7863      	ldrb	r3, [r4, #1]
 80082fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008300:	d132      	bne.n	8008368 <_vfiprintf_r+0x1ac>
 8008302:	9b03      	ldr	r3, [sp, #12]
 8008304:	1d1a      	adds	r2, r3, #4
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	9203      	str	r2, [sp, #12]
 800830a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800830e:	3402      	adds	r4, #2
 8008310:	9305      	str	r3, [sp, #20]
 8008312:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80083e8 <_vfiprintf_r+0x22c>
 8008316:	7821      	ldrb	r1, [r4, #0]
 8008318:	2203      	movs	r2, #3
 800831a:	4650      	mov	r0, sl
 800831c:	f7f7 ff60 	bl	80001e0 <memchr>
 8008320:	b138      	cbz	r0, 8008332 <_vfiprintf_r+0x176>
 8008322:	9b04      	ldr	r3, [sp, #16]
 8008324:	eba0 000a 	sub.w	r0, r0, sl
 8008328:	2240      	movs	r2, #64	@ 0x40
 800832a:	4082      	lsls	r2, r0
 800832c:	4313      	orrs	r3, r2
 800832e:	3401      	adds	r4, #1
 8008330:	9304      	str	r3, [sp, #16]
 8008332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008336:	4829      	ldr	r0, [pc, #164]	@ (80083dc <_vfiprintf_r+0x220>)
 8008338:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800833c:	2206      	movs	r2, #6
 800833e:	f7f7 ff4f 	bl	80001e0 <memchr>
 8008342:	2800      	cmp	r0, #0
 8008344:	d03f      	beq.n	80083c6 <_vfiprintf_r+0x20a>
 8008346:	4b26      	ldr	r3, [pc, #152]	@ (80083e0 <_vfiprintf_r+0x224>)
 8008348:	bb1b      	cbnz	r3, 8008392 <_vfiprintf_r+0x1d6>
 800834a:	9b03      	ldr	r3, [sp, #12]
 800834c:	3307      	adds	r3, #7
 800834e:	f023 0307 	bic.w	r3, r3, #7
 8008352:	3308      	adds	r3, #8
 8008354:	9303      	str	r3, [sp, #12]
 8008356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008358:	443b      	add	r3, r7
 800835a:	9309      	str	r3, [sp, #36]	@ 0x24
 800835c:	e76a      	b.n	8008234 <_vfiprintf_r+0x78>
 800835e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008362:	460c      	mov	r4, r1
 8008364:	2001      	movs	r0, #1
 8008366:	e7a8      	b.n	80082ba <_vfiprintf_r+0xfe>
 8008368:	2300      	movs	r3, #0
 800836a:	3401      	adds	r4, #1
 800836c:	9305      	str	r3, [sp, #20]
 800836e:	4619      	mov	r1, r3
 8008370:	f04f 0c0a 	mov.w	ip, #10
 8008374:	4620      	mov	r0, r4
 8008376:	f810 2b01 	ldrb.w	r2, [r0], #1
 800837a:	3a30      	subs	r2, #48	@ 0x30
 800837c:	2a09      	cmp	r2, #9
 800837e:	d903      	bls.n	8008388 <_vfiprintf_r+0x1cc>
 8008380:	2b00      	cmp	r3, #0
 8008382:	d0c6      	beq.n	8008312 <_vfiprintf_r+0x156>
 8008384:	9105      	str	r1, [sp, #20]
 8008386:	e7c4      	b.n	8008312 <_vfiprintf_r+0x156>
 8008388:	fb0c 2101 	mla	r1, ip, r1, r2
 800838c:	4604      	mov	r4, r0
 800838e:	2301      	movs	r3, #1
 8008390:	e7f0      	b.n	8008374 <_vfiprintf_r+0x1b8>
 8008392:	ab03      	add	r3, sp, #12
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	462a      	mov	r2, r5
 8008398:	4b12      	ldr	r3, [pc, #72]	@ (80083e4 <_vfiprintf_r+0x228>)
 800839a:	a904      	add	r1, sp, #16
 800839c:	4630      	mov	r0, r6
 800839e:	f3af 8000 	nop.w
 80083a2:	4607      	mov	r7, r0
 80083a4:	1c78      	adds	r0, r7, #1
 80083a6:	d1d6      	bne.n	8008356 <_vfiprintf_r+0x19a>
 80083a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083aa:	07d9      	lsls	r1, r3, #31
 80083ac:	d405      	bmi.n	80083ba <_vfiprintf_r+0x1fe>
 80083ae:	89ab      	ldrh	r3, [r5, #12]
 80083b0:	059a      	lsls	r2, r3, #22
 80083b2:	d402      	bmi.n	80083ba <_vfiprintf_r+0x1fe>
 80083b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083b6:	f7ff fdcf 	bl	8007f58 <__retarget_lock_release_recursive>
 80083ba:	89ab      	ldrh	r3, [r5, #12]
 80083bc:	065b      	lsls	r3, r3, #25
 80083be:	f53f af1f 	bmi.w	8008200 <_vfiprintf_r+0x44>
 80083c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083c4:	e71e      	b.n	8008204 <_vfiprintf_r+0x48>
 80083c6:	ab03      	add	r3, sp, #12
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	462a      	mov	r2, r5
 80083cc:	4b05      	ldr	r3, [pc, #20]	@ (80083e4 <_vfiprintf_r+0x228>)
 80083ce:	a904      	add	r1, sp, #16
 80083d0:	4630      	mov	r0, r6
 80083d2:	f000 f879 	bl	80084c8 <_printf_i>
 80083d6:	e7e4      	b.n	80083a2 <_vfiprintf_r+0x1e6>
 80083d8:	08008b88 	.word	0x08008b88
 80083dc:	08008b92 	.word	0x08008b92
 80083e0:	00000000 	.word	0x00000000
 80083e4:	08008197 	.word	0x08008197
 80083e8:	08008b8e 	.word	0x08008b8e

080083ec <_printf_common>:
 80083ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f0:	4616      	mov	r6, r2
 80083f2:	4698      	mov	r8, r3
 80083f4:	688a      	ldr	r2, [r1, #8]
 80083f6:	690b      	ldr	r3, [r1, #16]
 80083f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80083fc:	4293      	cmp	r3, r2
 80083fe:	bfb8      	it	lt
 8008400:	4613      	movlt	r3, r2
 8008402:	6033      	str	r3, [r6, #0]
 8008404:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008408:	4607      	mov	r7, r0
 800840a:	460c      	mov	r4, r1
 800840c:	b10a      	cbz	r2, 8008412 <_printf_common+0x26>
 800840e:	3301      	adds	r3, #1
 8008410:	6033      	str	r3, [r6, #0]
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	0699      	lsls	r1, r3, #26
 8008416:	bf42      	ittt	mi
 8008418:	6833      	ldrmi	r3, [r6, #0]
 800841a:	3302      	addmi	r3, #2
 800841c:	6033      	strmi	r3, [r6, #0]
 800841e:	6825      	ldr	r5, [r4, #0]
 8008420:	f015 0506 	ands.w	r5, r5, #6
 8008424:	d106      	bne.n	8008434 <_printf_common+0x48>
 8008426:	f104 0a19 	add.w	sl, r4, #25
 800842a:	68e3      	ldr	r3, [r4, #12]
 800842c:	6832      	ldr	r2, [r6, #0]
 800842e:	1a9b      	subs	r3, r3, r2
 8008430:	42ab      	cmp	r3, r5
 8008432:	dc26      	bgt.n	8008482 <_printf_common+0x96>
 8008434:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008438:	6822      	ldr	r2, [r4, #0]
 800843a:	3b00      	subs	r3, #0
 800843c:	bf18      	it	ne
 800843e:	2301      	movne	r3, #1
 8008440:	0692      	lsls	r2, r2, #26
 8008442:	d42b      	bmi.n	800849c <_printf_common+0xb0>
 8008444:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008448:	4641      	mov	r1, r8
 800844a:	4638      	mov	r0, r7
 800844c:	47c8      	blx	r9
 800844e:	3001      	adds	r0, #1
 8008450:	d01e      	beq.n	8008490 <_printf_common+0xa4>
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	6922      	ldr	r2, [r4, #16]
 8008456:	f003 0306 	and.w	r3, r3, #6
 800845a:	2b04      	cmp	r3, #4
 800845c:	bf02      	ittt	eq
 800845e:	68e5      	ldreq	r5, [r4, #12]
 8008460:	6833      	ldreq	r3, [r6, #0]
 8008462:	1aed      	subeq	r5, r5, r3
 8008464:	68a3      	ldr	r3, [r4, #8]
 8008466:	bf0c      	ite	eq
 8008468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800846c:	2500      	movne	r5, #0
 800846e:	4293      	cmp	r3, r2
 8008470:	bfc4      	itt	gt
 8008472:	1a9b      	subgt	r3, r3, r2
 8008474:	18ed      	addgt	r5, r5, r3
 8008476:	2600      	movs	r6, #0
 8008478:	341a      	adds	r4, #26
 800847a:	42b5      	cmp	r5, r6
 800847c:	d11a      	bne.n	80084b4 <_printf_common+0xc8>
 800847e:	2000      	movs	r0, #0
 8008480:	e008      	b.n	8008494 <_printf_common+0xa8>
 8008482:	2301      	movs	r3, #1
 8008484:	4652      	mov	r2, sl
 8008486:	4641      	mov	r1, r8
 8008488:	4638      	mov	r0, r7
 800848a:	47c8      	blx	r9
 800848c:	3001      	adds	r0, #1
 800848e:	d103      	bne.n	8008498 <_printf_common+0xac>
 8008490:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008498:	3501      	adds	r5, #1
 800849a:	e7c6      	b.n	800842a <_printf_common+0x3e>
 800849c:	18e1      	adds	r1, r4, r3
 800849e:	1c5a      	adds	r2, r3, #1
 80084a0:	2030      	movs	r0, #48	@ 0x30
 80084a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80084a6:	4422      	add	r2, r4
 80084a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80084ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80084b0:	3302      	adds	r3, #2
 80084b2:	e7c7      	b.n	8008444 <_printf_common+0x58>
 80084b4:	2301      	movs	r3, #1
 80084b6:	4622      	mov	r2, r4
 80084b8:	4641      	mov	r1, r8
 80084ba:	4638      	mov	r0, r7
 80084bc:	47c8      	blx	r9
 80084be:	3001      	adds	r0, #1
 80084c0:	d0e6      	beq.n	8008490 <_printf_common+0xa4>
 80084c2:	3601      	adds	r6, #1
 80084c4:	e7d9      	b.n	800847a <_printf_common+0x8e>
	...

080084c8 <_printf_i>:
 80084c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084cc:	7e0f      	ldrb	r7, [r1, #24]
 80084ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80084d0:	2f78      	cmp	r7, #120	@ 0x78
 80084d2:	4691      	mov	r9, r2
 80084d4:	4680      	mov	r8, r0
 80084d6:	460c      	mov	r4, r1
 80084d8:	469a      	mov	sl, r3
 80084da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80084de:	d807      	bhi.n	80084f0 <_printf_i+0x28>
 80084e0:	2f62      	cmp	r7, #98	@ 0x62
 80084e2:	d80a      	bhi.n	80084fa <_printf_i+0x32>
 80084e4:	2f00      	cmp	r7, #0
 80084e6:	f000 80d1 	beq.w	800868c <_printf_i+0x1c4>
 80084ea:	2f58      	cmp	r7, #88	@ 0x58
 80084ec:	f000 80b8 	beq.w	8008660 <_printf_i+0x198>
 80084f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80084f8:	e03a      	b.n	8008570 <_printf_i+0xa8>
 80084fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80084fe:	2b15      	cmp	r3, #21
 8008500:	d8f6      	bhi.n	80084f0 <_printf_i+0x28>
 8008502:	a101      	add	r1, pc, #4	@ (adr r1, 8008508 <_printf_i+0x40>)
 8008504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008508:	08008561 	.word	0x08008561
 800850c:	08008575 	.word	0x08008575
 8008510:	080084f1 	.word	0x080084f1
 8008514:	080084f1 	.word	0x080084f1
 8008518:	080084f1 	.word	0x080084f1
 800851c:	080084f1 	.word	0x080084f1
 8008520:	08008575 	.word	0x08008575
 8008524:	080084f1 	.word	0x080084f1
 8008528:	080084f1 	.word	0x080084f1
 800852c:	080084f1 	.word	0x080084f1
 8008530:	080084f1 	.word	0x080084f1
 8008534:	08008673 	.word	0x08008673
 8008538:	0800859f 	.word	0x0800859f
 800853c:	0800862d 	.word	0x0800862d
 8008540:	080084f1 	.word	0x080084f1
 8008544:	080084f1 	.word	0x080084f1
 8008548:	08008695 	.word	0x08008695
 800854c:	080084f1 	.word	0x080084f1
 8008550:	0800859f 	.word	0x0800859f
 8008554:	080084f1 	.word	0x080084f1
 8008558:	080084f1 	.word	0x080084f1
 800855c:	08008635 	.word	0x08008635
 8008560:	6833      	ldr	r3, [r6, #0]
 8008562:	1d1a      	adds	r2, r3, #4
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	6032      	str	r2, [r6, #0]
 8008568:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800856c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008570:	2301      	movs	r3, #1
 8008572:	e09c      	b.n	80086ae <_printf_i+0x1e6>
 8008574:	6833      	ldr	r3, [r6, #0]
 8008576:	6820      	ldr	r0, [r4, #0]
 8008578:	1d19      	adds	r1, r3, #4
 800857a:	6031      	str	r1, [r6, #0]
 800857c:	0606      	lsls	r6, r0, #24
 800857e:	d501      	bpl.n	8008584 <_printf_i+0xbc>
 8008580:	681d      	ldr	r5, [r3, #0]
 8008582:	e003      	b.n	800858c <_printf_i+0xc4>
 8008584:	0645      	lsls	r5, r0, #25
 8008586:	d5fb      	bpl.n	8008580 <_printf_i+0xb8>
 8008588:	f9b3 5000 	ldrsh.w	r5, [r3]
 800858c:	2d00      	cmp	r5, #0
 800858e:	da03      	bge.n	8008598 <_printf_i+0xd0>
 8008590:	232d      	movs	r3, #45	@ 0x2d
 8008592:	426d      	negs	r5, r5
 8008594:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008598:	4858      	ldr	r0, [pc, #352]	@ (80086fc <_printf_i+0x234>)
 800859a:	230a      	movs	r3, #10
 800859c:	e011      	b.n	80085c2 <_printf_i+0xfa>
 800859e:	6821      	ldr	r1, [r4, #0]
 80085a0:	6833      	ldr	r3, [r6, #0]
 80085a2:	0608      	lsls	r0, r1, #24
 80085a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80085a8:	d402      	bmi.n	80085b0 <_printf_i+0xe8>
 80085aa:	0649      	lsls	r1, r1, #25
 80085ac:	bf48      	it	mi
 80085ae:	b2ad      	uxthmi	r5, r5
 80085b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80085b2:	4852      	ldr	r0, [pc, #328]	@ (80086fc <_printf_i+0x234>)
 80085b4:	6033      	str	r3, [r6, #0]
 80085b6:	bf14      	ite	ne
 80085b8:	230a      	movne	r3, #10
 80085ba:	2308      	moveq	r3, #8
 80085bc:	2100      	movs	r1, #0
 80085be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80085c2:	6866      	ldr	r6, [r4, #4]
 80085c4:	60a6      	str	r6, [r4, #8]
 80085c6:	2e00      	cmp	r6, #0
 80085c8:	db05      	blt.n	80085d6 <_printf_i+0x10e>
 80085ca:	6821      	ldr	r1, [r4, #0]
 80085cc:	432e      	orrs	r6, r5
 80085ce:	f021 0104 	bic.w	r1, r1, #4
 80085d2:	6021      	str	r1, [r4, #0]
 80085d4:	d04b      	beq.n	800866e <_printf_i+0x1a6>
 80085d6:	4616      	mov	r6, r2
 80085d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80085dc:	fb03 5711 	mls	r7, r3, r1, r5
 80085e0:	5dc7      	ldrb	r7, [r0, r7]
 80085e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085e6:	462f      	mov	r7, r5
 80085e8:	42bb      	cmp	r3, r7
 80085ea:	460d      	mov	r5, r1
 80085ec:	d9f4      	bls.n	80085d8 <_printf_i+0x110>
 80085ee:	2b08      	cmp	r3, #8
 80085f0:	d10b      	bne.n	800860a <_printf_i+0x142>
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	07df      	lsls	r7, r3, #31
 80085f6:	d508      	bpl.n	800860a <_printf_i+0x142>
 80085f8:	6923      	ldr	r3, [r4, #16]
 80085fa:	6861      	ldr	r1, [r4, #4]
 80085fc:	4299      	cmp	r1, r3
 80085fe:	bfde      	ittt	le
 8008600:	2330      	movle	r3, #48	@ 0x30
 8008602:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008606:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800860a:	1b92      	subs	r2, r2, r6
 800860c:	6122      	str	r2, [r4, #16]
 800860e:	f8cd a000 	str.w	sl, [sp]
 8008612:	464b      	mov	r3, r9
 8008614:	aa03      	add	r2, sp, #12
 8008616:	4621      	mov	r1, r4
 8008618:	4640      	mov	r0, r8
 800861a:	f7ff fee7 	bl	80083ec <_printf_common>
 800861e:	3001      	adds	r0, #1
 8008620:	d14a      	bne.n	80086b8 <_printf_i+0x1f0>
 8008622:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008626:	b004      	add	sp, #16
 8008628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800862c:	6823      	ldr	r3, [r4, #0]
 800862e:	f043 0320 	orr.w	r3, r3, #32
 8008632:	6023      	str	r3, [r4, #0]
 8008634:	4832      	ldr	r0, [pc, #200]	@ (8008700 <_printf_i+0x238>)
 8008636:	2778      	movs	r7, #120	@ 0x78
 8008638:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800863c:	6823      	ldr	r3, [r4, #0]
 800863e:	6831      	ldr	r1, [r6, #0]
 8008640:	061f      	lsls	r7, r3, #24
 8008642:	f851 5b04 	ldr.w	r5, [r1], #4
 8008646:	d402      	bmi.n	800864e <_printf_i+0x186>
 8008648:	065f      	lsls	r7, r3, #25
 800864a:	bf48      	it	mi
 800864c:	b2ad      	uxthmi	r5, r5
 800864e:	6031      	str	r1, [r6, #0]
 8008650:	07d9      	lsls	r1, r3, #31
 8008652:	bf44      	itt	mi
 8008654:	f043 0320 	orrmi.w	r3, r3, #32
 8008658:	6023      	strmi	r3, [r4, #0]
 800865a:	b11d      	cbz	r5, 8008664 <_printf_i+0x19c>
 800865c:	2310      	movs	r3, #16
 800865e:	e7ad      	b.n	80085bc <_printf_i+0xf4>
 8008660:	4826      	ldr	r0, [pc, #152]	@ (80086fc <_printf_i+0x234>)
 8008662:	e7e9      	b.n	8008638 <_printf_i+0x170>
 8008664:	6823      	ldr	r3, [r4, #0]
 8008666:	f023 0320 	bic.w	r3, r3, #32
 800866a:	6023      	str	r3, [r4, #0]
 800866c:	e7f6      	b.n	800865c <_printf_i+0x194>
 800866e:	4616      	mov	r6, r2
 8008670:	e7bd      	b.n	80085ee <_printf_i+0x126>
 8008672:	6833      	ldr	r3, [r6, #0]
 8008674:	6825      	ldr	r5, [r4, #0]
 8008676:	6961      	ldr	r1, [r4, #20]
 8008678:	1d18      	adds	r0, r3, #4
 800867a:	6030      	str	r0, [r6, #0]
 800867c:	062e      	lsls	r6, r5, #24
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	d501      	bpl.n	8008686 <_printf_i+0x1be>
 8008682:	6019      	str	r1, [r3, #0]
 8008684:	e002      	b.n	800868c <_printf_i+0x1c4>
 8008686:	0668      	lsls	r0, r5, #25
 8008688:	d5fb      	bpl.n	8008682 <_printf_i+0x1ba>
 800868a:	8019      	strh	r1, [r3, #0]
 800868c:	2300      	movs	r3, #0
 800868e:	6123      	str	r3, [r4, #16]
 8008690:	4616      	mov	r6, r2
 8008692:	e7bc      	b.n	800860e <_printf_i+0x146>
 8008694:	6833      	ldr	r3, [r6, #0]
 8008696:	1d1a      	adds	r2, r3, #4
 8008698:	6032      	str	r2, [r6, #0]
 800869a:	681e      	ldr	r6, [r3, #0]
 800869c:	6862      	ldr	r2, [r4, #4]
 800869e:	2100      	movs	r1, #0
 80086a0:	4630      	mov	r0, r6
 80086a2:	f7f7 fd9d 	bl	80001e0 <memchr>
 80086a6:	b108      	cbz	r0, 80086ac <_printf_i+0x1e4>
 80086a8:	1b80      	subs	r0, r0, r6
 80086aa:	6060      	str	r0, [r4, #4]
 80086ac:	6863      	ldr	r3, [r4, #4]
 80086ae:	6123      	str	r3, [r4, #16]
 80086b0:	2300      	movs	r3, #0
 80086b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086b6:	e7aa      	b.n	800860e <_printf_i+0x146>
 80086b8:	6923      	ldr	r3, [r4, #16]
 80086ba:	4632      	mov	r2, r6
 80086bc:	4649      	mov	r1, r9
 80086be:	4640      	mov	r0, r8
 80086c0:	47d0      	blx	sl
 80086c2:	3001      	adds	r0, #1
 80086c4:	d0ad      	beq.n	8008622 <_printf_i+0x15a>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	079b      	lsls	r3, r3, #30
 80086ca:	d413      	bmi.n	80086f4 <_printf_i+0x22c>
 80086cc:	68e0      	ldr	r0, [r4, #12]
 80086ce:	9b03      	ldr	r3, [sp, #12]
 80086d0:	4298      	cmp	r0, r3
 80086d2:	bfb8      	it	lt
 80086d4:	4618      	movlt	r0, r3
 80086d6:	e7a6      	b.n	8008626 <_printf_i+0x15e>
 80086d8:	2301      	movs	r3, #1
 80086da:	4632      	mov	r2, r6
 80086dc:	4649      	mov	r1, r9
 80086de:	4640      	mov	r0, r8
 80086e0:	47d0      	blx	sl
 80086e2:	3001      	adds	r0, #1
 80086e4:	d09d      	beq.n	8008622 <_printf_i+0x15a>
 80086e6:	3501      	adds	r5, #1
 80086e8:	68e3      	ldr	r3, [r4, #12]
 80086ea:	9903      	ldr	r1, [sp, #12]
 80086ec:	1a5b      	subs	r3, r3, r1
 80086ee:	42ab      	cmp	r3, r5
 80086f0:	dcf2      	bgt.n	80086d8 <_printf_i+0x210>
 80086f2:	e7eb      	b.n	80086cc <_printf_i+0x204>
 80086f4:	2500      	movs	r5, #0
 80086f6:	f104 0619 	add.w	r6, r4, #25
 80086fa:	e7f5      	b.n	80086e8 <_printf_i+0x220>
 80086fc:	08008b99 	.word	0x08008b99
 8008700:	08008baa 	.word	0x08008baa

08008704 <__sflush_r>:
 8008704:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800870c:	0716      	lsls	r6, r2, #28
 800870e:	4605      	mov	r5, r0
 8008710:	460c      	mov	r4, r1
 8008712:	d454      	bmi.n	80087be <__sflush_r+0xba>
 8008714:	684b      	ldr	r3, [r1, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	dc02      	bgt.n	8008720 <__sflush_r+0x1c>
 800871a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800871c:	2b00      	cmp	r3, #0
 800871e:	dd48      	ble.n	80087b2 <__sflush_r+0xae>
 8008720:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008722:	2e00      	cmp	r6, #0
 8008724:	d045      	beq.n	80087b2 <__sflush_r+0xae>
 8008726:	2300      	movs	r3, #0
 8008728:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800872c:	682f      	ldr	r7, [r5, #0]
 800872e:	6a21      	ldr	r1, [r4, #32]
 8008730:	602b      	str	r3, [r5, #0]
 8008732:	d030      	beq.n	8008796 <__sflush_r+0x92>
 8008734:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008736:	89a3      	ldrh	r3, [r4, #12]
 8008738:	0759      	lsls	r1, r3, #29
 800873a:	d505      	bpl.n	8008748 <__sflush_r+0x44>
 800873c:	6863      	ldr	r3, [r4, #4]
 800873e:	1ad2      	subs	r2, r2, r3
 8008740:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008742:	b10b      	cbz	r3, 8008748 <__sflush_r+0x44>
 8008744:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008746:	1ad2      	subs	r2, r2, r3
 8008748:	2300      	movs	r3, #0
 800874a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800874c:	6a21      	ldr	r1, [r4, #32]
 800874e:	4628      	mov	r0, r5
 8008750:	47b0      	blx	r6
 8008752:	1c43      	adds	r3, r0, #1
 8008754:	89a3      	ldrh	r3, [r4, #12]
 8008756:	d106      	bne.n	8008766 <__sflush_r+0x62>
 8008758:	6829      	ldr	r1, [r5, #0]
 800875a:	291d      	cmp	r1, #29
 800875c:	d82b      	bhi.n	80087b6 <__sflush_r+0xb2>
 800875e:	4a2a      	ldr	r2, [pc, #168]	@ (8008808 <__sflush_r+0x104>)
 8008760:	40ca      	lsrs	r2, r1
 8008762:	07d6      	lsls	r6, r2, #31
 8008764:	d527      	bpl.n	80087b6 <__sflush_r+0xb2>
 8008766:	2200      	movs	r2, #0
 8008768:	6062      	str	r2, [r4, #4]
 800876a:	04d9      	lsls	r1, r3, #19
 800876c:	6922      	ldr	r2, [r4, #16]
 800876e:	6022      	str	r2, [r4, #0]
 8008770:	d504      	bpl.n	800877c <__sflush_r+0x78>
 8008772:	1c42      	adds	r2, r0, #1
 8008774:	d101      	bne.n	800877a <__sflush_r+0x76>
 8008776:	682b      	ldr	r3, [r5, #0]
 8008778:	b903      	cbnz	r3, 800877c <__sflush_r+0x78>
 800877a:	6560      	str	r0, [r4, #84]	@ 0x54
 800877c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800877e:	602f      	str	r7, [r5, #0]
 8008780:	b1b9      	cbz	r1, 80087b2 <__sflush_r+0xae>
 8008782:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008786:	4299      	cmp	r1, r3
 8008788:	d002      	beq.n	8008790 <__sflush_r+0x8c>
 800878a:	4628      	mov	r0, r5
 800878c:	f7ff fbf4 	bl	8007f78 <_free_r>
 8008790:	2300      	movs	r3, #0
 8008792:	6363      	str	r3, [r4, #52]	@ 0x34
 8008794:	e00d      	b.n	80087b2 <__sflush_r+0xae>
 8008796:	2301      	movs	r3, #1
 8008798:	4628      	mov	r0, r5
 800879a:	47b0      	blx	r6
 800879c:	4602      	mov	r2, r0
 800879e:	1c50      	adds	r0, r2, #1
 80087a0:	d1c9      	bne.n	8008736 <__sflush_r+0x32>
 80087a2:	682b      	ldr	r3, [r5, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d0c6      	beq.n	8008736 <__sflush_r+0x32>
 80087a8:	2b1d      	cmp	r3, #29
 80087aa:	d001      	beq.n	80087b0 <__sflush_r+0xac>
 80087ac:	2b16      	cmp	r3, #22
 80087ae:	d11e      	bne.n	80087ee <__sflush_r+0xea>
 80087b0:	602f      	str	r7, [r5, #0]
 80087b2:	2000      	movs	r0, #0
 80087b4:	e022      	b.n	80087fc <__sflush_r+0xf8>
 80087b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087ba:	b21b      	sxth	r3, r3
 80087bc:	e01b      	b.n	80087f6 <__sflush_r+0xf2>
 80087be:	690f      	ldr	r7, [r1, #16]
 80087c0:	2f00      	cmp	r7, #0
 80087c2:	d0f6      	beq.n	80087b2 <__sflush_r+0xae>
 80087c4:	0793      	lsls	r3, r2, #30
 80087c6:	680e      	ldr	r6, [r1, #0]
 80087c8:	bf08      	it	eq
 80087ca:	694b      	ldreq	r3, [r1, #20]
 80087cc:	600f      	str	r7, [r1, #0]
 80087ce:	bf18      	it	ne
 80087d0:	2300      	movne	r3, #0
 80087d2:	eba6 0807 	sub.w	r8, r6, r7
 80087d6:	608b      	str	r3, [r1, #8]
 80087d8:	f1b8 0f00 	cmp.w	r8, #0
 80087dc:	dde9      	ble.n	80087b2 <__sflush_r+0xae>
 80087de:	6a21      	ldr	r1, [r4, #32]
 80087e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80087e2:	4643      	mov	r3, r8
 80087e4:	463a      	mov	r2, r7
 80087e6:	4628      	mov	r0, r5
 80087e8:	47b0      	blx	r6
 80087ea:	2800      	cmp	r0, #0
 80087ec:	dc08      	bgt.n	8008800 <__sflush_r+0xfc>
 80087ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087f6:	81a3      	strh	r3, [r4, #12]
 80087f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008800:	4407      	add	r7, r0
 8008802:	eba8 0800 	sub.w	r8, r8, r0
 8008806:	e7e7      	b.n	80087d8 <__sflush_r+0xd4>
 8008808:	20400001 	.word	0x20400001

0800880c <_fflush_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	690b      	ldr	r3, [r1, #16]
 8008810:	4605      	mov	r5, r0
 8008812:	460c      	mov	r4, r1
 8008814:	b913      	cbnz	r3, 800881c <_fflush_r+0x10>
 8008816:	2500      	movs	r5, #0
 8008818:	4628      	mov	r0, r5
 800881a:	bd38      	pop	{r3, r4, r5, pc}
 800881c:	b118      	cbz	r0, 8008826 <_fflush_r+0x1a>
 800881e:	6a03      	ldr	r3, [r0, #32]
 8008820:	b90b      	cbnz	r3, 8008826 <_fflush_r+0x1a>
 8008822:	f7ff fa35 	bl	8007c90 <__sinit>
 8008826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d0f3      	beq.n	8008816 <_fflush_r+0xa>
 800882e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008830:	07d0      	lsls	r0, r2, #31
 8008832:	d404      	bmi.n	800883e <_fflush_r+0x32>
 8008834:	0599      	lsls	r1, r3, #22
 8008836:	d402      	bmi.n	800883e <_fflush_r+0x32>
 8008838:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800883a:	f7ff fb8c 	bl	8007f56 <__retarget_lock_acquire_recursive>
 800883e:	4628      	mov	r0, r5
 8008840:	4621      	mov	r1, r4
 8008842:	f7ff ff5f 	bl	8008704 <__sflush_r>
 8008846:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008848:	07da      	lsls	r2, r3, #31
 800884a:	4605      	mov	r5, r0
 800884c:	d4e4      	bmi.n	8008818 <_fflush_r+0xc>
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	059b      	lsls	r3, r3, #22
 8008852:	d4e1      	bmi.n	8008818 <_fflush_r+0xc>
 8008854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008856:	f7ff fb7f 	bl	8007f58 <__retarget_lock_release_recursive>
 800885a:	e7dd      	b.n	8008818 <_fflush_r+0xc>

0800885c <__swbuf_r>:
 800885c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885e:	460e      	mov	r6, r1
 8008860:	4614      	mov	r4, r2
 8008862:	4605      	mov	r5, r0
 8008864:	b118      	cbz	r0, 800886e <__swbuf_r+0x12>
 8008866:	6a03      	ldr	r3, [r0, #32]
 8008868:	b90b      	cbnz	r3, 800886e <__swbuf_r+0x12>
 800886a:	f7ff fa11 	bl	8007c90 <__sinit>
 800886e:	69a3      	ldr	r3, [r4, #24]
 8008870:	60a3      	str	r3, [r4, #8]
 8008872:	89a3      	ldrh	r3, [r4, #12]
 8008874:	071a      	lsls	r2, r3, #28
 8008876:	d501      	bpl.n	800887c <__swbuf_r+0x20>
 8008878:	6923      	ldr	r3, [r4, #16]
 800887a:	b943      	cbnz	r3, 800888e <__swbuf_r+0x32>
 800887c:	4621      	mov	r1, r4
 800887e:	4628      	mov	r0, r5
 8008880:	f000 f82a 	bl	80088d8 <__swsetup_r>
 8008884:	b118      	cbz	r0, 800888e <__swbuf_r+0x32>
 8008886:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800888a:	4638      	mov	r0, r7
 800888c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800888e:	6823      	ldr	r3, [r4, #0]
 8008890:	6922      	ldr	r2, [r4, #16]
 8008892:	1a98      	subs	r0, r3, r2
 8008894:	6963      	ldr	r3, [r4, #20]
 8008896:	b2f6      	uxtb	r6, r6
 8008898:	4283      	cmp	r3, r0
 800889a:	4637      	mov	r7, r6
 800889c:	dc05      	bgt.n	80088aa <__swbuf_r+0x4e>
 800889e:	4621      	mov	r1, r4
 80088a0:	4628      	mov	r0, r5
 80088a2:	f7ff ffb3 	bl	800880c <_fflush_r>
 80088a6:	2800      	cmp	r0, #0
 80088a8:	d1ed      	bne.n	8008886 <__swbuf_r+0x2a>
 80088aa:	68a3      	ldr	r3, [r4, #8]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	60a3      	str	r3, [r4, #8]
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	1c5a      	adds	r2, r3, #1
 80088b4:	6022      	str	r2, [r4, #0]
 80088b6:	701e      	strb	r6, [r3, #0]
 80088b8:	6962      	ldr	r2, [r4, #20]
 80088ba:	1c43      	adds	r3, r0, #1
 80088bc:	429a      	cmp	r2, r3
 80088be:	d004      	beq.n	80088ca <__swbuf_r+0x6e>
 80088c0:	89a3      	ldrh	r3, [r4, #12]
 80088c2:	07db      	lsls	r3, r3, #31
 80088c4:	d5e1      	bpl.n	800888a <__swbuf_r+0x2e>
 80088c6:	2e0a      	cmp	r6, #10
 80088c8:	d1df      	bne.n	800888a <__swbuf_r+0x2e>
 80088ca:	4621      	mov	r1, r4
 80088cc:	4628      	mov	r0, r5
 80088ce:	f7ff ff9d 	bl	800880c <_fflush_r>
 80088d2:	2800      	cmp	r0, #0
 80088d4:	d0d9      	beq.n	800888a <__swbuf_r+0x2e>
 80088d6:	e7d6      	b.n	8008886 <__swbuf_r+0x2a>

080088d8 <__swsetup_r>:
 80088d8:	b538      	push	{r3, r4, r5, lr}
 80088da:	4b29      	ldr	r3, [pc, #164]	@ (8008980 <__swsetup_r+0xa8>)
 80088dc:	4605      	mov	r5, r0
 80088de:	6818      	ldr	r0, [r3, #0]
 80088e0:	460c      	mov	r4, r1
 80088e2:	b118      	cbz	r0, 80088ec <__swsetup_r+0x14>
 80088e4:	6a03      	ldr	r3, [r0, #32]
 80088e6:	b90b      	cbnz	r3, 80088ec <__swsetup_r+0x14>
 80088e8:	f7ff f9d2 	bl	8007c90 <__sinit>
 80088ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088f0:	0719      	lsls	r1, r3, #28
 80088f2:	d422      	bmi.n	800893a <__swsetup_r+0x62>
 80088f4:	06da      	lsls	r2, r3, #27
 80088f6:	d407      	bmi.n	8008908 <__swsetup_r+0x30>
 80088f8:	2209      	movs	r2, #9
 80088fa:	602a      	str	r2, [r5, #0]
 80088fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008900:	81a3      	strh	r3, [r4, #12]
 8008902:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008906:	e033      	b.n	8008970 <__swsetup_r+0x98>
 8008908:	0758      	lsls	r0, r3, #29
 800890a:	d512      	bpl.n	8008932 <__swsetup_r+0x5a>
 800890c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800890e:	b141      	cbz	r1, 8008922 <__swsetup_r+0x4a>
 8008910:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008914:	4299      	cmp	r1, r3
 8008916:	d002      	beq.n	800891e <__swsetup_r+0x46>
 8008918:	4628      	mov	r0, r5
 800891a:	f7ff fb2d 	bl	8007f78 <_free_r>
 800891e:	2300      	movs	r3, #0
 8008920:	6363      	str	r3, [r4, #52]	@ 0x34
 8008922:	89a3      	ldrh	r3, [r4, #12]
 8008924:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008928:	81a3      	strh	r3, [r4, #12]
 800892a:	2300      	movs	r3, #0
 800892c:	6063      	str	r3, [r4, #4]
 800892e:	6923      	ldr	r3, [r4, #16]
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	89a3      	ldrh	r3, [r4, #12]
 8008934:	f043 0308 	orr.w	r3, r3, #8
 8008938:	81a3      	strh	r3, [r4, #12]
 800893a:	6923      	ldr	r3, [r4, #16]
 800893c:	b94b      	cbnz	r3, 8008952 <__swsetup_r+0x7a>
 800893e:	89a3      	ldrh	r3, [r4, #12]
 8008940:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008948:	d003      	beq.n	8008952 <__swsetup_r+0x7a>
 800894a:	4621      	mov	r1, r4
 800894c:	4628      	mov	r0, r5
 800894e:	f000 f84f 	bl	80089f0 <__smakebuf_r>
 8008952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008956:	f013 0201 	ands.w	r2, r3, #1
 800895a:	d00a      	beq.n	8008972 <__swsetup_r+0x9a>
 800895c:	2200      	movs	r2, #0
 800895e:	60a2      	str	r2, [r4, #8]
 8008960:	6962      	ldr	r2, [r4, #20]
 8008962:	4252      	negs	r2, r2
 8008964:	61a2      	str	r2, [r4, #24]
 8008966:	6922      	ldr	r2, [r4, #16]
 8008968:	b942      	cbnz	r2, 800897c <__swsetup_r+0xa4>
 800896a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800896e:	d1c5      	bne.n	80088fc <__swsetup_r+0x24>
 8008970:	bd38      	pop	{r3, r4, r5, pc}
 8008972:	0799      	lsls	r1, r3, #30
 8008974:	bf58      	it	pl
 8008976:	6962      	ldrpl	r2, [r4, #20]
 8008978:	60a2      	str	r2, [r4, #8]
 800897a:	e7f4      	b.n	8008966 <__swsetup_r+0x8e>
 800897c:	2000      	movs	r0, #0
 800897e:	e7f7      	b.n	8008970 <__swsetup_r+0x98>
 8008980:	2000001c 	.word	0x2000001c

08008984 <_sbrk_r>:
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	4d06      	ldr	r5, [pc, #24]	@ (80089a0 <_sbrk_r+0x1c>)
 8008988:	2300      	movs	r3, #0
 800898a:	4604      	mov	r4, r0
 800898c:	4608      	mov	r0, r1
 800898e:	602b      	str	r3, [r5, #0]
 8008990:	f7f8 fbc8 	bl	8001124 <_sbrk>
 8008994:	1c43      	adds	r3, r0, #1
 8008996:	d102      	bne.n	800899e <_sbrk_r+0x1a>
 8008998:	682b      	ldr	r3, [r5, #0]
 800899a:	b103      	cbz	r3, 800899e <_sbrk_r+0x1a>
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	bd38      	pop	{r3, r4, r5, pc}
 80089a0:	20004d8c 	.word	0x20004d8c

080089a4 <__swhatbuf_r>:
 80089a4:	b570      	push	{r4, r5, r6, lr}
 80089a6:	460c      	mov	r4, r1
 80089a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ac:	2900      	cmp	r1, #0
 80089ae:	b096      	sub	sp, #88	@ 0x58
 80089b0:	4615      	mov	r5, r2
 80089b2:	461e      	mov	r6, r3
 80089b4:	da0d      	bge.n	80089d2 <__swhatbuf_r+0x2e>
 80089b6:	89a3      	ldrh	r3, [r4, #12]
 80089b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089bc:	f04f 0100 	mov.w	r1, #0
 80089c0:	bf14      	ite	ne
 80089c2:	2340      	movne	r3, #64	@ 0x40
 80089c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089c8:	2000      	movs	r0, #0
 80089ca:	6031      	str	r1, [r6, #0]
 80089cc:	602b      	str	r3, [r5, #0]
 80089ce:	b016      	add	sp, #88	@ 0x58
 80089d0:	bd70      	pop	{r4, r5, r6, pc}
 80089d2:	466a      	mov	r2, sp
 80089d4:	f000 f848 	bl	8008a68 <_fstat_r>
 80089d8:	2800      	cmp	r0, #0
 80089da:	dbec      	blt.n	80089b6 <__swhatbuf_r+0x12>
 80089dc:	9901      	ldr	r1, [sp, #4]
 80089de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089e6:	4259      	negs	r1, r3
 80089e8:	4159      	adcs	r1, r3
 80089ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089ee:	e7eb      	b.n	80089c8 <__swhatbuf_r+0x24>

080089f0 <__smakebuf_r>:
 80089f0:	898b      	ldrh	r3, [r1, #12]
 80089f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089f4:	079d      	lsls	r5, r3, #30
 80089f6:	4606      	mov	r6, r0
 80089f8:	460c      	mov	r4, r1
 80089fa:	d507      	bpl.n	8008a0c <__smakebuf_r+0x1c>
 80089fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a00:	6023      	str	r3, [r4, #0]
 8008a02:	6123      	str	r3, [r4, #16]
 8008a04:	2301      	movs	r3, #1
 8008a06:	6163      	str	r3, [r4, #20]
 8008a08:	b003      	add	sp, #12
 8008a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a0c:	ab01      	add	r3, sp, #4
 8008a0e:	466a      	mov	r2, sp
 8008a10:	f7ff ffc8 	bl	80089a4 <__swhatbuf_r>
 8008a14:	9f00      	ldr	r7, [sp, #0]
 8008a16:	4605      	mov	r5, r0
 8008a18:	4639      	mov	r1, r7
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f7ff fb18 	bl	8008050 <_malloc_r>
 8008a20:	b948      	cbnz	r0, 8008a36 <__smakebuf_r+0x46>
 8008a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a26:	059a      	lsls	r2, r3, #22
 8008a28:	d4ee      	bmi.n	8008a08 <__smakebuf_r+0x18>
 8008a2a:	f023 0303 	bic.w	r3, r3, #3
 8008a2e:	f043 0302 	orr.w	r3, r3, #2
 8008a32:	81a3      	strh	r3, [r4, #12]
 8008a34:	e7e2      	b.n	80089fc <__smakebuf_r+0xc>
 8008a36:	89a3      	ldrh	r3, [r4, #12]
 8008a38:	6020      	str	r0, [r4, #0]
 8008a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a3e:	81a3      	strh	r3, [r4, #12]
 8008a40:	9b01      	ldr	r3, [sp, #4]
 8008a42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a46:	b15b      	cbz	r3, 8008a60 <__smakebuf_r+0x70>
 8008a48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	f000 f81d 	bl	8008a8c <_isatty_r>
 8008a52:	b128      	cbz	r0, 8008a60 <__smakebuf_r+0x70>
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	f023 0303 	bic.w	r3, r3, #3
 8008a5a:	f043 0301 	orr.w	r3, r3, #1
 8008a5e:	81a3      	strh	r3, [r4, #12]
 8008a60:	89a3      	ldrh	r3, [r4, #12]
 8008a62:	431d      	orrs	r5, r3
 8008a64:	81a5      	strh	r5, [r4, #12]
 8008a66:	e7cf      	b.n	8008a08 <__smakebuf_r+0x18>

08008a68 <_fstat_r>:
 8008a68:	b538      	push	{r3, r4, r5, lr}
 8008a6a:	4d07      	ldr	r5, [pc, #28]	@ (8008a88 <_fstat_r+0x20>)
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	4604      	mov	r4, r0
 8008a70:	4608      	mov	r0, r1
 8008a72:	4611      	mov	r1, r2
 8008a74:	602b      	str	r3, [r5, #0]
 8008a76:	f7f8 fb2c 	bl	80010d2 <_fstat>
 8008a7a:	1c43      	adds	r3, r0, #1
 8008a7c:	d102      	bne.n	8008a84 <_fstat_r+0x1c>
 8008a7e:	682b      	ldr	r3, [r5, #0]
 8008a80:	b103      	cbz	r3, 8008a84 <_fstat_r+0x1c>
 8008a82:	6023      	str	r3, [r4, #0]
 8008a84:	bd38      	pop	{r3, r4, r5, pc}
 8008a86:	bf00      	nop
 8008a88:	20004d8c 	.word	0x20004d8c

08008a8c <_isatty_r>:
 8008a8c:	b538      	push	{r3, r4, r5, lr}
 8008a8e:	4d06      	ldr	r5, [pc, #24]	@ (8008aa8 <_isatty_r+0x1c>)
 8008a90:	2300      	movs	r3, #0
 8008a92:	4604      	mov	r4, r0
 8008a94:	4608      	mov	r0, r1
 8008a96:	602b      	str	r3, [r5, #0]
 8008a98:	f7f8 fb2b 	bl	80010f2 <_isatty>
 8008a9c:	1c43      	adds	r3, r0, #1
 8008a9e:	d102      	bne.n	8008aa6 <_isatty_r+0x1a>
 8008aa0:	682b      	ldr	r3, [r5, #0]
 8008aa2:	b103      	cbz	r3, 8008aa6 <_isatty_r+0x1a>
 8008aa4:	6023      	str	r3, [r4, #0]
 8008aa6:	bd38      	pop	{r3, r4, r5, pc}
 8008aa8:	20004d8c 	.word	0x20004d8c

08008aac <_init>:
 8008aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aae:	bf00      	nop
 8008ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ab2:	bc08      	pop	{r3}
 8008ab4:	469e      	mov	lr, r3
 8008ab6:	4770      	bx	lr

08008ab8 <_fini>:
 8008ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aba:	bf00      	nop
 8008abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008abe:	bc08      	pop	{r3}
 8008ac0:	469e      	mov	lr, r3
 8008ac2:	4770      	bx	lr
