
Project_Test_VEHICLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08008b84  08008b84  00009b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cf4  08008cf4  0000a06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008cf4  08008cf4  00009cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cfc  08008cfc  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cfc  08008cfc  00009cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d00  08008d00  00009d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008d04  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d38  2000006c  08008d70  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004da4  08008d70  0000ada4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b578  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000405d  00000000  00000000  00025614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  00029678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001166  00000000  00000000  0002ad10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a440  00000000  00000000  0002be76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019481  00000000  00000000  000462b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009afc7  00000000  00000000  0005f737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa6fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006468  00000000  00000000  000fa744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00100bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008b6c 	.word	0x08008b6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08008b6c 	.word	0x08008b6c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <delay_us>:

volatile uint8_t delay_done = 1;


void delay_us(uint16_t us)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim11, 0);
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <delay_us+0x30>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2200      	movs	r2, #0
 80005bc:	625a      	str	r2, [r3, #36]	@ 0x24
  while((__HAL_TIM_GET_COUNTER(&htim11)) < us);
 80005be:	bf00      	nop
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <delay_us+0x30>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d3f9      	bcc.n	80005c0 <delay_us+0x14>
}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000194 	.word	0x20000194

080005e0 <__io_putchar>:
/** @brief Retargets the C library printf function to the USART.
 *  @param None
 *  @retval None
 */
PUTCHAR_PROTOTYPE
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop
     until the end of transmission */
  if(ch == '\n')
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b0a      	cmp	r3, #10
 80005ec:	d106      	bne.n	80005fc <__io_putchar+0x1c>
    HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 80005ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005f2:	2201      	movs	r2, #1
 80005f4:	4907      	ldr	r1, [pc, #28]	@ (8000614 <__io_putchar+0x34>)
 80005f6:	4808      	ldr	r0, [pc, #32]	@ (8000618 <__io_putchar+0x38>)
 80005f8:	f003 fd10 	bl	800401c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 80005fc:	1d39      	adds	r1, r7, #4
 80005fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000602:	2201      	movs	r2, #1
 8000604:	4804      	ldr	r0, [pc, #16]	@ (8000618 <__io_putchar+0x38>)
 8000606:	f003 fd09 	bl	800401c <HAL_UART_Transmit>
}
 800060a:	bf00      	nop
 800060c:	4618      	mov	r0, r3
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	08008b84 	.word	0x08008b84
 8000618:	20000224 	.word	0x20000224

0800061c <HAL_UART_RxCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
//  if (huart->Instance == USART2)
//  {
  HAL_UART_Receive_IT(&huart2, &rx_data, sizeof(rx_data));  // 다음 수신 준비 // 디버그용
 8000624:	2201      	movs	r2, #1
 8000626:	493f      	ldr	r1, [pc, #252]	@ (8000724 <HAL_UART_RxCpltCallback+0x108>)
 8000628:	483f      	ldr	r0, [pc, #252]	@ (8000728 <HAL_UART_RxCpltCallback+0x10c>)
 800062a:	f003 fd82 	bl	8004132 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &rx_data, sizeof(rx_data));  // 블루투스
 800062e:	2201      	movs	r2, #1
 8000630:	493c      	ldr	r1, [pc, #240]	@ (8000724 <HAL_UART_RxCpltCallback+0x108>)
 8000632:	483e      	ldr	r0, [pc, #248]	@ (800072c <HAL_UART_RxCpltCallback+0x110>)
 8000634:	f003 fd7d 	bl	8004132 <HAL_UART_Receive_IT>
    switch (rx_data)
 8000638:	4b3a      	ldr	r3, [pc, #232]	@ (8000724 <HAL_UART_RxCpltCallback+0x108>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	3b42      	subs	r3, #66	@ 0x42
 800063e:	2b16      	cmp	r3, #22
 8000640:	d86c      	bhi.n	800071c <HAL_UART_RxCpltCallback+0x100>
 8000642:	a201      	add	r2, pc, #4	@ (adr r2, 8000648 <HAL_UART_RxCpltCallback+0x2c>)
 8000644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000648:	080006bf 	.word	0x080006bf
 800064c:	0800071d 	.word	0x0800071d
 8000650:	0800071d 	.word	0x0800071d
 8000654:	0800071d 	.word	0x0800071d
 8000658:	080006a5 	.word	0x080006a5
 800065c:	0800071d 	.word	0x0800071d
 8000660:	0800071d 	.word	0x0800071d
 8000664:	0800071d 	.word	0x0800071d
 8000668:	0800071d 	.word	0x0800071d
 800066c:	0800071d 	.word	0x0800071d
 8000670:	080006d9 	.word	0x080006d9
 8000674:	0800071d 	.word	0x0800071d
 8000678:	0800071d 	.word	0x0800071d
 800067c:	0800071d 	.word	0x0800071d
 8000680:	0800071d 	.word	0x0800071d
 8000684:	0800071d 	.word	0x0800071d
 8000688:	080006f1 	.word	0x080006f1
 800068c:	08000713 	.word	0x08000713
 8000690:	0800071d 	.word	0x0800071d
 8000694:	0800071d 	.word	0x0800071d
 8000698:	0800071d 	.word	0x0800071d
 800069c:	0800071d 	.word	0x0800071d
 80006a0:	08000709 	.word	0x08000709
    {
      case 'F':
        L_Motor_Forward();
 80006a4:	f000 fbb4 	bl	8000e10 <L_Motor_Forward>
        R_Motor_Forward();
 80006a8:	f000 fbd2 	bl	8000e50 <R_Motor_Forward>
        Set_L_Motor_PWM(700);
 80006ac:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80006b0:	f000 fbf2 	bl	8000e98 <Set_L_Motor_PWM>
        Set_R_Motor_PWM(700);
 80006b4:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80006b8:	f000 fbfe 	bl	8000eb8 <Set_R_Motor_PWM>
        break;
 80006bc:	e02e      	b.n	800071c <HAL_UART_RxCpltCallback+0x100>
      case 'B':
        L_Motor_Backward();
 80006be:	f000 fbb7 	bl	8000e30 <L_Motor_Backward>
        R_Motor_Backward();
 80006c2:	f000 fbd7 	bl	8000e74 <R_Motor_Backward>
        Set_L_Motor_PWM(700);
 80006c6:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80006ca:	f000 fbe5 	bl	8000e98 <Set_L_Motor_PWM>
        Set_R_Motor_PWM(700);
 80006ce:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80006d2:	f000 fbf1 	bl	8000eb8 <Set_R_Motor_PWM>
        break;
 80006d6:	e021      	b.n	800071c <HAL_UART_RxCpltCallback+0x100>
      case 'L':
        L_Motor_Backward();
 80006d8:	f000 fbaa 	bl	8000e30 <L_Motor_Backward>
        R_Motor_Forward();
 80006dc:	f000 fbb8 	bl	8000e50 <R_Motor_Forward>
        Set_L_Motor_PWM(200);
 80006e0:	20c8      	movs	r0, #200	@ 0xc8
 80006e2:	f000 fbd9 	bl	8000e98 <Set_L_Motor_PWM>
        Set_R_Motor_PWM(600);
 80006e6:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80006ea:	f000 fbe5 	bl	8000eb8 <Set_R_Motor_PWM>
        break;
 80006ee:	e015      	b.n	800071c <HAL_UART_RxCpltCallback+0x100>
      case 'R':
        L_Motor_Forward();
 80006f0:	f000 fb8e 	bl	8000e10 <L_Motor_Forward>
        R_Motor_Backward();
 80006f4:	f000 fbbe 	bl	8000e74 <R_Motor_Backward>
        Set_L_Motor_PWM(600);
 80006f8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80006fc:	f000 fbcc 	bl	8000e98 <Set_L_Motor_PWM>
        Set_R_Motor_PWM(200);
 8000700:	20c8      	movs	r0, #200	@ 0xc8
 8000702:	f000 fbd9 	bl	8000eb8 <Set_R_Motor_PWM>
        break;
 8000706:	e009      	b.n	800071c <HAL_UART_RxCpltCallback+0x100>
      case 'X':
        L_Motor_Stop();
 8000708:	f000 fbe6 	bl	8000ed8 <L_Motor_Stop>
        R_Motor_Stop();
 800070c:	f000 fbf8 	bl	8000f00 <R_Motor_Stop>
        break;
 8000710:	e004      	b.n	800071c <HAL_UART_RxCpltCallback+0x100>
      case 'S':
        L_Motor_Stop();
 8000712:	f000 fbe1 	bl	8000ed8 <L_Motor_Stop>
        R_Motor_Stop();
 8000716:	f000 fbf3 	bl	8000f00 <R_Motor_Stop>
        break;
 800071a:	bf00      	nop
    }


//  }
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000088 	.word	0x20000088
 8000728:	20000224 	.word	0x20000224
 800072c:	200001dc 	.word	0x200001dc

08000730 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) // RIGHT
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	7f1b      	ldrb	r3, [r3, #28]
 800073c:	2b02      	cmp	r3, #2
 800073e:	d171      	bne.n	8000824 <HAL_TIM_IC_CaptureCallback+0xf4>
  {
    if(captureFlag_R == 0)  // 아직 캡처를 안했다면
 8000740:	4b86      	ldr	r3, [pc, #536]	@ (800095c <HAL_TIM_IC_CaptureCallback+0x22c>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d11b      	bne.n	8000780 <HAL_TIM_IC_CaptureCallback+0x50>
    {
      IC_Value1_R = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8000748:	2104      	movs	r1, #4
 800074a:	4885      	ldr	r0, [pc, #532]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 800074c:	f002 ff42 	bl	80035d4 <HAL_TIM_ReadCapturedValue>
 8000750:	4603      	mov	r3, r0
 8000752:	b29a      	uxth	r2, r3
 8000754:	4b83      	ldr	r3, [pc, #524]	@ (8000964 <HAL_TIM_IC_CaptureCallback+0x234>)
 8000756:	801a      	strh	r2, [r3, #0]
      captureFlag_R = 1;    // 캡처 했음 !!!
 8000758:	4b80      	ldr	r3, [pc, #512]	@ (800095c <HAL_TIM_IC_CaptureCallback+0x22c>)
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]
      // 캡처에 대한 극성을 라이징에서 폴링으로 바꿈
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800075e:	4b80      	ldr	r3, [pc, #512]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	6a1a      	ldr	r2, [r3, #32]
 8000764:	4b7e      	ldr	r3, [pc, #504]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800076c:	621a      	str	r2, [r3, #32]
 800076e:	4b7c      	ldr	r3, [pc, #496]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	6a1a      	ldr	r2, [r3, #32]
 8000774:	4b7a      	ldr	r3, [pc, #488]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f042 0220 	orr.w	r2, r2, #32
 800077c:	621a      	str	r2, [r3, #32]
 800077e:	e051      	b.n	8000824 <HAL_TIM_IC_CaptureCallback+0xf4>
    }
    else if(captureFlag_R == 1) // 캡처를 했다면
 8000780:	4b76      	ldr	r3, [pc, #472]	@ (800095c <HAL_TIM_IC_CaptureCallback+0x22c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d14d      	bne.n	8000824 <HAL_TIM_IC_CaptureCallback+0xf4>
    {
      IC_Value2_R = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8000788:	2104      	movs	r1, #4
 800078a:	4875      	ldr	r0, [pc, #468]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 800078c:	f002 ff22 	bl	80035d4 <HAL_TIM_ReadCapturedValue>
 8000790:	4603      	mov	r3, r0
 8000792:	b29a      	uxth	r2, r3
 8000794:	4b74      	ldr	r3, [pc, #464]	@ (8000968 <HAL_TIM_IC_CaptureCallback+0x238>)
 8000796:	801a      	strh	r2, [r3, #0]
      __HAL_TIM_SET_COUNTER(&htim4, 0);
 8000798:	4b71      	ldr	r3, [pc, #452]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2200      	movs	r2, #0
 800079e:	625a      	str	r2, [r3, #36]	@ 0x24

      if(IC_Value2_R > IC_Value1_R)
 80007a0:	4b71      	ldr	r3, [pc, #452]	@ (8000968 <HAL_TIM_IC_CaptureCallback+0x238>)
 80007a2:	881a      	ldrh	r2, [r3, #0]
 80007a4:	4b6f      	ldr	r3, [pc, #444]	@ (8000964 <HAL_TIM_IC_CaptureCallback+0x234>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d908      	bls.n	80007be <HAL_TIM_IC_CaptureCallback+0x8e>
      {
        echoTime_R = IC_Value2_R - IC_Value1_R;
 80007ac:	4b6e      	ldr	r3, [pc, #440]	@ (8000968 <HAL_TIM_IC_CaptureCallback+0x238>)
 80007ae:	881a      	ldrh	r2, [r3, #0]
 80007b0:	4b6c      	ldr	r3, [pc, #432]	@ (8000964 <HAL_TIM_IC_CaptureCallback+0x234>)
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	4b6c      	ldr	r3, [pc, #432]	@ (800096c <HAL_TIM_IC_CaptureCallback+0x23c>)
 80007ba:	801a      	strh	r2, [r3, #0]
 80007bc:	e00f      	b.n	80007de <HAL_TIM_IC_CaptureCallback+0xae>
      }
      else if(IC_Value1_R > IC_Value2_R)
 80007be:	4b69      	ldr	r3, [pc, #420]	@ (8000964 <HAL_TIM_IC_CaptureCallback+0x234>)
 80007c0:	881a      	ldrh	r2, [r3, #0]
 80007c2:	4b69      	ldr	r3, [pc, #420]	@ (8000968 <HAL_TIM_IC_CaptureCallback+0x238>)
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d909      	bls.n	80007de <HAL_TIM_IC_CaptureCallback+0xae>
      {
        echoTime_R = (0xffff - IC_Value1_R) + IC_Value2_R;
 80007ca:	4b67      	ldr	r3, [pc, #412]	@ (8000968 <HAL_TIM_IC_CaptureCallback+0x238>)
 80007cc:	881a      	ldrh	r2, [r3, #0]
 80007ce:	4b65      	ldr	r3, [pc, #404]	@ (8000964 <HAL_TIM_IC_CaptureCallback+0x234>)
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	1ad3      	subs	r3, r2, r3
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	3b01      	subs	r3, #1
 80007d8:	b29a      	uxth	r2, r3
 80007da:	4b64      	ldr	r3, [pc, #400]	@ (800096c <HAL_TIM_IC_CaptureCallback+0x23c>)
 80007dc:	801a      	strh	r2, [r3, #0]
      }
      distance_R = echoTime_R / 58;
 80007de:	4b63      	ldr	r3, [pc, #396]	@ (800096c <HAL_TIM_IC_CaptureCallback+0x23c>)
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	4a63      	ldr	r2, [pc, #396]	@ (8000970 <HAL_TIM_IC_CaptureCallback+0x240>)
 80007e4:	fba2 2303 	umull	r2, r3, r2, r3
 80007e8:	095b      	lsrs	r3, r3, #5
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4b61      	ldr	r3, [pc, #388]	@ (8000974 <HAL_TIM_IC_CaptureCallback+0x244>)
 80007f0:	701a      	strb	r2, [r3, #0]
      captureFlag_R = 0;
 80007f2:	4b5a      	ldr	r3, [pc, #360]	@ (800095c <HAL_TIM_IC_CaptureCallback+0x22c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80007f8:	4b59      	ldr	r3, [pc, #356]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	6a1a      	ldr	r2, [r3, #32]
 80007fe:	4b58      	ldr	r3, [pc, #352]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8000806:	621a      	str	r2, [r3, #32]
 8000808:	4b55      	ldr	r3, [pc, #340]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4b54      	ldr	r3, [pc, #336]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	6a12      	ldr	r2, [r2, #32]
 8000812:	621a      	str	r2, [r3, #32]
      __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC2);
 8000814:	4b52      	ldr	r3, [pc, #328]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	68da      	ldr	r2, [r3, #12]
 800081a:	4b51      	ldr	r3, [pc, #324]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f022 0204 	bic.w	r2, r2, #4
 8000822:	60da      	str	r2, [r3, #12]
    }
  }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // LEFT
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	7f1b      	ldrb	r3, [r3, #28]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d171      	bne.n	8000910 <HAL_TIM_IC_CaptureCallback+0x1e0>
  {
    if(captureFlag_L == 0)  // 아직 캡처를 안했다면
 800082c:	4b52      	ldr	r3, [pc, #328]	@ (8000978 <HAL_TIM_IC_CaptureCallback+0x248>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d11b      	bne.n	800086c <HAL_TIM_IC_CaptureCallback+0x13c>
    {
      IC_Value1_L = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8000834:	2100      	movs	r1, #0
 8000836:	484a      	ldr	r0, [pc, #296]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 8000838:	f002 fecc 	bl	80035d4 <HAL_TIM_ReadCapturedValue>
 800083c:	4603      	mov	r3, r0
 800083e:	b29a      	uxth	r2, r3
 8000840:	4b4e      	ldr	r3, [pc, #312]	@ (800097c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000842:	801a      	strh	r2, [r3, #0]
      captureFlag_L = 1;    // 캡처 했음 !!!
 8000844:	4b4c      	ldr	r3, [pc, #304]	@ (8000978 <HAL_TIM_IC_CaptureCallback+0x248>)
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
      // 캡처에 대한 극성을 라이징에서 폴링으로 바꿈
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800084a:	4b45      	ldr	r3, [pc, #276]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	6a1a      	ldr	r2, [r3, #32]
 8000850:	4b43      	ldr	r3, [pc, #268]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f022 020a 	bic.w	r2, r2, #10
 8000858:	621a      	str	r2, [r3, #32]
 800085a:	4b41      	ldr	r3, [pc, #260]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	6a1a      	ldr	r2, [r3, #32]
 8000860:	4b3f      	ldr	r3, [pc, #252]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f042 0202 	orr.w	r2, r2, #2
 8000868:	621a      	str	r2, [r3, #32]
 800086a:	e051      	b.n	8000910 <HAL_TIM_IC_CaptureCallback+0x1e0>
    }
    else if(captureFlag_L == 1) // 캡처를 했다면
 800086c:	4b42      	ldr	r3, [pc, #264]	@ (8000978 <HAL_TIM_IC_CaptureCallback+0x248>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d14d      	bne.n	8000910 <HAL_TIM_IC_CaptureCallback+0x1e0>
    {
      IC_Value2_L = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8000874:	2100      	movs	r1, #0
 8000876:	483a      	ldr	r0, [pc, #232]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 8000878:	f002 feac 	bl	80035d4 <HAL_TIM_ReadCapturedValue>
 800087c:	4603      	mov	r3, r0
 800087e:	b29a      	uxth	r2, r3
 8000880:	4b3f      	ldr	r3, [pc, #252]	@ (8000980 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000882:	801a      	strh	r2, [r3, #0]
      __HAL_TIM_SET_COUNTER(&htim4, 0);
 8000884:	4b36      	ldr	r3, [pc, #216]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2200      	movs	r2, #0
 800088a:	625a      	str	r2, [r3, #36]	@ 0x24

      if(IC_Value2_L > IC_Value1_L)
 800088c:	4b3c      	ldr	r3, [pc, #240]	@ (8000980 <HAL_TIM_IC_CaptureCallback+0x250>)
 800088e:	881a      	ldrh	r2, [r3, #0]
 8000890:	4b3a      	ldr	r3, [pc, #232]	@ (800097c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	429a      	cmp	r2, r3
 8000896:	d908      	bls.n	80008aa <HAL_TIM_IC_CaptureCallback+0x17a>
      {
        echoTime_L = IC_Value2_L - IC_Value1_L;
 8000898:	4b39      	ldr	r3, [pc, #228]	@ (8000980 <HAL_TIM_IC_CaptureCallback+0x250>)
 800089a:	881a      	ldrh	r2, [r3, #0]
 800089c:	4b37      	ldr	r3, [pc, #220]	@ (800097c <HAL_TIM_IC_CaptureCallback+0x24c>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b37      	ldr	r3, [pc, #220]	@ (8000984 <HAL_TIM_IC_CaptureCallback+0x254>)
 80008a6:	801a      	strh	r2, [r3, #0]
 80008a8:	e00f      	b.n	80008ca <HAL_TIM_IC_CaptureCallback+0x19a>
      }
      else if(IC_Value1_L > IC_Value2_L)
 80008aa:	4b34      	ldr	r3, [pc, #208]	@ (800097c <HAL_TIM_IC_CaptureCallback+0x24c>)
 80008ac:	881a      	ldrh	r2, [r3, #0]
 80008ae:	4b34      	ldr	r3, [pc, #208]	@ (8000980 <HAL_TIM_IC_CaptureCallback+0x250>)
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d909      	bls.n	80008ca <HAL_TIM_IC_CaptureCallback+0x19a>
      {
        echoTime_L = (0xffff - IC_Value1_L) + IC_Value2_L;
 80008b6:	4b32      	ldr	r3, [pc, #200]	@ (8000980 <HAL_TIM_IC_CaptureCallback+0x250>)
 80008b8:	881a      	ldrh	r2, [r3, #0]
 80008ba:	4b30      	ldr	r3, [pc, #192]	@ (800097c <HAL_TIM_IC_CaptureCallback+0x24c>)
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	3b01      	subs	r3, #1
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000984 <HAL_TIM_IC_CaptureCallback+0x254>)
 80008c8:	801a      	strh	r2, [r3, #0]
      }
      distance_L = echoTime_L / 58;
 80008ca:	4b2e      	ldr	r3, [pc, #184]	@ (8000984 <HAL_TIM_IC_CaptureCallback+0x254>)
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	4a28      	ldr	r2, [pc, #160]	@ (8000970 <HAL_TIM_IC_CaptureCallback+0x240>)
 80008d0:	fba2 2303 	umull	r2, r3, r2, r3
 80008d4:	095b      	lsrs	r3, r3, #5
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b2b      	ldr	r3, [pc, #172]	@ (8000988 <HAL_TIM_IC_CaptureCallback+0x258>)
 80008dc:	701a      	strb	r2, [r3, #0]
      captureFlag_L = 0;
 80008de:	4b26      	ldr	r3, [pc, #152]	@ (8000978 <HAL_TIM_IC_CaptureCallback+0x248>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80008e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	6a1a      	ldr	r2, [r3, #32]
 80008ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f022 020a 	bic.w	r2, r2, #10
 80008f2:	621a      	str	r2, [r3, #32]
 80008f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	6a12      	ldr	r2, [r2, #32]
 80008fe:	621a      	str	r2, [r3, #32]
      __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8000900:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	68da      	ldr	r2, [r3, #12]
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f022 0202 	bic.w	r2, r2, #2
 800090e:	60da      	str	r2, [r3, #12]
    }
  }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) // CENTER
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	7f1b      	ldrb	r3, [r3, #28]
 8000914:	2b04      	cmp	r3, #4
 8000916:	f040 808f 	bne.w	8000a38 <HAL_TIM_IC_CaptureCallback+0x308>
  {
    if(captureFlag_C == 0)  // 아직 캡처를 안했다면
 800091a:	4b1c      	ldr	r3, [pc, #112]	@ (800098c <HAL_TIM_IC_CaptureCallback+0x25c>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d138      	bne.n	8000994 <HAL_TIM_IC_CaptureCallback+0x264>
    {
      IC_Value1_C = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8000922:	2108      	movs	r1, #8
 8000924:	480e      	ldr	r0, [pc, #56]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 8000926:	f002 fe55 	bl	80035d4 <HAL_TIM_ReadCapturedValue>
 800092a:	4603      	mov	r3, r0
 800092c:	b29a      	uxth	r2, r3
 800092e:	4b18      	ldr	r3, [pc, #96]	@ (8000990 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000930:	801a      	strh	r2, [r3, #0]
      captureFlag_C = 1;    // 캡처 했음 !!!
 8000932:	4b16      	ldr	r3, [pc, #88]	@ (800098c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000934:	2201      	movs	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
      // 캡처에 대한 극성을 라이징에서 폴링으로 바꿈
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000938:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	6a1a      	ldr	r2, [r3, #32]
 800093e:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8000946:	621a      	str	r2, [r3, #32]
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	6a1a      	ldr	r2, [r3, #32]
 800094e:	4b04      	ldr	r3, [pc, #16]	@ (8000960 <HAL_TIM_IC_CaptureCallback+0x230>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000956:	621a      	str	r2, [r3, #32]
      captureFlag_C = 0;
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
      __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC3);
    }
  }
}
 8000958:	e06e      	b.n	8000a38 <HAL_TIM_IC_CaptureCallback+0x308>
 800095a:	bf00      	nop
 800095c:	200000a0 	.word	0x200000a0
 8000960:	2000014c 	.word	0x2000014c
 8000964:	2000009a 	.word	0x2000009a
 8000968:	2000009c 	.word	0x2000009c
 800096c:	2000009e 	.word	0x2000009e
 8000970:	8d3dcb09 	.word	0x8d3dcb09
 8000974:	200000a1 	.word	0x200000a1
 8000978:	20000098 	.word	0x20000098
 800097c:	20000092 	.word	0x20000092
 8000980:	20000094 	.word	0x20000094
 8000984:	20000096 	.word	0x20000096
 8000988:	20000099 	.word	0x20000099
 800098c:	20000090 	.word	0x20000090
 8000990:	2000008a 	.word	0x2000008a
    else if(captureFlag_C == 1) // 캡처를 했다면
 8000994:	4b2a      	ldr	r3, [pc, #168]	@ (8000a40 <HAL_TIM_IC_CaptureCallback+0x310>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d14d      	bne.n	8000a38 <HAL_TIM_IC_CaptureCallback+0x308>
      IC_Value2_C = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 800099c:	2108      	movs	r1, #8
 800099e:	4829      	ldr	r0, [pc, #164]	@ (8000a44 <HAL_TIM_IC_CaptureCallback+0x314>)
 80009a0:	f002 fe18 	bl	80035d4 <HAL_TIM_ReadCapturedValue>
 80009a4:	4603      	mov	r3, r0
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	4b27      	ldr	r3, [pc, #156]	@ (8000a48 <HAL_TIM_IC_CaptureCallback+0x318>)
 80009aa:	801a      	strh	r2, [r3, #0]
      __HAL_TIM_SET_COUNTER(&htim4, 0);
 80009ac:	4b25      	ldr	r3, [pc, #148]	@ (8000a44 <HAL_TIM_IC_CaptureCallback+0x314>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2200      	movs	r2, #0
 80009b2:	625a      	str	r2, [r3, #36]	@ 0x24
      if(IC_Value2_C > IC_Value1_C)
 80009b4:	4b24      	ldr	r3, [pc, #144]	@ (8000a48 <HAL_TIM_IC_CaptureCallback+0x318>)
 80009b6:	881a      	ldrh	r2, [r3, #0]
 80009b8:	4b24      	ldr	r3, [pc, #144]	@ (8000a4c <HAL_TIM_IC_CaptureCallback+0x31c>)
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d908      	bls.n	80009d2 <HAL_TIM_IC_CaptureCallback+0x2a2>
        echoTime_C = IC_Value2_C - IC_Value1_C;
 80009c0:	4b21      	ldr	r3, [pc, #132]	@ (8000a48 <HAL_TIM_IC_CaptureCallback+0x318>)
 80009c2:	881a      	ldrh	r2, [r3, #0]
 80009c4:	4b21      	ldr	r3, [pc, #132]	@ (8000a4c <HAL_TIM_IC_CaptureCallback+0x31c>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	4b20      	ldr	r3, [pc, #128]	@ (8000a50 <HAL_TIM_IC_CaptureCallback+0x320>)
 80009ce:	801a      	strh	r2, [r3, #0]
 80009d0:	e00f      	b.n	80009f2 <HAL_TIM_IC_CaptureCallback+0x2c2>
      else if(IC_Value1_C > IC_Value2_C)
 80009d2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a4c <HAL_TIM_IC_CaptureCallback+0x31c>)
 80009d4:	881a      	ldrh	r2, [r3, #0]
 80009d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <HAL_TIM_IC_CaptureCallback+0x318>)
 80009d8:	881b      	ldrh	r3, [r3, #0]
 80009da:	429a      	cmp	r2, r3
 80009dc:	d909      	bls.n	80009f2 <HAL_TIM_IC_CaptureCallback+0x2c2>
        echoTime_C = (0xffff - IC_Value1_C) + IC_Value2_C;
 80009de:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <HAL_TIM_IC_CaptureCallback+0x318>)
 80009e0:	881a      	ldrh	r2, [r3, #0]
 80009e2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a4c <HAL_TIM_IC_CaptureCallback+0x31c>)
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	1ad3      	subs	r3, r2, r3
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	3b01      	subs	r3, #1
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	4b18      	ldr	r3, [pc, #96]	@ (8000a50 <HAL_TIM_IC_CaptureCallback+0x320>)
 80009f0:	801a      	strh	r2, [r3, #0]
      distance_C = echoTime_C / 58;
 80009f2:	4b17      	ldr	r3, [pc, #92]	@ (8000a50 <HAL_TIM_IC_CaptureCallback+0x320>)
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	4a17      	ldr	r2, [pc, #92]	@ (8000a54 <HAL_TIM_IC_CaptureCallback+0x324>)
 80009f8:	fba2 2303 	umull	r2, r3, r2, r3
 80009fc:	095b      	lsrs	r3, r3, #5
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <HAL_TIM_IC_CaptureCallback+0x328>)
 8000a04:	701a      	strb	r2, [r3, #0]
      captureFlag_C = 0;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <HAL_TIM_IC_CaptureCallback+0x310>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8000a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a44 <HAL_TIM_IC_CaptureCallback+0x314>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	6a1a      	ldr	r2, [r3, #32]
 8000a12:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <HAL_TIM_IC_CaptureCallback+0x314>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8000a1a:	621a      	str	r2, [r3, #32]
 8000a1c:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <HAL_TIM_IC_CaptureCallback+0x314>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <HAL_TIM_IC_CaptureCallback+0x314>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	6a12      	ldr	r2, [r2, #32]
 8000a26:	621a      	str	r2, [r3, #32]
      __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC3);
 8000a28:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <HAL_TIM_IC_CaptureCallback+0x314>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	68da      	ldr	r2, [r3, #12]
 8000a2e:	4b05      	ldr	r3, [pc, #20]	@ (8000a44 <HAL_TIM_IC_CaptureCallback+0x314>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f022 0208 	bic.w	r2, r2, #8
 8000a36:	60da      	str	r2, [r3, #12]
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000090 	.word	0x20000090
 8000a44:	2000014c 	.word	0x2000014c
 8000a48:	2000008c 	.word	0x2000008c
 8000a4c:	2000008a 	.word	0x2000008a
 8000a50:	2000008e 	.word	0x2000008e
 8000a54:	8d3dcb09 	.word	0x8d3dcb09
 8000a58:	20000091 	.word	0x20000091

08000a5c <HCSR04_TRIG_R>:

  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
}

void HCSR04_TRIG_R(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(TRIG_PORT_R, TRIG_PIN_R, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2120      	movs	r1, #32
 8000a64:	480a      	ldr	r0, [pc, #40]	@ (8000a90 <HCSR04_TRIG_R+0x34>)
 8000a66:	f001 fa31 	bl	8001ecc <HAL_GPIO_WritePin>
  delay_us(10);
 8000a6a:	200a      	movs	r0, #10
 8000a6c:	f7ff fd9e 	bl	80005ac <delay_us>
  HAL_GPIO_WritePin(TRIG_PORT_R, TRIG_PIN_R, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	2120      	movs	r1, #32
 8000a74:	4806      	ldr	r0, [pc, #24]	@ (8000a90 <HCSR04_TRIG_R+0x34>)
 8000a76:	f001 fa29 	bl	8001ecc <HAL_GPIO_WritePin>

  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC2);
 8000a7a:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <HCSR04_TRIG_R+0x38>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	68da      	ldr	r2, [r3, #12]
 8000a80:	4b04      	ldr	r3, [pc, #16]	@ (8000a94 <HCSR04_TRIG_R+0x38>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f042 0204 	orr.w	r2, r2, #4
 8000a88:	60da      	str	r2, [r3, #12]
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40020400 	.word	0x40020400
 8000a94:	2000014c 	.word	0x2000014c

08000a98 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  HAL_UART_Receive_IT(&huart2, &rx_data, sizeof(rx_data));
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4919      	ldr	r1, [pc, #100]	@ (8000b04 <MX_FREERTOS_Init+0x6c>)
 8000aa0:	4819      	ldr	r0, [pc, #100]	@ (8000b08 <MX_FREERTOS_Init+0x70>)
 8000aa2:	f003 fb46 	bl	8004132 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &rx_data, sizeof(rx_data));
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4916      	ldr	r1, [pc, #88]	@ (8000b04 <MX_FREERTOS_Init+0x6c>)
 8000aaa:	4818      	ldr	r0, [pc, #96]	@ (8000b0c <MX_FREERTOS_Init+0x74>)
 8000aac:	f003 fb41 	bl	8004132 <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of L_MOTOR_TASK */
  L_MOTOR_TASKHandle = osThreadNew(L_MOTOR_TASK01, NULL, &L_MOTOR_TASK_attributes);
 8000ab0:	4a17      	ldr	r2, [pc, #92]	@ (8000b10 <MX_FREERTOS_Init+0x78>)
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4817      	ldr	r0, [pc, #92]	@ (8000b14 <MX_FREERTOS_Init+0x7c>)
 8000ab6:	f004 fb5b 	bl	8005170 <osThreadNew>
 8000aba:	4603      	mov	r3, r0
 8000abc:	4a16      	ldr	r2, [pc, #88]	@ (8000b18 <MX_FREERTOS_Init+0x80>)
 8000abe:	6013      	str	r3, [r2, #0]

  /* creation of R_MOTOR_TASK */
  R_MOTOR_TASKHandle = osThreadNew(R_MOTOR_TASK01, NULL, &R_MOTOR_TASK_attributes);
 8000ac0:	4a16      	ldr	r2, [pc, #88]	@ (8000b1c <MX_FREERTOS_Init+0x84>)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4816      	ldr	r0, [pc, #88]	@ (8000b20 <MX_FREERTOS_Init+0x88>)
 8000ac6:	f004 fb53 	bl	8005170 <osThreadNew>
 8000aca:	4603      	mov	r3, r0
 8000acc:	4a15      	ldr	r2, [pc, #84]	@ (8000b24 <MX_FREERTOS_Init+0x8c>)
 8000ace:	6013      	str	r3, [r2, #0]

  /* creation of CENTER_SONIC */
  CENTER_SONICHandle = osThreadNew(CENTER_SONIC01, NULL, &CENTER_SONIC_attributes);
 8000ad0:	4a15      	ldr	r2, [pc, #84]	@ (8000b28 <MX_FREERTOS_Init+0x90>)
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4815      	ldr	r0, [pc, #84]	@ (8000b2c <MX_FREERTOS_Init+0x94>)
 8000ad6:	f004 fb4b 	bl	8005170 <osThreadNew>
 8000ada:	4603      	mov	r3, r0
 8000adc:	4a14      	ldr	r2, [pc, #80]	@ (8000b30 <MX_FREERTOS_Init+0x98>)
 8000ade:	6013      	str	r3, [r2, #0]

  /* creation of LEFT_SONIC */
  LEFT_SONICHandle = osThreadNew(LEFT_SONIC01, NULL, &LEFT_SONIC_attributes);
 8000ae0:	4a14      	ldr	r2, [pc, #80]	@ (8000b34 <MX_FREERTOS_Init+0x9c>)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4814      	ldr	r0, [pc, #80]	@ (8000b38 <MX_FREERTOS_Init+0xa0>)
 8000ae6:	f004 fb43 	bl	8005170 <osThreadNew>
 8000aea:	4603      	mov	r3, r0
 8000aec:	4a13      	ldr	r2, [pc, #76]	@ (8000b3c <MX_FREERTOS_Init+0xa4>)
 8000aee:	6013      	str	r3, [r2, #0]

  /* creation of RIGHT_SONIC */
  RIGHT_SONICHandle = osThreadNew(RIGHT_SONIC01, NULL, &RIGHT_SONIC_attributes);
 8000af0:	4a13      	ldr	r2, [pc, #76]	@ (8000b40 <MX_FREERTOS_Init+0xa8>)
 8000af2:	2100      	movs	r1, #0
 8000af4:	4813      	ldr	r0, [pc, #76]	@ (8000b44 <MX_FREERTOS_Init+0xac>)
 8000af6:	f004 fb3b 	bl	8005170 <osThreadNew>
 8000afa:	4603      	mov	r3, r0
 8000afc:	4a12      	ldr	r2, [pc, #72]	@ (8000b48 <MX_FREERTOS_Init+0xb0>)
 8000afe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000088 	.word	0x20000088
 8000b08:	20000224 	.word	0x20000224
 8000b0c:	200001dc 	.word	0x200001dc
 8000b10:	08008bf4 	.word	0x08008bf4
 8000b14:	08000b4d 	.word	0x08000b4d
 8000b18:	200000a4 	.word	0x200000a4
 8000b1c:	08008c18 	.word	0x08008c18
 8000b20:	08000b69 	.word	0x08000b69
 8000b24:	200000a8 	.word	0x200000a8
 8000b28:	08008c3c 	.word	0x08008c3c
 8000b2c:	08000b85 	.word	0x08000b85
 8000b30:	200000ac 	.word	0x200000ac
 8000b34:	08008c60 	.word	0x08008c60
 8000b38:	08000b91 	.word	0x08000b91
 8000b3c:	200000b0 	.word	0x200000b0
 8000b40:	08008c84 	.word	0x08008c84
 8000b44:	08000b9d 	.word	0x08000b9d
 8000b48:	200000b4 	.word	0x200000b4

08000b4c <L_MOTOR_TASK01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_L_MOTOR_TASK01 */
void L_MOTOR_TASK01(void *argument)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN L_MOTOR_TASK01 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // 좌측 PWM 시작
 8000b54:	2100      	movs	r1, #0
 8000b56:	4803      	ldr	r0, [pc, #12]	@ (8000b64 <L_MOTOR_TASK01+0x18>)
 8000b58:	f002 f802 	bl	8002b60 <HAL_TIM_PWM_Start>
//  HAL_UART_Receive_IT(&huart2, &rx_data, sizeof(rx_data));  // UART 수신 시작
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);  // 아무것도 하지 않고 대기
 8000b5c:	2064      	movs	r0, #100	@ 0x64
 8000b5e:	f004 fb99 	bl	8005294 <osDelay>
 8000b62:	e7fb      	b.n	8000b5c <L_MOTOR_TASK01+0x10>
 8000b64:	20000104 	.word	0x20000104

08000b68 <R_MOTOR_TASK01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_R_MOTOR_TASK01 */
void R_MOTOR_TASK01(void *argument)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN R_MOTOR_TASK01 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // 우측 PWM 시작
 8000b70:	2104      	movs	r1, #4
 8000b72:	4803      	ldr	r0, [pc, #12]	@ (8000b80 <R_MOTOR_TASK01+0x18>)
 8000b74:	f001 fff4 	bl	8002b60 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);  // 아무것도 하지 않고 대기
 8000b78:	2064      	movs	r0, #100	@ 0x64
 8000b7a:	f004 fb8b 	bl	8005294 <osDelay>
 8000b7e:	e7fb      	b.n	8000b78 <R_MOTOR_TASK01+0x10>
 8000b80:	20000104 	.word	0x20000104

08000b84 <CENTER_SONIC01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CENTER_SONIC01 */
void CENTER_SONIC01(void *argument)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CENTER_SONIC01 */
  /* Infinite loop */
  for(;;)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <CENTER_SONIC01+0x8>

08000b90 <LEFT_SONIC01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LEFT_SONIC01 */
void LEFT_SONIC01(void *argument)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LEFT_SONIC01 */
  /* Infinite loop */
  for(;;)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <LEFT_SONIC01+0x8>

08000b9c <RIGHT_SONIC01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RIGHT_SONIC01 */
void RIGHT_SONIC01(void *argument)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RIGHT_SONIC01 */
  /* Infinite loop */
  for(;;)
  {
    HCSR04_TRIG_R();
 8000ba4:	f7ff ff5a 	bl	8000a5c <HCSR04_TRIG_R>
    printf("R : %d cm\r\n",distance_R);
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <RIGHT_SONIC01+0x24>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <RIGHT_SONIC01+0x28>)
 8000bb0:	f007 f904 	bl	8007dbc <iprintf>
    osDelay(500);
 8000bb4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bb8:	f004 fb6c 	bl	8005294 <osDelay>
    HCSR04_TRIG_R();
 8000bbc:	bf00      	nop
 8000bbe:	e7f1      	b.n	8000ba4 <RIGHT_SONIC01+0x8>
 8000bc0:	200000a1 	.word	0x200000a1
 8000bc4:	08008bd0 	.word	0x08008bd0

08000bc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	4b31      	ldr	r3, [pc, #196]	@ (8000ca8 <MX_GPIO_Init+0xe0>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a30      	ldr	r2, [pc, #192]	@ (8000ca8 <MX_GPIO_Init+0xe0>)
 8000be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca8 <MX_GPIO_Init+0xe0>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca8 <MX_GPIO_Init+0xe0>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a29      	ldr	r2, [pc, #164]	@ (8000ca8 <MX_GPIO_Init+0xe0>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b27      	ldr	r3, [pc, #156]	@ (8000ca8 <MX_GPIO_Init+0xe0>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	4b23      	ldr	r3, [pc, #140]	@ (8000ca8 <MX_GPIO_Init+0xe0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a22      	ldr	r2, [pc, #136]	@ (8000ca8 <MX_GPIO_Init+0xe0>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b20      	ldr	r3, [pc, #128]	@ (8000ca8 <MX_GPIO_Init+0xe0>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2120      	movs	r1, #32
 8000c36:	481d      	ldr	r0, [pc, #116]	@ (8000cac <MX_GPIO_Init+0xe4>)
 8000c38:	f001 f948 	bl	8001ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f240 4137 	movw	r1, #1079	@ 0x437
 8000c42:	481b      	ldr	r0, [pc, #108]	@ (8000cb0 <MX_GPIO_Init+0xe8>)
 8000c44:	f001 f942 	bl	8001ecc <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c48:	2320      	movs	r3, #32
 8000c4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4813      	ldr	r0, [pc, #76]	@ (8000cac <MX_GPIO_Init+0xe4>)
 8000c60:	f000 ffb0 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10;
 8000c64:	f240 4307 	movw	r3, #1031	@ 0x407
 8000c68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c76:	f107 030c 	add.w	r3, r7, #12
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	480c      	ldr	r0, [pc, #48]	@ (8000cb0 <MX_GPIO_Init+0xe8>)
 8000c7e:	f000 ffa1 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c82:	2330      	movs	r3, #48	@ 0x30
 8000c84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_GPIO_Init+0xe8>)
 8000c9a:	f000 ff93 	bl	8001bc4 <HAL_GPIO_Init>

}
 8000c9e:	bf00      	nop
 8000ca0:	3720      	adds	r7, #32
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	40020400 	.word	0x40020400

08000cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb8:	f000 fdce 	bl	8001858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cbc:	f000 f828 	bl	8000d10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc0:	f7ff ff82 	bl	8000bc8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cc4:	f000 fce8 	bl	8001698 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000cc8:	f000 fad0 	bl	800126c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000ccc:	f000 fcba 	bl	8001644 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000cd0:	f000 fb4e 	bl	8001370 <MX_TIM4_Init>
  MX_TIM11_Init();
 8000cd4:	f000 fbd4 	bl	8001480 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim11);          // for us timer
 8000cd8:	480b      	ldr	r0, [pc, #44]	@ (8000d08 <main+0x54>)
 8000cda:	f001 fe2b 	bl	8002934 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1); // for ultrasonic timer
 8000cde:	2100      	movs	r1, #0
 8000ce0:	480a      	ldr	r0, [pc, #40]	@ (8000d0c <main+0x58>)
 8000ce2:	f002 f847 	bl	8002d74 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2); // for ultrasonic timer
 8000ce6:	2104      	movs	r1, #4
 8000ce8:	4808      	ldr	r0, [pc, #32]	@ (8000d0c <main+0x58>)
 8000cea:	f002 f843 	bl	8002d74 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3); // for ultrasonic timer
 8000cee:	2108      	movs	r1, #8
 8000cf0:	4806      	ldr	r0, [pc, #24]	@ (8000d0c <main+0x58>)
 8000cf2:	f002 f83f 	bl	8002d74 <HAL_TIM_IC_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 8000cf6:	f004 f9f1 	bl	80050dc <osKernelInitialize>
  MX_FREERTOS_Init();
 8000cfa:	f7ff fecd 	bl	8000a98 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000cfe:	f004 fa11 	bl	8005124 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d02:	bf00      	nop
 8000d04:	e7fd      	b.n	8000d02 <main+0x4e>
 8000d06:	bf00      	nop
 8000d08:	20000194 	.word	0x20000194
 8000d0c:	2000014c 	.word	0x2000014c

08000d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b094      	sub	sp, #80	@ 0x50
 8000d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d16:	f107 0320 	add.w	r3, r7, #32
 8000d1a:	2230      	movs	r2, #48	@ 0x30
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f007 f8a1 	bl	8007e66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d34:	2300      	movs	r3, #0
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	4b27      	ldr	r3, [pc, #156]	@ (8000dd8 <SystemClock_Config+0xc8>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3c:	4a26      	ldr	r2, [pc, #152]	@ (8000dd8 <SystemClock_Config+0xc8>)
 8000d3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d44:	4b24      	ldr	r3, [pc, #144]	@ (8000dd8 <SystemClock_Config+0xc8>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d50:	2300      	movs	r3, #0
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	4b21      	ldr	r3, [pc, #132]	@ (8000ddc <SystemClock_Config+0xcc>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a20      	ldr	r2, [pc, #128]	@ (8000ddc <SystemClock_Config+0xcc>)
 8000d5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	4b1e      	ldr	r3, [pc, #120]	@ (8000ddc <SystemClock_Config+0xcc>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d74:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d76:	2302      	movs	r3, #2
 8000d78:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d7a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d80:	2304      	movs	r3, #4
 8000d82:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000d84:	2364      	movs	r3, #100	@ 0x64
 8000d86:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d90:	f107 0320 	add.w	r3, r7, #32
 8000d94:	4618      	mov	r0, r3
 8000d96:	f001 f8b3 	bl	8001f00 <HAL_RCC_OscConfig>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000da0:	f000 f830 	bl	8000e04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da4:	230f      	movs	r3, #15
 8000da6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da8:	2302      	movs	r3, #2
 8000daa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000db0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000db4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dba:	f107 030c 	add.w	r3, r7, #12
 8000dbe:	2103      	movs	r1, #3
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f001 fb15 	bl	80023f0 <HAL_RCC_ClockConfig>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000dcc:	f000 f81a 	bl	8000e04 <Error_Handler>
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	3750      	adds	r7, #80	@ 0x50
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40007000 	.word	0x40007000

08000de0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a04      	ldr	r2, [pc, #16]	@ (8000e00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d101      	bne.n	8000df6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000df2:	f000 fd53 	bl	800189c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40014400 	.word	0x40014400

08000e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e08:	b672      	cpsid	i
}
 8000e0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <Error_Handler+0x8>

08000e10 <L_Motor_Forward>:

#include "motor.h"

// 좌측 모터 방향제어 (IN = PB0, IN2 = PB1)
void L_Motor_Forward(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // IN1
 8000e14:	2201      	movs	r2, #1
 8000e16:	2101      	movs	r1, #1
 8000e18:	4804      	ldr	r0, [pc, #16]	@ (8000e2c <L_Motor_Forward+0x1c>)
 8000e1a:	f001 f857 	bl	8001ecc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // IN2
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2102      	movs	r1, #2
 8000e22:	4802      	ldr	r0, [pc, #8]	@ (8000e2c <L_Motor_Forward+0x1c>)
 8000e24:	f001 f852 	bl	8001ecc <HAL_GPIO_WritePin>
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40020400 	.word	0x40020400

08000e30 <L_Motor_Backward>:

void L_Motor_Backward(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2101      	movs	r1, #1
 8000e38:	4804      	ldr	r0, [pc, #16]	@ (8000e4c <L_Motor_Backward+0x1c>)
 8000e3a:	f001 f847 	bl	8001ecc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000e3e:	2201      	movs	r2, #1
 8000e40:	2102      	movs	r1, #2
 8000e42:	4802      	ldr	r0, [pc, #8]	@ (8000e4c <L_Motor_Backward+0x1c>)
 8000e44:	f001 f842 	bl	8001ecc <HAL_GPIO_WritePin>
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40020400 	.word	0x40020400

08000e50 <R_Motor_Forward>:

// 우측 모터 방향제어 (IN = PB2. IN4 = PB10)
void R_Motor_Forward(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); // IN3
 8000e54:	2201      	movs	r2, #1
 8000e56:	2104      	movs	r1, #4
 8000e58:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <R_Motor_Forward+0x20>)
 8000e5a:	f001 f837 	bl	8001ecc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // IN4
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e64:	4802      	ldr	r0, [pc, #8]	@ (8000e70 <R_Motor_Forward+0x20>)
 8000e66:	f001 f831 	bl	8001ecc <HAL_GPIO_WritePin>
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40020400 	.word	0x40020400

08000e74 <R_Motor_Backward>:

void R_Motor_Backward(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <R_Motor_Backward+0x20>)
 8000e7e:	f001 f825 	bl	8001ecc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e88:	4802      	ldr	r0, [pc, #8]	@ (8000e94 <R_Motor_Backward+0x20>)
 8000e8a:	f001 f81f 	bl	8001ecc <HAL_GPIO_WritePin>
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40020400 	.word	0x40020400

08000e98 <Set_L_Motor_PWM>:
//  uint32_t pwm = (speed_percent * (__HAL_TIM_GET_AUTORELOAD(&htim3))) / 100;
//  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2 , pwm); // 좌 :ch1
//}

void Set_L_Motor_PWM(uint32_t pwm_value)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  TIM3->CCR1 = pwm_value;
 8000ea0:	4a04      	ldr	r2, [pc, #16]	@ (8000eb4 <Set_L_Motor_PWM+0x1c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	40000400 	.word	0x40000400

08000eb8 <Set_R_Motor_PWM>:

void Set_R_Motor_PWM(uint32_t pwm_value)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  TIM3->CCR2 = pwm_value;
 8000ec0:	4a04      	ldr	r2, [pc, #16]	@ (8000ed4 <Set_R_Motor_PWM+0x1c>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40000400 	.word	0x40000400

08000ed8 <L_Motor_Stop>:

void L_Motor_Stop(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // IN1
 8000edc:	2200      	movs	r2, #0
 8000ede:	2101      	movs	r1, #1
 8000ee0:	4806      	ldr	r0, [pc, #24]	@ (8000efc <L_Motor_Stop+0x24>)
 8000ee2:	f000 fff3 	bl	8001ecc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);  // IN2
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2102      	movs	r1, #2
 8000eea:	4804      	ldr	r0, [pc, #16]	@ (8000efc <L_Motor_Stop+0x24>)
 8000eec:	f000 ffee 	bl	8001ecc <HAL_GPIO_WritePin>
  Set_L_Motor_PWM(0);  // PWM도 0
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f7ff ffd1 	bl	8000e98 <Set_L_Motor_PWM>
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40020400 	.word	0x40020400

08000f00 <R_Motor_Stop>:

void R_Motor_Stop(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);  // IN3
 8000f04:	2200      	movs	r2, #0
 8000f06:	2104      	movs	r1, #4
 8000f08:	4806      	ldr	r0, [pc, #24]	@ (8000f24 <R_Motor_Stop+0x24>)
 8000f0a:	f000 ffdf 	bl	8001ecc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // IN4
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f14:	4803      	ldr	r0, [pc, #12]	@ (8000f24 <R_Motor_Stop+0x24>)
 8000f16:	f000 ffd9 	bl	8001ecc <HAL_GPIO_WritePin>
  Set_R_Motor_PWM(0);
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f7ff ffcc 	bl	8000eb8 <Set_R_Motor_PWM>
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40020400 	.word	0x40020400

08000f28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <HAL_MspInit+0x54>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f36:	4a11      	ldr	r2, [pc, #68]	@ (8000f7c <HAL_MspInit+0x54>)
 8000f38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <HAL_MspInit+0x54>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <HAL_MspInit+0x54>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f52:	4a0a      	ldr	r2, [pc, #40]	@ (8000f7c <HAL_MspInit+0x54>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f5a:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <HAL_MspInit+0x54>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	210f      	movs	r1, #15
 8000f6a:	f06f 0001 	mvn.w	r0, #1
 8000f6e:	f000 fd6d 	bl	8001a4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800

08000f80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08c      	sub	sp, #48	@ 0x30
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	4b2e      	ldr	r3, [pc, #184]	@ (8001050 <HAL_InitTick+0xd0>)
 8000f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f98:	4a2d      	ldr	r2, [pc, #180]	@ (8001050 <HAL_InitTick+0xd0>)
 8000f9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f9e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8001050 <HAL_InitTick+0xd0>)
 8000fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fac:	f107 020c 	add.w	r2, r7, #12
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fc3a 	bl	8002830 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000fbc:	f001 fc24 	bl	8002808 <HAL_RCC_GetPCLK2Freq>
 8000fc0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fc4:	4a23      	ldr	r2, [pc, #140]	@ (8001054 <HAL_InitTick+0xd4>)
 8000fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fca:	0c9b      	lsrs	r3, r3, #18
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000fd0:	4b21      	ldr	r3, [pc, #132]	@ (8001058 <HAL_InitTick+0xd8>)
 8000fd2:	4a22      	ldr	r2, [pc, #136]	@ (800105c <HAL_InitTick+0xdc>)
 8000fd4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000fd6:	4b20      	ldr	r3, [pc, #128]	@ (8001058 <HAL_InitTick+0xd8>)
 8000fd8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fdc:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000fde:	4a1e      	ldr	r2, [pc, #120]	@ (8001058 <HAL_InitTick+0xd8>)
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe2:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8001058 <HAL_InitTick+0xd8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fea:	4b1b      	ldr	r3, [pc, #108]	@ (8001058 <HAL_InitTick+0xd8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff0:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <HAL_InitTick+0xd8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000ff6:	4818      	ldr	r0, [pc, #96]	@ (8001058 <HAL_InitTick+0xd8>)
 8000ff8:	f001 fc4c 	bl	8002894 <HAL_TIM_Base_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001002:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001006:	2b00      	cmp	r3, #0
 8001008:	d11b      	bne.n	8001042 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800100a:	4813      	ldr	r0, [pc, #76]	@ (8001058 <HAL_InitTick+0xd8>)
 800100c:	f001 fcec 	bl	80029e8 <HAL_TIM_Base_Start_IT>
 8001010:	4603      	mov	r3, r0
 8001012:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001016:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800101a:	2b00      	cmp	r3, #0
 800101c:	d111      	bne.n	8001042 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800101e:	2019      	movs	r0, #25
 8001020:	f000 fd30 	bl	8001a84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b0f      	cmp	r3, #15
 8001028:	d808      	bhi.n	800103c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800102a:	2200      	movs	r2, #0
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	2019      	movs	r0, #25
 8001030:	f000 fd0c 	bl	8001a4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001034:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <HAL_InitTick+0xe0>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	e002      	b.n	8001042 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001042:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001046:	4618      	mov	r0, r3
 8001048:	3730      	adds	r7, #48	@ 0x30
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800
 8001054:	431bde83 	.word	0x431bde83
 8001058:	200000b8 	.word	0x200000b8
 800105c:	40014400 	.word	0x40014400
 8001060:	20000004 	.word	0x20000004

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <NMI_Handler+0x4>

0800106c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <MemManage_Handler+0x4>

0800107c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <UsageFault_Handler+0x4>

0800108c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80010a0:	4802      	ldr	r0, [pc, #8]	@ (80010ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80010a2:	f001 ff81 	bl	8002fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200000b8 	.word	0x200000b8

080010b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010b4:	4802      	ldr	r0, [pc, #8]	@ (80010c0 <TIM3_IRQHandler+0x10>)
 80010b6:	f001 ff77 	bl	8002fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000104 	.word	0x20000104

080010c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010c8:	4802      	ldr	r0, [pc, #8]	@ (80010d4 <TIM4_IRQHandler+0x10>)
 80010ca:	f001 ff6d 	bl	8002fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	2000014c 	.word	0x2000014c

080010d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010dc:	4802      	ldr	r0, [pc, #8]	@ (80010e8 <USART1_IRQHandler+0x10>)
 80010de:	f003 f84d 	bl	800417c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200001dc 	.word	0x200001dc

080010ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010f0:	4802      	ldr	r0, [pc, #8]	@ (80010fc <USART2_IRQHandler+0x10>)
 80010f2:	f003 f843 	bl	800417c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000224 	.word	0x20000224

08001100 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	e00a      	b.n	8001128 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001112:	f3af 8000 	nop.w
 8001116:	4601      	mov	r1, r0
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	60ba      	str	r2, [r7, #8]
 800111e:	b2ca      	uxtb	r2, r1
 8001120:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3301      	adds	r3, #1
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	429a      	cmp	r2, r3
 800112e:	dbf0      	blt.n	8001112 <_read+0x12>
  }

  return len;
 8001130:	687b      	ldr	r3, [r7, #4]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	60f8      	str	r0, [r7, #12]
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	e009      	b.n	8001160 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	60ba      	str	r2, [r7, #8]
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fa43 	bl	80005e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3301      	adds	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	429a      	cmp	r2, r3
 8001166:	dbf1      	blt.n	800114c <_write+0x12>
  }
  return len;
 8001168:	687b      	ldr	r3, [r7, #4]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_close>:

int _close(int file)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800119a:	605a      	str	r2, [r3, #4]
  return 0;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <_isatty>:

int _isatty(int file)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e4:	4a14      	ldr	r2, [pc, #80]	@ (8001238 <_sbrk+0x5c>)
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <_sbrk+0x60>)
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f0:	4b13      	ldr	r3, [pc, #76]	@ (8001240 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f8:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <_sbrk+0x64>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	@ (8001244 <_sbrk+0x68>)
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011fe:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	429a      	cmp	r2, r3
 800120a:	d207      	bcs.n	800121c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800120c:	f006 fed8 	bl	8007fc0 <__errno>
 8001210:	4603      	mov	r3, r0
 8001212:	220c      	movs	r2, #12
 8001214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800121a:	e009      	b.n	8001230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800121c:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001222:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <_sbrk+0x64>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	4a05      	ldr	r2, [pc, #20]	@ (8001240 <_sbrk+0x64>)
 800122c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20020000 	.word	0x20020000
 800123c:	00000400 	.word	0x00000400
 8001240:	20000100 	.word	0x20000100
 8001244:	20004da8 	.word	0x20004da8

08001248 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800124c:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <SystemInit+0x20>)
 800124e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001252:	4a05      	ldr	r2, [pc, #20]	@ (8001268 <SystemInit+0x20>)
 8001254:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001258:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08e      	sub	sp, #56	@ 0x38
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001272:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	f107 0320 	add.w	r3, r7, #32
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
 8001298:	615a      	str	r2, [r3, #20]
 800129a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800129c:	4b32      	ldr	r3, [pc, #200]	@ (8001368 <MX_TIM3_Init+0xfc>)
 800129e:	4a33      	ldr	r2, [pc, #204]	@ (800136c <MX_TIM3_Init+0x100>)
 80012a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 80012a2:	4b31      	ldr	r3, [pc, #196]	@ (8001368 <MX_TIM3_Init+0xfc>)
 80012a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001368 <MX_TIM3_Init+0xfc>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80012b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001368 <MX_TIM3_Init+0xfc>)
 80012b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001368 <MX_TIM3_Init+0xfc>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012be:	4b2a      	ldr	r3, [pc, #168]	@ (8001368 <MX_TIM3_Init+0xfc>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012c4:	4828      	ldr	r0, [pc, #160]	@ (8001368 <MX_TIM3_Init+0xfc>)
 80012c6:	f001 fae5 	bl	8002894 <HAL_TIM_Base_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80012d0:	f7ff fd98 	bl	8000e04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012de:	4619      	mov	r1, r3
 80012e0:	4821      	ldr	r0, [pc, #132]	@ (8001368 <MX_TIM3_Init+0xfc>)
 80012e2:	f002 f8af 	bl	8003444 <HAL_TIM_ConfigClockSource>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80012ec:	f7ff fd8a 	bl	8000e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012f0:	481d      	ldr	r0, [pc, #116]	@ (8001368 <MX_TIM3_Init+0xfc>)
 80012f2:	f001 fbdb 	bl	8002aac <HAL_TIM_PWM_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80012fc:	f7ff fd82 	bl	8000e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001308:	f107 0320 	add.w	r3, r7, #32
 800130c:	4619      	mov	r1, r3
 800130e:	4816      	ldr	r0, [pc, #88]	@ (8001368 <MX_TIM3_Init+0xfc>)
 8001310:	f002 fdb2 	bl	8003e78 <HAL_TIMEx_MasterConfigSynchronization>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800131a:	f7ff fd73 	bl	8000e04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800131e:	2360      	movs	r3, #96	@ 0x60
 8001320:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2200      	movs	r2, #0
 8001332:	4619      	mov	r1, r3
 8001334:	480c      	ldr	r0, [pc, #48]	@ (8001368 <MX_TIM3_Init+0xfc>)
 8001336:	f001 ffc3 	bl	80032c0 <HAL_TIM_PWM_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001340:	f7ff fd60 	bl	8000e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2204      	movs	r2, #4
 8001348:	4619      	mov	r1, r3
 800134a:	4807      	ldr	r0, [pc, #28]	@ (8001368 <MX_TIM3_Init+0xfc>)
 800134c:	f001 ffb8 	bl	80032c0 <HAL_TIM_PWM_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001356:	f7ff fd55 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800135a:	4803      	ldr	r0, [pc, #12]	@ (8001368 <MX_TIM3_Init+0xfc>)
 800135c:	f000 f938 	bl	80015d0 <HAL_TIM_MspPostInit>

}
 8001360:	bf00      	nop
 8001362:	3738      	adds	r7, #56	@ 0x38
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000104 	.word	0x20000104
 800136c:	40000400 	.word	0x40000400

08001370 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	@ 0x28
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001376:	f107 0318 	add.w	r3, r7, #24
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800138e:	463b      	mov	r3, r7
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800139a:	4b37      	ldr	r3, [pc, #220]	@ (8001478 <MX_TIM4_Init+0x108>)
 800139c:	4a37      	ldr	r2, [pc, #220]	@ (800147c <MX_TIM4_Init+0x10c>)
 800139e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 80013a0:	4b35      	ldr	r3, [pc, #212]	@ (8001478 <MX_TIM4_Init+0x108>)
 80013a2:	2263      	movs	r2, #99	@ 0x63
 80013a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a6:	4b34      	ldr	r3, [pc, #208]	@ (8001478 <MX_TIM4_Init+0x108>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013ac:	4b32      	ldr	r3, [pc, #200]	@ (8001478 <MX_TIM4_Init+0x108>)
 80013ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b4:	4b30      	ldr	r3, [pc, #192]	@ (8001478 <MX_TIM4_Init+0x108>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001478 <MX_TIM4_Init+0x108>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013c0:	482d      	ldr	r0, [pc, #180]	@ (8001478 <MX_TIM4_Init+0x108>)
 80013c2:	f001 fa67 	bl	8002894 <HAL_TIM_Base_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80013cc:	f7ff fd1a 	bl	8000e04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013d4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013d6:	f107 0318 	add.w	r3, r7, #24
 80013da:	4619      	mov	r1, r3
 80013dc:	4826      	ldr	r0, [pc, #152]	@ (8001478 <MX_TIM4_Init+0x108>)
 80013de:	f002 f831 	bl	8003444 <HAL_TIM_ConfigClockSource>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80013e8:	f7ff fd0c 	bl	8000e04 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80013ec:	4822      	ldr	r0, [pc, #136]	@ (8001478 <MX_TIM4_Init+0x108>)
 80013ee:	f001 fc67 	bl	8002cc0 <HAL_TIM_IC_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80013f8:	f7ff fd04 	bl	8000e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fc:	2300      	movs	r3, #0
 80013fe:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	4619      	mov	r1, r3
 800140a:	481b      	ldr	r0, [pc, #108]	@ (8001478 <MX_TIM4_Init+0x108>)
 800140c:	f002 fd34 	bl	8003e78 <HAL_TIMEx_MasterConfigSynchronization>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001416:	f7ff fcf5 	bl	8000e04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800141a:	2300      	movs	r3, #0
 800141c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800141e:	2301      	movs	r3, #1
 8001420:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800142a:	463b      	mov	r3, r7
 800142c:	2200      	movs	r2, #0
 800142e:	4619      	mov	r1, r3
 8001430:	4811      	ldr	r0, [pc, #68]	@ (8001478 <MX_TIM4_Init+0x108>)
 8001432:	f001 fea9 	bl	8003188 <HAL_TIM_IC_ConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 800143c:	f7ff fce2 	bl	8000e04 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001440:	463b      	mov	r3, r7
 8001442:	2204      	movs	r2, #4
 8001444:	4619      	mov	r1, r3
 8001446:	480c      	ldr	r0, [pc, #48]	@ (8001478 <MX_TIM4_Init+0x108>)
 8001448:	f001 fe9e 	bl	8003188 <HAL_TIM_IC_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8001452:	f7ff fcd7 	bl	8000e04 <Error_Handler>
  }
  sConfigIC.ICFilter = 3;
 8001456:	2303      	movs	r3, #3
 8001458:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800145a:	463b      	mov	r3, r7
 800145c:	2208      	movs	r2, #8
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	@ (8001478 <MX_TIM4_Init+0x108>)
 8001462:	f001 fe91 	bl	8003188 <HAL_TIM_IC_ConfigChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 800146c:	f7ff fcca 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	3728      	adds	r7, #40	@ 0x28
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	2000014c 	.word	0x2000014c
 800147c:	40000800 	.word	0x40000800

08001480 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001484:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <MX_TIM11_Init+0x40>)
 8001486:	4a0f      	ldr	r2, [pc, #60]	@ (80014c4 <MX_TIM11_Init+0x44>)
 8001488:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 800148a:	4b0d      	ldr	r3, [pc, #52]	@ (80014c0 <MX_TIM11_Init+0x40>)
 800148c:	2263      	movs	r2, #99	@ 0x63
 800148e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001490:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <MX_TIM11_Init+0x40>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001496:	4b0a      	ldr	r3, [pc, #40]	@ (80014c0 <MX_TIM11_Init+0x40>)
 8001498:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800149c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149e:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <MX_TIM11_Init+0x40>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a4:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <MX_TIM11_Init+0x40>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <MX_TIM11_Init+0x40>)
 80014ac:	f001 f9f2 	bl	8002894 <HAL_TIM_Base_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80014b6:	f7ff fca5 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000194 	.word	0x20000194
 80014c4:	40014800 	.word	0x40014800

080014c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08c      	sub	sp, #48	@ 0x30
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a35      	ldr	r2, [pc, #212]	@ (80015bc <HAL_TIM_Base_MspInit+0xf4>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d116      	bne.n	8001518 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
 80014ee:	4b34      	ldr	r3, [pc, #208]	@ (80015c0 <HAL_TIM_Base_MspInit+0xf8>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	4a33      	ldr	r2, [pc, #204]	@ (80015c0 <HAL_TIM_Base_MspInit+0xf8>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fa:	4b31      	ldr	r3, [pc, #196]	@ (80015c0 <HAL_TIM_Base_MspInit+0xf8>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	61bb      	str	r3, [r7, #24]
 8001504:	69bb      	ldr	r3, [r7, #24]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2105      	movs	r1, #5
 800150a:	201d      	movs	r0, #29
 800150c:	f000 fa9e 	bl	8001a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001510:	201d      	movs	r0, #29
 8001512:	f000 fab7 	bl	8001a84 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001516:	e04d      	b.n	80015b4 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM4)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a29      	ldr	r2, [pc, #164]	@ (80015c4 <HAL_TIM_Base_MspInit+0xfc>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d135      	bne.n	800158e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	4b26      	ldr	r3, [pc, #152]	@ (80015c0 <HAL_TIM_Base_MspInit+0xf8>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	4a25      	ldr	r2, [pc, #148]	@ (80015c0 <HAL_TIM_Base_MspInit+0xf8>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6413      	str	r3, [r2, #64]	@ 0x40
 8001532:	4b23      	ldr	r3, [pc, #140]	@ (80015c0 <HAL_TIM_Base_MspInit+0xf8>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b1f      	ldr	r3, [pc, #124]	@ (80015c0 <HAL_TIM_Base_MspInit+0xf8>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	4a1e      	ldr	r2, [pc, #120]	@ (80015c0 <HAL_TIM_Base_MspInit+0xf8>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	@ 0x30
 800154e:	4b1c      	ldr	r3, [pc, #112]	@ (80015c0 <HAL_TIM_Base_MspInit+0xf8>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800155a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800155e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800156c:	2302      	movs	r3, #2
 800156e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	4619      	mov	r1, r3
 8001576:	4814      	ldr	r0, [pc, #80]	@ (80015c8 <HAL_TIM_Base_MspInit+0x100>)
 8001578:	f000 fb24 	bl	8001bc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	2105      	movs	r1, #5
 8001580:	201e      	movs	r0, #30
 8001582:	f000 fa63 	bl	8001a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001586:	201e      	movs	r0, #30
 8001588:	f000 fa7c 	bl	8001a84 <HAL_NVIC_EnableIRQ>
}
 800158c:	e012      	b.n	80015b4 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM11)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a0e      	ldr	r2, [pc, #56]	@ (80015cc <HAL_TIM_Base_MspInit+0x104>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d10d      	bne.n	80015b4 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <HAL_TIM_Base_MspInit+0xf8>)
 800159e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a0:	4a07      	ldr	r2, [pc, #28]	@ (80015c0 <HAL_TIM_Base_MspInit+0xf8>)
 80015a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80015a8:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <HAL_TIM_Base_MspInit+0xf8>)
 80015aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3730      	adds	r7, #48	@ 0x30
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40000400 	.word	0x40000400
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40000800 	.word	0x40000800
 80015c8:	40020400 	.word	0x40020400
 80015cc:	40014800 	.word	0x40014800

080015d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a12      	ldr	r2, [pc, #72]	@ (8001638 <HAL_TIM_MspPostInit+0x68>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d11d      	bne.n	800162e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	4b11      	ldr	r3, [pc, #68]	@ (800163c <HAL_TIM_MspPostInit+0x6c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	4a10      	ldr	r2, [pc, #64]	@ (800163c <HAL_TIM_MspPostInit+0x6c>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6313      	str	r3, [r2, #48]	@ 0x30
 8001602:	4b0e      	ldr	r3, [pc, #56]	@ (800163c <HAL_TIM_MspPostInit+0x6c>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800160e:	23c0      	movs	r3, #192	@ 0xc0
 8001610:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800161e:	2302      	movs	r3, #2
 8001620:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	4619      	mov	r1, r3
 8001628:	4805      	ldr	r0, [pc, #20]	@ (8001640 <HAL_TIM_MspPostInit+0x70>)
 800162a:	f000 facb 	bl	8001bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800162e:	bf00      	nop
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40000400 	.word	0x40000400
 800163c:	40023800 	.word	0x40023800
 8001640:	40020000 	.word	0x40020000

08001644 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001648:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 800164a:	4a12      	ldr	r2, [pc, #72]	@ (8001694 <MX_USART1_UART_Init+0x50>)
 800164c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800164e:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 8001650:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001654:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b0e      	ldr	r3, [pc, #56]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001662:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166e:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800167a:	4805      	ldr	r0, [pc, #20]	@ (8001690 <MX_USART1_UART_Init+0x4c>)
 800167c:	f002 fc7e 	bl	8003f7c <HAL_UART_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001686:	f7ff fbbd 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200001dc 	.word	0x200001dc
 8001694:	40011000 	.word	0x40011000

08001698 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800169c:	4b11      	ldr	r3, [pc, #68]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 800169e:	4a12      	ldr	r2, [pc, #72]	@ (80016e8 <MX_USART2_UART_Init+0x50>)
 80016a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80016a2:	4b10      	ldr	r3, [pc, #64]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80016a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016bc:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016be:	220c      	movs	r2, #12
 80016c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c2:	4b08      	ldr	r3, [pc, #32]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c8:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ce:	4805      	ldr	r0, [pc, #20]	@ (80016e4 <MX_USART2_UART_Init+0x4c>)
 80016d0:	f002 fc54 	bl	8003f7c <HAL_UART_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016da:	f7ff fb93 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000224 	.word	0x20000224
 80016e8:	40004400 	.word	0x40004400

080016ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08c      	sub	sp, #48	@ 0x30
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 031c 	add.w	r3, r7, #28
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a3a      	ldr	r2, [pc, #232]	@ (80017f4 <HAL_UART_MspInit+0x108>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d135      	bne.n	800177a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	61bb      	str	r3, [r7, #24]
 8001712:	4b39      	ldr	r3, [pc, #228]	@ (80017f8 <HAL_UART_MspInit+0x10c>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001716:	4a38      	ldr	r2, [pc, #224]	@ (80017f8 <HAL_UART_MspInit+0x10c>)
 8001718:	f043 0310 	orr.w	r3, r3, #16
 800171c:	6453      	str	r3, [r2, #68]	@ 0x44
 800171e:	4b36      	ldr	r3, [pc, #216]	@ (80017f8 <HAL_UART_MspInit+0x10c>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	61bb      	str	r3, [r7, #24]
 8001728:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	4b32      	ldr	r3, [pc, #200]	@ (80017f8 <HAL_UART_MspInit+0x10c>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a31      	ldr	r2, [pc, #196]	@ (80017f8 <HAL_UART_MspInit+0x10c>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b2f      	ldr	r3, [pc, #188]	@ (80017f8 <HAL_UART_MspInit+0x10c>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001746:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800174a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001754:	2303      	movs	r3, #3
 8001756:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001758:	2307      	movs	r3, #7
 800175a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	f107 031c 	add.w	r3, r7, #28
 8001760:	4619      	mov	r1, r3
 8001762:	4826      	ldr	r0, [pc, #152]	@ (80017fc <HAL_UART_MspInit+0x110>)
 8001764:	f000 fa2e 	bl	8001bc4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	2105      	movs	r1, #5
 800176c:	2025      	movs	r0, #37	@ 0x25
 800176e:	f000 f96d 	bl	8001a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001772:	2025      	movs	r0, #37	@ 0x25
 8001774:	f000 f986 	bl	8001a84 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001778:	e038      	b.n	80017ec <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a20      	ldr	r2, [pc, #128]	@ (8001800 <HAL_UART_MspInit+0x114>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d133      	bne.n	80017ec <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	4b1b      	ldr	r3, [pc, #108]	@ (80017f8 <HAL_UART_MspInit+0x10c>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178c:	4a1a      	ldr	r2, [pc, #104]	@ (80017f8 <HAL_UART_MspInit+0x10c>)
 800178e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001792:	6413      	str	r3, [r2, #64]	@ 0x40
 8001794:	4b18      	ldr	r3, [pc, #96]	@ (80017f8 <HAL_UART_MspInit+0x10c>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	4b14      	ldr	r3, [pc, #80]	@ (80017f8 <HAL_UART_MspInit+0x10c>)
 80017a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a8:	4a13      	ldr	r2, [pc, #76]	@ (80017f8 <HAL_UART_MspInit+0x10c>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b0:	4b11      	ldr	r3, [pc, #68]	@ (80017f8 <HAL_UART_MspInit+0x10c>)
 80017b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017bc:	230c      	movs	r3, #12
 80017be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c8:	2303      	movs	r3, #3
 80017ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017cc:	2307      	movs	r3, #7
 80017ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d0:	f107 031c 	add.w	r3, r7, #28
 80017d4:	4619      	mov	r1, r3
 80017d6:	4809      	ldr	r0, [pc, #36]	@ (80017fc <HAL_UART_MspInit+0x110>)
 80017d8:	f000 f9f4 	bl	8001bc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80017dc:	2200      	movs	r2, #0
 80017de:	2105      	movs	r1, #5
 80017e0:	2026      	movs	r0, #38	@ 0x26
 80017e2:	f000 f933 	bl	8001a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017e6:	2026      	movs	r0, #38	@ 0x26
 80017e8:	f000 f94c 	bl	8001a84 <HAL_NVIC_EnableIRQ>
}
 80017ec:	bf00      	nop
 80017ee:	3730      	adds	r7, #48	@ 0x30
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40011000 	.word	0x40011000
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020000 	.word	0x40020000
 8001800:	40004400 	.word	0x40004400

08001804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001804:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800183c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001808:	f7ff fd1e 	bl	8001248 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800180c:	480c      	ldr	r0, [pc, #48]	@ (8001840 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800180e:	490d      	ldr	r1, [pc, #52]	@ (8001844 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001810:	4a0d      	ldr	r2, [pc, #52]	@ (8001848 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001814:	e002      	b.n	800181c <LoopCopyDataInit>

08001816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181a:	3304      	adds	r3, #4

0800181c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800181c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001820:	d3f9      	bcc.n	8001816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001822:	4a0a      	ldr	r2, [pc, #40]	@ (800184c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001824:	4c0a      	ldr	r4, [pc, #40]	@ (8001850 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001828:	e001      	b.n	800182e <LoopFillZerobss>

0800182a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800182c:	3204      	adds	r2, #4

0800182e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001830:	d3fb      	bcc.n	800182a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001832:	f006 fbcb 	bl	8007fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001836:	f7ff fa3d 	bl	8000cb4 <main>
  bx  lr    
 800183a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800183c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001844:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001848:	08008d04 	.word	0x08008d04
  ldr r2, =_sbss
 800184c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001850:	20004da4 	.word	0x20004da4

08001854 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001854:	e7fe      	b.n	8001854 <ADC_IRQHandler>
	...

08001858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800185c:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <HAL_Init+0x40>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0d      	ldr	r2, [pc, #52]	@ (8001898 <HAL_Init+0x40>)
 8001862:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001866:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001868:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <HAL_Init+0x40>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0a      	ldr	r2, [pc, #40]	@ (8001898 <HAL_Init+0x40>)
 800186e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001872:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001874:	4b08      	ldr	r3, [pc, #32]	@ (8001898 <HAL_Init+0x40>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a07      	ldr	r2, [pc, #28]	@ (8001898 <HAL_Init+0x40>)
 800187a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800187e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001880:	2003      	movs	r0, #3
 8001882:	f000 f8d8 	bl	8001a36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001886:	200f      	movs	r0, #15
 8001888:	f7ff fb7a 	bl	8000f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800188c:	f7ff fb4c 	bl	8000f28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023c00 	.word	0x40023c00

0800189c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_IncTick+0x20>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_IncTick+0x24>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <HAL_IncTick+0x24>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000008 	.word	0x20000008
 80018c0:	2000026c 	.word	0x2000026c

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b03      	ldr	r3, [pc, #12]	@ (80018d8 <HAL_GetTick+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	2000026c 	.word	0x2000026c

080018dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018f8:	4013      	ands	r3, r2
 80018fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001904:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800190c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190e:	4a04      	ldr	r2, [pc, #16]	@ (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	60d3      	str	r3, [r2, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001928:	4b04      	ldr	r3, [pc, #16]	@ (800193c <__NVIC_GetPriorityGrouping+0x18>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	f003 0307 	and.w	r3, r3, #7
}
 8001932:	4618      	mov	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	2b00      	cmp	r3, #0
 8001950:	db0b      	blt.n	800196a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	f003 021f 	and.w	r2, r3, #31
 8001958:	4907      	ldr	r1, [pc, #28]	@ (8001978 <__NVIC_EnableIRQ+0x38>)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	095b      	lsrs	r3, r3, #5
 8001960:	2001      	movs	r0, #1
 8001962:	fa00 f202 	lsl.w	r2, r0, r2
 8001966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000e100 	.word	0xe000e100

0800197c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	db0a      	blt.n	80019a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	490c      	ldr	r1, [pc, #48]	@ (80019c8 <__NVIC_SetPriority+0x4c>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	0112      	lsls	r2, r2, #4
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	440b      	add	r3, r1
 80019a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a4:	e00a      	b.n	80019bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4908      	ldr	r1, [pc, #32]	@ (80019cc <__NVIC_SetPriority+0x50>)
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	3b04      	subs	r3, #4
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	440b      	add	r3, r1
 80019ba:	761a      	strb	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000e100 	.word	0xe000e100
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	@ 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f1c3 0307 	rsb	r3, r3, #7
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	bf28      	it	cs
 80019ee:	2304      	movcs	r3, #4
 80019f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3304      	adds	r3, #4
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d902      	bls.n	8001a00 <NVIC_EncodePriority+0x30>
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3b03      	subs	r3, #3
 80019fe:	e000      	b.n	8001a02 <NVIC_EncodePriority+0x32>
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	401a      	ands	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43d9      	mvns	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	4313      	orrs	r3, r2
         );
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3724      	adds	r7, #36	@ 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ff4c 	bl	80018dc <__NVIC_SetPriorityGrouping>
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
 8001a58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a5e:	f7ff ff61 	bl	8001924 <__NVIC_GetPriorityGrouping>
 8001a62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	68b9      	ldr	r1, [r7, #8]
 8001a68:	6978      	ldr	r0, [r7, #20]
 8001a6a:	f7ff ffb1 	bl	80019d0 <NVIC_EncodePriority>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ff80 	bl	800197c <__NVIC_SetPriority>
}
 8001a7c:	bf00      	nop
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ff54 	bl	8001940 <__NVIC_EnableIRQ>
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001aae:	f7ff ff09 	bl	80018c4 <HAL_GetTick>
 8001ab2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d008      	beq.n	8001ad2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2280      	movs	r2, #128	@ 0x80
 8001ac4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e052      	b.n	8001b78 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0216 	bic.w	r2, r2, #22
 8001ae0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	695a      	ldr	r2, [r3, #20]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001af0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d103      	bne.n	8001b02 <HAL_DMA_Abort+0x62>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d007      	beq.n	8001b12 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0208 	bic.w	r2, r2, #8
 8001b10:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0201 	bic.w	r2, r2, #1
 8001b20:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b22:	e013      	b.n	8001b4c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b24:	f7ff fece 	bl	80018c4 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b05      	cmp	r3, #5
 8001b30:	d90c      	bls.n	8001b4c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2220      	movs	r2, #32
 8001b36:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e015      	b.n	8001b78 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1e4      	bne.n	8001b24 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b5e:	223f      	movs	r2, #63	@ 0x3f
 8001b60:	409a      	lsls	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d004      	beq.n	8001b9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2280      	movs	r2, #128	@ 0x80
 8001b98:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e00c      	b.n	8001bb8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2205      	movs	r2, #5
 8001ba2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0201 	bic.w	r2, r2, #1
 8001bb4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	@ 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
 8001bde:	e159      	b.n	8001e94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001be0:	2201      	movs	r2, #1
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	f040 8148 	bne.w	8001e8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d005      	beq.n	8001c16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d130      	bne.n	8001c78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	2203      	movs	r2, #3
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 0201 	and.w	r2, r3, #1
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d017      	beq.n	8001cb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	2203      	movs	r2, #3
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d123      	bne.n	8001d08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	08da      	lsrs	r2, r3, #3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3208      	adds	r2, #8
 8001cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	220f      	movs	r2, #15
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	08da      	lsrs	r2, r3, #3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3208      	adds	r2, #8
 8001d02:	69b9      	ldr	r1, [r7, #24]
 8001d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	2203      	movs	r2, #3
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0203 	and.w	r2, r3, #3
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 80a2 	beq.w	8001e8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	4b57      	ldr	r3, [pc, #348]	@ (8001eac <HAL_GPIO_Init+0x2e8>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d52:	4a56      	ldr	r2, [pc, #344]	@ (8001eac <HAL_GPIO_Init+0x2e8>)
 8001d54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d5a:	4b54      	ldr	r3, [pc, #336]	@ (8001eac <HAL_GPIO_Init+0x2e8>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d66:	4a52      	ldr	r2, [pc, #328]	@ (8001eb0 <HAL_GPIO_Init+0x2ec>)
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	220f      	movs	r2, #15
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a49      	ldr	r2, [pc, #292]	@ (8001eb4 <HAL_GPIO_Init+0x2f0>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d019      	beq.n	8001dc6 <HAL_GPIO_Init+0x202>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a48      	ldr	r2, [pc, #288]	@ (8001eb8 <HAL_GPIO_Init+0x2f4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d013      	beq.n	8001dc2 <HAL_GPIO_Init+0x1fe>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a47      	ldr	r2, [pc, #284]	@ (8001ebc <HAL_GPIO_Init+0x2f8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d00d      	beq.n	8001dbe <HAL_GPIO_Init+0x1fa>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a46      	ldr	r2, [pc, #280]	@ (8001ec0 <HAL_GPIO_Init+0x2fc>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d007      	beq.n	8001dba <HAL_GPIO_Init+0x1f6>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a45      	ldr	r2, [pc, #276]	@ (8001ec4 <HAL_GPIO_Init+0x300>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d101      	bne.n	8001db6 <HAL_GPIO_Init+0x1f2>
 8001db2:	2304      	movs	r3, #4
 8001db4:	e008      	b.n	8001dc8 <HAL_GPIO_Init+0x204>
 8001db6:	2307      	movs	r3, #7
 8001db8:	e006      	b.n	8001dc8 <HAL_GPIO_Init+0x204>
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e004      	b.n	8001dc8 <HAL_GPIO_Init+0x204>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e002      	b.n	8001dc8 <HAL_GPIO_Init+0x204>
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <HAL_GPIO_Init+0x204>
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	69fa      	ldr	r2, [r7, #28]
 8001dca:	f002 0203 	and.w	r2, r2, #3
 8001dce:	0092      	lsls	r2, r2, #2
 8001dd0:	4093      	lsls	r3, r2
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dd8:	4935      	ldr	r1, [pc, #212]	@ (8001eb0 <HAL_GPIO_Init+0x2ec>)
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	089b      	lsrs	r3, r3, #2
 8001dde:	3302      	adds	r3, #2
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001de6:	4b38      	ldr	r3, [pc, #224]	@ (8001ec8 <HAL_GPIO_Init+0x304>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e0a:	4a2f      	ldr	r2, [pc, #188]	@ (8001ec8 <HAL_GPIO_Init+0x304>)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e10:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec8 <HAL_GPIO_Init+0x304>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e34:	4a24      	ldr	r2, [pc, #144]	@ (8001ec8 <HAL_GPIO_Init+0x304>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e3a:	4b23      	ldr	r3, [pc, #140]	@ (8001ec8 <HAL_GPIO_Init+0x304>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e5e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ec8 <HAL_GPIO_Init+0x304>)
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e64:	4b18      	ldr	r3, [pc, #96]	@ (8001ec8 <HAL_GPIO_Init+0x304>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e88:	4a0f      	ldr	r2, [pc, #60]	@ (8001ec8 <HAL_GPIO_Init+0x304>)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3301      	adds	r3, #1
 8001e92:	61fb      	str	r3, [r7, #28]
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	2b0f      	cmp	r3, #15
 8001e98:	f67f aea2 	bls.w	8001be0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3724      	adds	r7, #36	@ 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40013800 	.word	0x40013800
 8001eb4:	40020000 	.word	0x40020000
 8001eb8:	40020400 	.word	0x40020400
 8001ebc:	40020800 	.word	0x40020800
 8001ec0:	40020c00 	.word	0x40020c00
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40013c00 	.word	0x40013c00

08001ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	807b      	strh	r3, [r7, #2]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001edc:	787b      	ldrb	r3, [r7, #1]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ee2:	887a      	ldrh	r2, [r7, #2]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ee8:	e003      	b.n	8001ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eea:	887b      	ldrh	r3, [r7, #2]
 8001eec:	041a      	lsls	r2, r3, #16
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	619a      	str	r2, [r3, #24]
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e267      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d075      	beq.n	800200a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f1e:	4b88      	ldr	r3, [pc, #544]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d00c      	beq.n	8001f44 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f2a:	4b85      	ldr	r3, [pc, #532]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d112      	bne.n	8001f5c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f36:	4b82      	ldr	r3, [pc, #520]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f42:	d10b      	bne.n	8001f5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f44:	4b7e      	ldr	r3, [pc, #504]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d05b      	beq.n	8002008 <HAL_RCC_OscConfig+0x108>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d157      	bne.n	8002008 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e242      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f64:	d106      	bne.n	8001f74 <HAL_RCC_OscConfig+0x74>
 8001f66:	4b76      	ldr	r3, [pc, #472]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a75      	ldr	r2, [pc, #468]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e01d      	b.n	8001fb0 <HAL_RCC_OscConfig+0xb0>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0x98>
 8001f7e:	4b70      	ldr	r3, [pc, #448]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a6f      	ldr	r2, [pc, #444]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b6d      	ldr	r3, [pc, #436]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a6c      	ldr	r2, [pc, #432]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCC_OscConfig+0xb0>
 8001f98:	4b69      	ldr	r3, [pc, #420]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a68      	ldr	r2, [pc, #416]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b66      	ldr	r3, [pc, #408]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a65      	ldr	r2, [pc, #404]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001faa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fc84 	bl	80018c4 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7ff fc80 	bl	80018c4 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	@ 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e207      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	4b5b      	ldr	r3, [pc, #364]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0xc0>
 8001fde:	e014      	b.n	800200a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe0:	f7ff fc70 	bl	80018c4 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7ff fc6c 	bl	80018c4 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	@ 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e1f3      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffa:	4b51      	ldr	r3, [pc, #324]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0xe8>
 8002006:	e000      	b.n	800200a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d063      	beq.n	80020de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002016:	4b4a      	ldr	r3, [pc, #296]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002022:	4b47      	ldr	r3, [pc, #284]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800202a:	2b08      	cmp	r3, #8
 800202c:	d11c      	bne.n	8002068 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800202e:	4b44      	ldr	r3, [pc, #272]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d116      	bne.n	8002068 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	4b41      	ldr	r3, [pc, #260]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_RCC_OscConfig+0x152>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e1c7      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002052:	4b3b      	ldr	r3, [pc, #236]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4937      	ldr	r1, [pc, #220]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	e03a      	b.n	80020de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d020      	beq.n	80020b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002070:	4b34      	ldr	r3, [pc, #208]	@ (8002144 <HAL_RCC_OscConfig+0x244>)
 8002072:	2201      	movs	r2, #1
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002076:	f7ff fc25 	bl	80018c4 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800207e:	f7ff fc21 	bl	80018c4 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e1a8      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002090:	4b2b      	ldr	r3, [pc, #172]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209c:	4b28      	ldr	r3, [pc, #160]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4925      	ldr	r1, [pc, #148]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
 80020b0:	e015      	b.n	80020de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b2:	4b24      	ldr	r3, [pc, #144]	@ (8002144 <HAL_RCC_OscConfig+0x244>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7ff fc04 	bl	80018c4 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c0:	f7ff fc00 	bl	80018c4 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e187      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d036      	beq.n	8002158 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d016      	beq.n	8002120 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f2:	4b15      	ldr	r3, [pc, #84]	@ (8002148 <HAL_RCC_OscConfig+0x248>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7ff fbe4 	bl	80018c4 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002100:	f7ff fbe0 	bl	80018c4 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e167      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002112:	4b0b      	ldr	r3, [pc, #44]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8002114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x200>
 800211e:	e01b      	b.n	8002158 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002120:	4b09      	ldr	r3, [pc, #36]	@ (8002148 <HAL_RCC_OscConfig+0x248>)
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002126:	f7ff fbcd 	bl	80018c4 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212c:	e00e      	b.n	800214c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800212e:	f7ff fbc9 	bl	80018c4 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d907      	bls.n	800214c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e150      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
 8002140:	40023800 	.word	0x40023800
 8002144:	42470000 	.word	0x42470000
 8002148:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214c:	4b88      	ldr	r3, [pc, #544]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 800214e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1ea      	bne.n	800212e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 8097 	beq.w	8002294 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800216a:	4b81      	ldr	r3, [pc, #516]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10f      	bne.n	8002196 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	4b7d      	ldr	r3, [pc, #500]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	4a7c      	ldr	r2, [pc, #496]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002184:	6413      	str	r3, [r2, #64]	@ 0x40
 8002186:	4b7a      	ldr	r3, [pc, #488]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002192:	2301      	movs	r3, #1
 8002194:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002196:	4b77      	ldr	r3, [pc, #476]	@ (8002374 <HAL_RCC_OscConfig+0x474>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d118      	bne.n	80021d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a2:	4b74      	ldr	r3, [pc, #464]	@ (8002374 <HAL_RCC_OscConfig+0x474>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a73      	ldr	r2, [pc, #460]	@ (8002374 <HAL_RCC_OscConfig+0x474>)
 80021a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ae:	f7ff fb89 	bl	80018c4 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b6:	f7ff fb85 	bl	80018c4 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e10c      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002374 <HAL_RCC_OscConfig+0x474>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d106      	bne.n	80021ea <HAL_RCC_OscConfig+0x2ea>
 80021dc:	4b64      	ldr	r3, [pc, #400]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 80021de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e0:	4a63      	ldr	r2, [pc, #396]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80021e8:	e01c      	b.n	8002224 <HAL_RCC_OscConfig+0x324>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2b05      	cmp	r3, #5
 80021f0:	d10c      	bne.n	800220c <HAL_RCC_OscConfig+0x30c>
 80021f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 80021f8:	f043 0304 	orr.w	r3, r3, #4
 80021fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80021fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 8002200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002202:	4a5b      	ldr	r2, [pc, #364]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6713      	str	r3, [r2, #112]	@ 0x70
 800220a:	e00b      	b.n	8002224 <HAL_RCC_OscConfig+0x324>
 800220c:	4b58      	ldr	r3, [pc, #352]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 800220e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002210:	4a57      	ldr	r2, [pc, #348]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 8002212:	f023 0301 	bic.w	r3, r3, #1
 8002216:	6713      	str	r3, [r2, #112]	@ 0x70
 8002218:	4b55      	ldr	r3, [pc, #340]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 800221a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800221c:	4a54      	ldr	r2, [pc, #336]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 800221e:	f023 0304 	bic.w	r3, r3, #4
 8002222:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d015      	beq.n	8002258 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222c:	f7ff fb4a 	bl	80018c4 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002232:	e00a      	b.n	800224a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002234:	f7ff fb46 	bl	80018c4 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e0cb      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224a:	4b49      	ldr	r3, [pc, #292]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0ee      	beq.n	8002234 <HAL_RCC_OscConfig+0x334>
 8002256:	e014      	b.n	8002282 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002258:	f7ff fb34 	bl	80018c4 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225e:	e00a      	b.n	8002276 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002260:	f7ff fb30 	bl	80018c4 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e0b5      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002276:	4b3e      	ldr	r3, [pc, #248]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1ee      	bne.n	8002260 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002282:	7dfb      	ldrb	r3, [r7, #23]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d105      	bne.n	8002294 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002288:	4b39      	ldr	r3, [pc, #228]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 800228a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228c:	4a38      	ldr	r2, [pc, #224]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 800228e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002292:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80a1 	beq.w	80023e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800229e:	4b34      	ldr	r3, [pc, #208]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d05c      	beq.n	8002364 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d141      	bne.n	8002336 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b2:	4b31      	ldr	r3, [pc, #196]	@ (8002378 <HAL_RCC_OscConfig+0x478>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7ff fb04 	bl	80018c4 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c0:	f7ff fb00 	bl	80018c4 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e087      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d2:	4b27      	ldr	r3, [pc, #156]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69da      	ldr	r2, [r3, #28]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ec:	019b      	lsls	r3, r3, #6
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	3b01      	subs	r3, #1
 80022f8:	041b      	lsls	r3, r3, #16
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002300:	061b      	lsls	r3, r3, #24
 8002302:	491b      	ldr	r1, [pc, #108]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 8002304:	4313      	orrs	r3, r2
 8002306:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002308:	4b1b      	ldr	r3, [pc, #108]	@ (8002378 <HAL_RCC_OscConfig+0x478>)
 800230a:	2201      	movs	r2, #1
 800230c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230e:	f7ff fad9 	bl	80018c4 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002316:	f7ff fad5 	bl	80018c4 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e05c      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002328:	4b11      	ldr	r3, [pc, #68]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f0      	beq.n	8002316 <HAL_RCC_OscConfig+0x416>
 8002334:	e054      	b.n	80023e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002336:	4b10      	ldr	r3, [pc, #64]	@ (8002378 <HAL_RCC_OscConfig+0x478>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233c:	f7ff fac2 	bl	80018c4 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002344:	f7ff fabe 	bl	80018c4 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e045      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002356:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x444>
 8002362:	e03d      	b.n	80023e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d107      	bne.n	800237c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e038      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
 8002370:	40023800 	.word	0x40023800
 8002374:	40007000 	.word	0x40007000
 8002378:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800237c:	4b1b      	ldr	r3, [pc, #108]	@ (80023ec <HAL_RCC_OscConfig+0x4ec>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d028      	beq.n	80023dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002394:	429a      	cmp	r2, r3
 8002396:	d121      	bne.n	80023dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d11a      	bne.n	80023dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023ac:	4013      	ands	r3, r2
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d111      	bne.n	80023dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c2:	085b      	lsrs	r3, r3, #1
 80023c4:	3b01      	subs	r3, #1
 80023c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d107      	bne.n	80023dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e000      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800

080023f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0cc      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002404:	4b68      	ldr	r3, [pc, #416]	@ (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d90c      	bls.n	800242c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002412:	4b65      	ldr	r3, [pc, #404]	@ (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241a:	4b63      	ldr	r3, [pc, #396]	@ (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d001      	beq.n	800242c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0b8      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d020      	beq.n	800247a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002444:	4b59      	ldr	r3, [pc, #356]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4a58      	ldr	r2, [pc, #352]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800244e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800245c:	4b53      	ldr	r3, [pc, #332]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	4a52      	ldr	r2, [pc, #328]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002466:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002468:	4b50      	ldr	r3, [pc, #320]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	494d      	ldr	r1, [pc, #308]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d044      	beq.n	8002510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	4b47      	ldr	r3, [pc, #284]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d119      	bne.n	80024ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e07f      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d003      	beq.n	80024ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d107      	bne.n	80024be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ae:	4b3f      	ldr	r3, [pc, #252]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d109      	bne.n	80024ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e06f      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024be:	4b3b      	ldr	r3, [pc, #236]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e067      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ce:	4b37      	ldr	r3, [pc, #220]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f023 0203 	bic.w	r2, r3, #3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4934      	ldr	r1, [pc, #208]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e0:	f7ff f9f0 	bl	80018c4 <HAL_GetTick>
 80024e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e6:	e00a      	b.n	80024fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e8:	f7ff f9ec 	bl	80018c4 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e04f      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fe:	4b2b      	ldr	r3, [pc, #172]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 020c 	and.w	r2, r3, #12
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	429a      	cmp	r2, r3
 800250e:	d1eb      	bne.n	80024e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002510:	4b25      	ldr	r3, [pc, #148]	@ (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d20c      	bcs.n	8002538 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251e:	4b22      	ldr	r3, [pc, #136]	@ (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002526:	4b20      	ldr	r3, [pc, #128]	@ (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e032      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002544:	4b19      	ldr	r3, [pc, #100]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4916      	ldr	r1, [pc, #88]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	4313      	orrs	r3, r2
 8002554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002562:	4b12      	ldr	r3, [pc, #72]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	490e      	ldr	r1, [pc, #56]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002576:	f000 f821 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 800257a:	4602      	mov	r2, r0
 800257c:	4b0b      	ldr	r3, [pc, #44]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	490a      	ldr	r1, [pc, #40]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002588:	5ccb      	ldrb	r3, [r1, r3]
 800258a:	fa22 f303 	lsr.w	r3, r2, r3
 800258e:	4a09      	ldr	r2, [pc, #36]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002592:	4b09      	ldr	r3, [pc, #36]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fcf2 	bl	8000f80 <HAL_InitTick>

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40023c00 	.word	0x40023c00
 80025ac:	40023800 	.word	0x40023800
 80025b0:	08008ca8 	.word	0x08008ca8
 80025b4:	20000000 	.word	0x20000000
 80025b8:	20000004 	.word	0x20000004

080025bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025c0:	b094      	sub	sp, #80	@ 0x50
 80025c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025d4:	4b79      	ldr	r3, [pc, #484]	@ (80027bc <HAL_RCC_GetSysClockFreq+0x200>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d00d      	beq.n	80025fc <HAL_RCC_GetSysClockFreq+0x40>
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	f200 80e1 	bhi.w	80027a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x34>
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d003      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80025ee:	e0db      	b.n	80027a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025f0:	4b73      	ldr	r3, [pc, #460]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80025f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025f4:	e0db      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025f6:	4b73      	ldr	r3, [pc, #460]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80025f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025fa:	e0d8      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025fc:	4b6f      	ldr	r3, [pc, #444]	@ (80027bc <HAL_RCC_GetSysClockFreq+0x200>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002604:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002606:	4b6d      	ldr	r3, [pc, #436]	@ (80027bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d063      	beq.n	80026da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002612:	4b6a      	ldr	r3, [pc, #424]	@ (80027bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	099b      	lsrs	r3, r3, #6
 8002618:	2200      	movs	r2, #0
 800261a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800261c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800261e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002624:	633b      	str	r3, [r7, #48]	@ 0x30
 8002626:	2300      	movs	r3, #0
 8002628:	637b      	str	r3, [r7, #52]	@ 0x34
 800262a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800262e:	4622      	mov	r2, r4
 8002630:	462b      	mov	r3, r5
 8002632:	f04f 0000 	mov.w	r0, #0
 8002636:	f04f 0100 	mov.w	r1, #0
 800263a:	0159      	lsls	r1, r3, #5
 800263c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002640:	0150      	lsls	r0, r2, #5
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	4621      	mov	r1, r4
 8002648:	1a51      	subs	r1, r2, r1
 800264a:	6139      	str	r1, [r7, #16]
 800264c:	4629      	mov	r1, r5
 800264e:	eb63 0301 	sbc.w	r3, r3, r1
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002660:	4659      	mov	r1, fp
 8002662:	018b      	lsls	r3, r1, #6
 8002664:	4651      	mov	r1, sl
 8002666:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800266a:	4651      	mov	r1, sl
 800266c:	018a      	lsls	r2, r1, #6
 800266e:	4651      	mov	r1, sl
 8002670:	ebb2 0801 	subs.w	r8, r2, r1
 8002674:	4659      	mov	r1, fp
 8002676:	eb63 0901 	sbc.w	r9, r3, r1
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	f04f 0300 	mov.w	r3, #0
 8002682:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002686:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800268a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800268e:	4690      	mov	r8, r2
 8002690:	4699      	mov	r9, r3
 8002692:	4623      	mov	r3, r4
 8002694:	eb18 0303 	adds.w	r3, r8, r3
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	462b      	mov	r3, r5
 800269c:	eb49 0303 	adc.w	r3, r9, r3
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026ae:	4629      	mov	r1, r5
 80026b0:	024b      	lsls	r3, r1, #9
 80026b2:	4621      	mov	r1, r4
 80026b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026b8:	4621      	mov	r1, r4
 80026ba:	024a      	lsls	r2, r1, #9
 80026bc:	4610      	mov	r0, r2
 80026be:	4619      	mov	r1, r3
 80026c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026c2:	2200      	movs	r2, #0
 80026c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80026cc:	f7fd fdd8 	bl	8000280 <__aeabi_uldivmod>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4613      	mov	r3, r2
 80026d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026d8:	e058      	b.n	800278c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026da:	4b38      	ldr	r3, [pc, #224]	@ (80027bc <HAL_RCC_GetSysClockFreq+0x200>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	099b      	lsrs	r3, r3, #6
 80026e0:	2200      	movs	r2, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	4611      	mov	r1, r2
 80026e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026ea:	623b      	str	r3, [r7, #32]
 80026ec:	2300      	movs	r3, #0
 80026ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80026f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026f4:	4642      	mov	r2, r8
 80026f6:	464b      	mov	r3, r9
 80026f8:	f04f 0000 	mov.w	r0, #0
 80026fc:	f04f 0100 	mov.w	r1, #0
 8002700:	0159      	lsls	r1, r3, #5
 8002702:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002706:	0150      	lsls	r0, r2, #5
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4641      	mov	r1, r8
 800270e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002712:	4649      	mov	r1, r9
 8002714:	eb63 0b01 	sbc.w	fp, r3, r1
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002724:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002728:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800272c:	ebb2 040a 	subs.w	r4, r2, sl
 8002730:	eb63 050b 	sbc.w	r5, r3, fp
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	00eb      	lsls	r3, r5, #3
 800273e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002742:	00e2      	lsls	r2, r4, #3
 8002744:	4614      	mov	r4, r2
 8002746:	461d      	mov	r5, r3
 8002748:	4643      	mov	r3, r8
 800274a:	18e3      	adds	r3, r4, r3
 800274c:	603b      	str	r3, [r7, #0]
 800274e:	464b      	mov	r3, r9
 8002750:	eb45 0303 	adc.w	r3, r5, r3
 8002754:	607b      	str	r3, [r7, #4]
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002762:	4629      	mov	r1, r5
 8002764:	028b      	lsls	r3, r1, #10
 8002766:	4621      	mov	r1, r4
 8002768:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800276c:	4621      	mov	r1, r4
 800276e:	028a      	lsls	r2, r1, #10
 8002770:	4610      	mov	r0, r2
 8002772:	4619      	mov	r1, r3
 8002774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002776:	2200      	movs	r2, #0
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	61fa      	str	r2, [r7, #28]
 800277c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002780:	f7fd fd7e 	bl	8000280 <__aeabi_uldivmod>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4613      	mov	r3, r2
 800278a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800278c:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <HAL_RCC_GetSysClockFreq+0x200>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	0c1b      	lsrs	r3, r3, #16
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	3301      	adds	r3, #1
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800279c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800279e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027a6:	e002      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027a8:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80027aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3750      	adds	r7, #80	@ 0x50
 80027b4:	46bd      	mov	sp, r7
 80027b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800
 80027c0:	00f42400 	.word	0x00f42400
 80027c4:	007a1200 	.word	0x007a1200

080027c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027cc:	4b03      	ldr	r3, [pc, #12]	@ (80027dc <HAL_RCC_GetHCLKFreq+0x14>)
 80027ce:	681b      	ldr	r3, [r3, #0]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000000 	.word	0x20000000

080027e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027e4:	f7ff fff0 	bl	80027c8 <HAL_RCC_GetHCLKFreq>
 80027e8:	4602      	mov	r2, r0
 80027ea:	4b05      	ldr	r3, [pc, #20]	@ (8002800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	0a9b      	lsrs	r3, r3, #10
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	4903      	ldr	r1, [pc, #12]	@ (8002804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027f6:	5ccb      	ldrb	r3, [r1, r3]
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40023800 	.word	0x40023800
 8002804:	08008cb8 	.word	0x08008cb8

08002808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800280c:	f7ff ffdc 	bl	80027c8 <HAL_RCC_GetHCLKFreq>
 8002810:	4602      	mov	r2, r0
 8002812:	4b05      	ldr	r3, [pc, #20]	@ (8002828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	0b5b      	lsrs	r3, r3, #13
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	4903      	ldr	r1, [pc, #12]	@ (800282c <HAL_RCC_GetPCLK2Freq+0x24>)
 800281e:	5ccb      	ldrb	r3, [r1, r3]
 8002820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002824:	4618      	mov	r0, r3
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40023800 	.word	0x40023800
 800282c:	08008cb8 	.word	0x08008cb8

08002830 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	220f      	movs	r2, #15
 800283e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002840:	4b12      	ldr	r3, [pc, #72]	@ (800288c <HAL_RCC_GetClockConfig+0x5c>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 0203 	and.w	r2, r3, #3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800284c:	4b0f      	ldr	r3, [pc, #60]	@ (800288c <HAL_RCC_GetClockConfig+0x5c>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002858:	4b0c      	ldr	r3, [pc, #48]	@ (800288c <HAL_RCC_GetClockConfig+0x5c>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002864:	4b09      	ldr	r3, [pc, #36]	@ (800288c <HAL_RCC_GetClockConfig+0x5c>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	08db      	lsrs	r3, r3, #3
 800286a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002872:	4b07      	ldr	r3, [pc, #28]	@ (8002890 <HAL_RCC_GetClockConfig+0x60>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0207 	and.w	r2, r3, #7
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	601a      	str	r2, [r3, #0]
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800
 8002890:	40023c00 	.word	0x40023c00

08002894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e041      	b.n	800292a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d106      	bne.n	80028c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7fe fe04 	bl	80014c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3304      	adds	r3, #4
 80028d0:	4619      	mov	r1, r3
 80028d2:	4610      	mov	r0, r2
 80028d4:	f000 fee0 	bl	8003698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b01      	cmp	r3, #1
 8002946:	d001      	beq.n	800294c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e03c      	b.n	80029c6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1e      	ldr	r2, [pc, #120]	@ (80029d4 <HAL_TIM_Base_Start+0xa0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d018      	beq.n	8002990 <HAL_TIM_Base_Start+0x5c>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002966:	d013      	beq.n	8002990 <HAL_TIM_Base_Start+0x5c>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1a      	ldr	r2, [pc, #104]	@ (80029d8 <HAL_TIM_Base_Start+0xa4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00e      	beq.n	8002990 <HAL_TIM_Base_Start+0x5c>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a19      	ldr	r2, [pc, #100]	@ (80029dc <HAL_TIM_Base_Start+0xa8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d009      	beq.n	8002990 <HAL_TIM_Base_Start+0x5c>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a17      	ldr	r2, [pc, #92]	@ (80029e0 <HAL_TIM_Base_Start+0xac>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d004      	beq.n	8002990 <HAL_TIM_Base_Start+0x5c>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a16      	ldr	r2, [pc, #88]	@ (80029e4 <HAL_TIM_Base_Start+0xb0>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d111      	bne.n	80029b4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b06      	cmp	r3, #6
 80029a0:	d010      	beq.n	80029c4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0201 	orr.w	r2, r2, #1
 80029b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b2:	e007      	b.n	80029c4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0201 	orr.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40010000 	.word	0x40010000
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40000800 	.word	0x40000800
 80029e0:	40000c00 	.word	0x40000c00
 80029e4:	40014000 	.word	0x40014000

080029e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d001      	beq.n	8002a00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e044      	b.n	8002a8a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a1e      	ldr	r2, [pc, #120]	@ (8002a98 <HAL_TIM_Base_Start_IT+0xb0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d018      	beq.n	8002a54 <HAL_TIM_Base_Start_IT+0x6c>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a2a:	d013      	beq.n	8002a54 <HAL_TIM_Base_Start_IT+0x6c>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a1a      	ldr	r2, [pc, #104]	@ (8002a9c <HAL_TIM_Base_Start_IT+0xb4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00e      	beq.n	8002a54 <HAL_TIM_Base_Start_IT+0x6c>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a19      	ldr	r2, [pc, #100]	@ (8002aa0 <HAL_TIM_Base_Start_IT+0xb8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d009      	beq.n	8002a54 <HAL_TIM_Base_Start_IT+0x6c>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a17      	ldr	r2, [pc, #92]	@ (8002aa4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d004      	beq.n	8002a54 <HAL_TIM_Base_Start_IT+0x6c>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a16      	ldr	r2, [pc, #88]	@ (8002aa8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d111      	bne.n	8002a78 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2b06      	cmp	r3, #6
 8002a64:	d010      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0201 	orr.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a76:	e007      	b.n	8002a88 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40010000 	.word	0x40010000
 8002a9c:	40000400 	.word	0x40000400
 8002aa0:	40000800 	.word	0x40000800
 8002aa4:	40000c00 	.word	0x40000c00
 8002aa8:	40014000 	.word	0x40014000

08002aac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e041      	b.n	8002b42 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f839 	bl	8002b4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4610      	mov	r0, r2
 8002aec:	f000 fdd4 	bl	8003698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
	...

08002b60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d109      	bne.n	8002b84 <HAL_TIM_PWM_Start+0x24>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	bf14      	ite	ne
 8002b7c:	2301      	movne	r3, #1
 8002b7e:	2300      	moveq	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	e022      	b.n	8002bca <HAL_TIM_PWM_Start+0x6a>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d109      	bne.n	8002b9e <HAL_TIM_PWM_Start+0x3e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	bf14      	ite	ne
 8002b96:	2301      	movne	r3, #1
 8002b98:	2300      	moveq	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	e015      	b.n	8002bca <HAL_TIM_PWM_Start+0x6a>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d109      	bne.n	8002bb8 <HAL_TIM_PWM_Start+0x58>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	bf14      	ite	ne
 8002bb0:	2301      	movne	r3, #1
 8002bb2:	2300      	moveq	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	e008      	b.n	8002bca <HAL_TIM_PWM_Start+0x6a>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	bf14      	ite	ne
 8002bc4:	2301      	movne	r3, #1
 8002bc6:	2300      	moveq	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e068      	b.n	8002ca4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d104      	bne.n	8002be2 <HAL_TIM_PWM_Start+0x82>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002be0:	e013      	b.n	8002c0a <HAL_TIM_PWM_Start+0xaa>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d104      	bne.n	8002bf2 <HAL_TIM_PWM_Start+0x92>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bf0:	e00b      	b.n	8002c0a <HAL_TIM_PWM_Start+0xaa>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d104      	bne.n	8002c02 <HAL_TIM_PWM_Start+0xa2>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c00:	e003      	b.n	8002c0a <HAL_TIM_PWM_Start+0xaa>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2202      	movs	r2, #2
 8002c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	6839      	ldr	r1, [r7, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f001 f90a 	bl	8003e2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a23      	ldr	r2, [pc, #140]	@ (8002cac <HAL_TIM_PWM_Start+0x14c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d107      	bne.n	8002c32 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c30:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a1d      	ldr	r2, [pc, #116]	@ (8002cac <HAL_TIM_PWM_Start+0x14c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d018      	beq.n	8002c6e <HAL_TIM_PWM_Start+0x10e>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c44:	d013      	beq.n	8002c6e <HAL_TIM_PWM_Start+0x10e>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a19      	ldr	r2, [pc, #100]	@ (8002cb0 <HAL_TIM_PWM_Start+0x150>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d00e      	beq.n	8002c6e <HAL_TIM_PWM_Start+0x10e>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a17      	ldr	r2, [pc, #92]	@ (8002cb4 <HAL_TIM_PWM_Start+0x154>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d009      	beq.n	8002c6e <HAL_TIM_PWM_Start+0x10e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a16      	ldr	r2, [pc, #88]	@ (8002cb8 <HAL_TIM_PWM_Start+0x158>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d004      	beq.n	8002c6e <HAL_TIM_PWM_Start+0x10e>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a14      	ldr	r2, [pc, #80]	@ (8002cbc <HAL_TIM_PWM_Start+0x15c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d111      	bne.n	8002c92 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b06      	cmp	r3, #6
 8002c7e:	d010      	beq.n	8002ca2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c90:	e007      	b.n	8002ca2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0201 	orr.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40010000 	.word	0x40010000
 8002cb0:	40000400 	.word	0x40000400
 8002cb4:	40000800 	.word	0x40000800
 8002cb8:	40000c00 	.word	0x40000c00
 8002cbc:	40014000 	.word	0x40014000

08002cc0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e041      	b.n	8002d56 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d106      	bne.n	8002cec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f839 	bl	8002d5e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4610      	mov	r0, r2
 8002d00:	f000 fcca 	bl	8003698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d104      	bne.n	8002d92 <HAL_TIM_IC_Start_IT+0x1e>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	e013      	b.n	8002dba <HAL_TIM_IC_Start_IT+0x46>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d104      	bne.n	8002da2 <HAL_TIM_IC_Start_IT+0x2e>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	e00b      	b.n	8002dba <HAL_TIM_IC_Start_IT+0x46>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d104      	bne.n	8002db2 <HAL_TIM_IC_Start_IT+0x3e>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	e003      	b.n	8002dba <HAL_TIM_IC_Start_IT+0x46>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d104      	bne.n	8002dcc <HAL_TIM_IC_Start_IT+0x58>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	e013      	b.n	8002df4 <HAL_TIM_IC_Start_IT+0x80>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d104      	bne.n	8002ddc <HAL_TIM_IC_Start_IT+0x68>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	e00b      	b.n	8002df4 <HAL_TIM_IC_Start_IT+0x80>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d104      	bne.n	8002dec <HAL_TIM_IC_Start_IT+0x78>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	e003      	b.n	8002df4 <HAL_TIM_IC_Start_IT+0x80>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002df6:	7bbb      	ldrb	r3, [r7, #14]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d102      	bne.n	8002e02 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002dfc:	7b7b      	ldrb	r3, [r7, #13]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d001      	beq.n	8002e06 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e0c2      	b.n	8002f8c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d104      	bne.n	8002e16 <HAL_TIM_IC_Start_IT+0xa2>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e14:	e013      	b.n	8002e3e <HAL_TIM_IC_Start_IT+0xca>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d104      	bne.n	8002e26 <HAL_TIM_IC_Start_IT+0xb2>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e24:	e00b      	b.n	8002e3e <HAL_TIM_IC_Start_IT+0xca>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d104      	bne.n	8002e36 <HAL_TIM_IC_Start_IT+0xc2>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e34:	e003      	b.n	8002e3e <HAL_TIM_IC_Start_IT+0xca>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d104      	bne.n	8002e4e <HAL_TIM_IC_Start_IT+0xda>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2202      	movs	r2, #2
 8002e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e4c:	e013      	b.n	8002e76 <HAL_TIM_IC_Start_IT+0x102>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d104      	bne.n	8002e5e <HAL_TIM_IC_Start_IT+0xea>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e5c:	e00b      	b.n	8002e76 <HAL_TIM_IC_Start_IT+0x102>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d104      	bne.n	8002e6e <HAL_TIM_IC_Start_IT+0xfa>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e6c:	e003      	b.n	8002e76 <HAL_TIM_IC_Start_IT+0x102>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2202      	movs	r2, #2
 8002e72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b0c      	cmp	r3, #12
 8002e7a:	d841      	bhi.n	8002f00 <HAL_TIM_IC_Start_IT+0x18c>
 8002e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e84 <HAL_TIM_IC_Start_IT+0x110>)
 8002e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e82:	bf00      	nop
 8002e84:	08002eb9 	.word	0x08002eb9
 8002e88:	08002f01 	.word	0x08002f01
 8002e8c:	08002f01 	.word	0x08002f01
 8002e90:	08002f01 	.word	0x08002f01
 8002e94:	08002ecb 	.word	0x08002ecb
 8002e98:	08002f01 	.word	0x08002f01
 8002e9c:	08002f01 	.word	0x08002f01
 8002ea0:	08002f01 	.word	0x08002f01
 8002ea4:	08002edd 	.word	0x08002edd
 8002ea8:	08002f01 	.word	0x08002f01
 8002eac:	08002f01 	.word	0x08002f01
 8002eb0:	08002f01 	.word	0x08002f01
 8002eb4:	08002eef 	.word	0x08002eef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0202 	orr.w	r2, r2, #2
 8002ec6:	60da      	str	r2, [r3, #12]
      break;
 8002ec8:	e01d      	b.n	8002f06 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 0204 	orr.w	r2, r2, #4
 8002ed8:	60da      	str	r2, [r3, #12]
      break;
 8002eda:	e014      	b.n	8002f06 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0208 	orr.w	r2, r2, #8
 8002eea:	60da      	str	r2, [r3, #12]
      break;
 8002eec:	e00b      	b.n	8002f06 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 0210 	orr.w	r2, r2, #16
 8002efc:	60da      	str	r2, [r3, #12]
      break;
 8002efe:	e002      	b.n	8002f06 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
      break;
 8002f04:	bf00      	nop
  }

  if (status == HAL_OK)
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d13e      	bne.n	8002f8a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2201      	movs	r2, #1
 8002f12:	6839      	ldr	r1, [r7, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 ff89 	bl	8003e2c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a1d      	ldr	r2, [pc, #116]	@ (8002f94 <HAL_TIM_IC_Start_IT+0x220>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d018      	beq.n	8002f56 <HAL_TIM_IC_Start_IT+0x1e2>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f2c:	d013      	beq.n	8002f56 <HAL_TIM_IC_Start_IT+0x1e2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a19      	ldr	r2, [pc, #100]	@ (8002f98 <HAL_TIM_IC_Start_IT+0x224>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d00e      	beq.n	8002f56 <HAL_TIM_IC_Start_IT+0x1e2>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a17      	ldr	r2, [pc, #92]	@ (8002f9c <HAL_TIM_IC_Start_IT+0x228>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d009      	beq.n	8002f56 <HAL_TIM_IC_Start_IT+0x1e2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a16      	ldr	r2, [pc, #88]	@ (8002fa0 <HAL_TIM_IC_Start_IT+0x22c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d004      	beq.n	8002f56 <HAL_TIM_IC_Start_IT+0x1e2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a14      	ldr	r2, [pc, #80]	@ (8002fa4 <HAL_TIM_IC_Start_IT+0x230>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d111      	bne.n	8002f7a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b06      	cmp	r3, #6
 8002f66:	d010      	beq.n	8002f8a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f78:	e007      	b.n	8002f8a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0201 	orr.w	r2, r2, #1
 8002f88:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40010000 	.word	0x40010000
 8002f98:	40000400 	.word	0x40000400
 8002f9c:	40000800 	.word	0x40000800
 8002fa0:	40000c00 	.word	0x40000c00
 8002fa4:	40014000 	.word	0x40014000

08002fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d020      	beq.n	800300c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d01b      	beq.n	800300c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0202 	mvn.w	r2, #2
 8002fdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fd fb9c 	bl	8000730 <HAL_TIM_IC_CaptureCallback>
 8002ff8:	e005      	b.n	8003006 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fb2e 	bl	800365c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fb35 	bl	8003670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	2b00      	cmp	r3, #0
 8003014:	d020      	beq.n	8003058 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d01b      	beq.n	8003058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0204 	mvn.w	r2, #4
 8003028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2202      	movs	r2, #2
 800302e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fd fb76 	bl	8000730 <HAL_TIM_IC_CaptureCallback>
 8003044:	e005      	b.n	8003052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 fb08 	bl	800365c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 fb0f 	bl	8003670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d020      	beq.n	80030a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01b      	beq.n	80030a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f06f 0208 	mvn.w	r2, #8
 8003074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2204      	movs	r2, #4
 800307a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7fd fb50 	bl	8000730 <HAL_TIM_IC_CaptureCallback>
 8003090:	e005      	b.n	800309e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 fae2 	bl	800365c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 fae9 	bl	8003670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f003 0310 	and.w	r3, r3, #16
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d020      	beq.n	80030f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d01b      	beq.n	80030f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0210 	mvn.w	r2, #16
 80030c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2208      	movs	r2, #8
 80030c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fd fb2a 	bl	8000730 <HAL_TIM_IC_CaptureCallback>
 80030dc:	e005      	b.n	80030ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fabc 	bl	800365c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 fac3 	bl	8003670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00c      	beq.n	8003114 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d007      	beq.n	8003114 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f06f 0201 	mvn.w	r2, #1
 800310c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fd fe66 	bl	8000de0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00c      	beq.n	8003138 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003124:	2b00      	cmp	r3, #0
 8003126:	d007      	beq.n	8003138 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 ff18 	bl	8003f68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00c      	beq.n	800315c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003148:	2b00      	cmp	r3, #0
 800314a:	d007      	beq.n	800315c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fa94 	bl	8003684 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00c      	beq.n	8003180 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b00      	cmp	r3, #0
 800316e:	d007      	beq.n	8003180 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f06f 0220 	mvn.w	r2, #32
 8003178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 feea 	bl	8003f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003180:	bf00      	nop
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e088      	b.n	80032b8 <HAL_TIM_IC_ConfigChannel+0x130>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d11b      	bne.n	80031ec <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80031c4:	f000 fc7a 	bl	8003abc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699a      	ldr	r2, [r3, #24]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 020c 	bic.w	r2, r2, #12
 80031d6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6999      	ldr	r1, [r3, #24]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	619a      	str	r2, [r3, #24]
 80031ea:	e060      	b.n	80032ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d11c      	bne.n	800322c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003202:	f000 fcf2 	bl	8003bea <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699a      	ldr	r2, [r3, #24]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003214:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6999      	ldr	r1, [r3, #24]
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	021a      	lsls	r2, r3, #8
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	619a      	str	r2, [r3, #24]
 800322a:	e040      	b.n	80032ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b08      	cmp	r3, #8
 8003230:	d11b      	bne.n	800326a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003242:	f000 fd3f 	bl	8003cc4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	69da      	ldr	r2, [r3, #28]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 020c 	bic.w	r2, r2, #12
 8003254:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	69d9      	ldr	r1, [r3, #28]
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	61da      	str	r2, [r3, #28]
 8003268:	e021      	b.n	80032ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b0c      	cmp	r3, #12
 800326e:	d11c      	bne.n	80032aa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003280:	f000 fd5c 	bl	8003d3c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	69da      	ldr	r2, [r3, #28]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003292:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	69d9      	ldr	r1, [r3, #28]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	021a      	lsls	r2, r3, #8
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	61da      	str	r2, [r3, #28]
 80032a8:	e001      	b.n	80032ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032da:	2302      	movs	r3, #2
 80032dc:	e0ae      	b.n	800343c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b0c      	cmp	r3, #12
 80032ea:	f200 809f 	bhi.w	800342c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032ee:	a201      	add	r2, pc, #4	@ (adr r2, 80032f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f4:	08003329 	.word	0x08003329
 80032f8:	0800342d 	.word	0x0800342d
 80032fc:	0800342d 	.word	0x0800342d
 8003300:	0800342d 	.word	0x0800342d
 8003304:	08003369 	.word	0x08003369
 8003308:	0800342d 	.word	0x0800342d
 800330c:	0800342d 	.word	0x0800342d
 8003310:	0800342d 	.word	0x0800342d
 8003314:	080033ab 	.word	0x080033ab
 8003318:	0800342d 	.word	0x0800342d
 800331c:	0800342d 	.word	0x0800342d
 8003320:	0800342d 	.word	0x0800342d
 8003324:	080033eb 	.word	0x080033eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68b9      	ldr	r1, [r7, #8]
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fa38 	bl	80037a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0208 	orr.w	r2, r2, #8
 8003342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0204 	bic.w	r2, r2, #4
 8003352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6999      	ldr	r1, [r3, #24]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	619a      	str	r2, [r3, #24]
      break;
 8003366:	e064      	b.n	8003432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fa7e 	bl	8003870 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699a      	ldr	r2, [r3, #24]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6999      	ldr	r1, [r3, #24]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	021a      	lsls	r2, r3, #8
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	619a      	str	r2, [r3, #24]
      break;
 80033a8:	e043      	b.n	8003432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 fac9 	bl	8003948 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69da      	ldr	r2, [r3, #28]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0208 	orr.w	r2, r2, #8
 80033c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0204 	bic.w	r2, r2, #4
 80033d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69d9      	ldr	r1, [r3, #28]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	61da      	str	r2, [r3, #28]
      break;
 80033e8:	e023      	b.n	8003432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68b9      	ldr	r1, [r7, #8]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fb13 	bl	8003a1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69da      	ldr	r2, [r3, #28]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69da      	ldr	r2, [r3, #28]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	69d9      	ldr	r1, [r3, #28]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	021a      	lsls	r2, r3, #8
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	61da      	str	r2, [r3, #28]
      break;
 800342a:	e002      	b.n	8003432 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	75fb      	strb	r3, [r7, #23]
      break;
 8003430:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800343a:	7dfb      	ldrb	r3, [r7, #23]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_TIM_ConfigClockSource+0x1c>
 800345c:	2302      	movs	r3, #2
 800345e:	e0b4      	b.n	80035ca <HAL_TIM_ConfigClockSource+0x186>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800347e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003486:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003498:	d03e      	beq.n	8003518 <HAL_TIM_ConfigClockSource+0xd4>
 800349a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800349e:	f200 8087 	bhi.w	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
 80034a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034a6:	f000 8086 	beq.w	80035b6 <HAL_TIM_ConfigClockSource+0x172>
 80034aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034ae:	d87f      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
 80034b0:	2b70      	cmp	r3, #112	@ 0x70
 80034b2:	d01a      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0xa6>
 80034b4:	2b70      	cmp	r3, #112	@ 0x70
 80034b6:	d87b      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
 80034b8:	2b60      	cmp	r3, #96	@ 0x60
 80034ba:	d050      	beq.n	800355e <HAL_TIM_ConfigClockSource+0x11a>
 80034bc:	2b60      	cmp	r3, #96	@ 0x60
 80034be:	d877      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
 80034c0:	2b50      	cmp	r3, #80	@ 0x50
 80034c2:	d03c      	beq.n	800353e <HAL_TIM_ConfigClockSource+0xfa>
 80034c4:	2b50      	cmp	r3, #80	@ 0x50
 80034c6:	d873      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
 80034c8:	2b40      	cmp	r3, #64	@ 0x40
 80034ca:	d058      	beq.n	800357e <HAL_TIM_ConfigClockSource+0x13a>
 80034cc:	2b40      	cmp	r3, #64	@ 0x40
 80034ce:	d86f      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
 80034d0:	2b30      	cmp	r3, #48	@ 0x30
 80034d2:	d064      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x15a>
 80034d4:	2b30      	cmp	r3, #48	@ 0x30
 80034d6:	d86b      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d060      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x15a>
 80034dc:	2b20      	cmp	r3, #32
 80034de:	d867      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d05c      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x15a>
 80034e4:	2b10      	cmp	r3, #16
 80034e6:	d05a      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x15a>
 80034e8:	e062      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034fa:	f000 fc77 	bl	8003dec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800350c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	609a      	str	r2, [r3, #8]
      break;
 8003516:	e04f      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003528:	f000 fc60 	bl	8003dec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800353a:	609a      	str	r2, [r3, #8]
      break;
 800353c:	e03c      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800354a:	461a      	mov	r2, r3
 800354c:	f000 fb1e 	bl	8003b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2150      	movs	r1, #80	@ 0x50
 8003556:	4618      	mov	r0, r3
 8003558:	f000 fc2d 	bl	8003db6 <TIM_ITRx_SetConfig>
      break;
 800355c:	e02c      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800356a:	461a      	mov	r2, r3
 800356c:	f000 fb7a 	bl	8003c64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2160      	movs	r1, #96	@ 0x60
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fc1d 	bl	8003db6 <TIM_ITRx_SetConfig>
      break;
 800357c:	e01c      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800358a:	461a      	mov	r2, r3
 800358c:	f000 fafe 	bl	8003b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2140      	movs	r1, #64	@ 0x40
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fc0d 	bl	8003db6 <TIM_ITRx_SetConfig>
      break;
 800359c:	e00c      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4619      	mov	r1, r3
 80035a8:	4610      	mov	r0, r2
 80035aa:	f000 fc04 	bl	8003db6 <TIM_ITRx_SetConfig>
      break;
 80035ae:	e003      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	73fb      	strb	r3, [r7, #15]
      break;
 80035b4:	e000      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b0c      	cmp	r3, #12
 80035e6:	d831      	bhi.n	800364c <HAL_TIM_ReadCapturedValue+0x78>
 80035e8:	a201      	add	r2, pc, #4	@ (adr r2, 80035f0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80035ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ee:	bf00      	nop
 80035f0:	08003625 	.word	0x08003625
 80035f4:	0800364d 	.word	0x0800364d
 80035f8:	0800364d 	.word	0x0800364d
 80035fc:	0800364d 	.word	0x0800364d
 8003600:	0800362f 	.word	0x0800362f
 8003604:	0800364d 	.word	0x0800364d
 8003608:	0800364d 	.word	0x0800364d
 800360c:	0800364d 	.word	0x0800364d
 8003610:	08003639 	.word	0x08003639
 8003614:	0800364d 	.word	0x0800364d
 8003618:	0800364d 	.word	0x0800364d
 800361c:	0800364d 	.word	0x0800364d
 8003620:	08003643 	.word	0x08003643
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800362a:	60fb      	str	r3, [r7, #12]

      break;
 800362c:	e00f      	b.n	800364e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003634:	60fb      	str	r3, [r7, #12]

      break;
 8003636:	e00a      	b.n	800364e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800363e:	60fb      	str	r3, [r7, #12]

      break;
 8003640:	e005      	b.n	800364e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003648:	60fb      	str	r3, [r7, #12]

      break;
 800364a:	e000      	b.n	800364e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800364c:	bf00      	nop
  }

  return tmpreg;
 800364e:	68fb      	ldr	r3, [r7, #12]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a37      	ldr	r2, [pc, #220]	@ (8003788 <TIM_Base_SetConfig+0xf0>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00f      	beq.n	80036d0 <TIM_Base_SetConfig+0x38>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b6:	d00b      	beq.n	80036d0 <TIM_Base_SetConfig+0x38>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a34      	ldr	r2, [pc, #208]	@ (800378c <TIM_Base_SetConfig+0xf4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d007      	beq.n	80036d0 <TIM_Base_SetConfig+0x38>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a33      	ldr	r2, [pc, #204]	@ (8003790 <TIM_Base_SetConfig+0xf8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d003      	beq.n	80036d0 <TIM_Base_SetConfig+0x38>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a32      	ldr	r2, [pc, #200]	@ (8003794 <TIM_Base_SetConfig+0xfc>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d108      	bne.n	80036e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a28      	ldr	r2, [pc, #160]	@ (8003788 <TIM_Base_SetConfig+0xf0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d01b      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036f0:	d017      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a25      	ldr	r2, [pc, #148]	@ (800378c <TIM_Base_SetConfig+0xf4>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d013      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a24      	ldr	r2, [pc, #144]	@ (8003790 <TIM_Base_SetConfig+0xf8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00f      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a23      	ldr	r2, [pc, #140]	@ (8003794 <TIM_Base_SetConfig+0xfc>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00b      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a22      	ldr	r2, [pc, #136]	@ (8003798 <TIM_Base_SetConfig+0x100>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d007      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a21      	ldr	r2, [pc, #132]	@ (800379c <TIM_Base_SetConfig+0x104>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d003      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a20      	ldr	r2, [pc, #128]	@ (80037a0 <TIM_Base_SetConfig+0x108>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d108      	bne.n	8003734 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	4313      	orrs	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a0c      	ldr	r2, [pc, #48]	@ (8003788 <TIM_Base_SetConfig+0xf0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d103      	bne.n	8003762 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	691a      	ldr	r2, [r3, #16]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f043 0204 	orr.w	r2, r3, #4
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	601a      	str	r2, [r3, #0]
}
 800377a:	bf00      	nop
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40010000 	.word	0x40010000
 800378c:	40000400 	.word	0x40000400
 8003790:	40000800 	.word	0x40000800
 8003794:	40000c00 	.word	0x40000c00
 8003798:	40014000 	.word	0x40014000
 800379c:	40014400 	.word	0x40014400
 80037a0:	40014800 	.word	0x40014800

080037a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	f023 0201 	bic.w	r2, r3, #1
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 0303 	bic.w	r3, r3, #3
 80037da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f023 0302 	bic.w	r3, r3, #2
 80037ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a1c      	ldr	r2, [pc, #112]	@ (800386c <TIM_OC1_SetConfig+0xc8>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d10c      	bne.n	800381a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f023 0308 	bic.w	r3, r3, #8
 8003806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	4313      	orrs	r3, r2
 8003810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f023 0304 	bic.w	r3, r3, #4
 8003818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a13      	ldr	r2, [pc, #76]	@ (800386c <TIM_OC1_SetConfig+0xc8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d111      	bne.n	8003846 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	621a      	str	r2, [r3, #32]
}
 8003860:	bf00      	nop
 8003862:	371c      	adds	r7, #28
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	40010000 	.word	0x40010000

08003870 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	f023 0210 	bic.w	r2, r3, #16
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800389e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	021b      	lsls	r3, r3, #8
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f023 0320 	bic.w	r3, r3, #32
 80038ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	011b      	lsls	r3, r3, #4
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003944 <TIM_OC2_SetConfig+0xd4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d10d      	bne.n	80038ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a15      	ldr	r2, [pc, #84]	@ (8003944 <TIM_OC2_SetConfig+0xd4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d113      	bne.n	800391c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003902:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	621a      	str	r2, [r3, #32]
}
 8003936:	bf00      	nop
 8003938:	371c      	adds	r7, #28
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40010000 	.word	0x40010000

08003948 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003948:	b480      	push	{r7}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0303 	bic.w	r3, r3, #3
 800397e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	021b      	lsls	r3, r3, #8
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	4313      	orrs	r3, r2
 800399c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003a18 <TIM_OC3_SetConfig+0xd0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d10d      	bne.n	80039c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	021b      	lsls	r3, r3, #8
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a14      	ldr	r2, [pc, #80]	@ (8003a18 <TIM_OC3_SetConfig+0xd0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d113      	bne.n	80039f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	621a      	str	r2, [r3, #32]
}
 8003a0c:	bf00      	nop
 8003a0e:	371c      	adds	r7, #28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	40010000 	.word	0x40010000

08003a1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	021b      	lsls	r3, r3, #8
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	031b      	lsls	r3, r3, #12
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a10      	ldr	r2, [pc, #64]	@ (8003ab8 <TIM_OC4_SetConfig+0x9c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d109      	bne.n	8003a90 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	019b      	lsls	r3, r3, #6
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	621a      	str	r2, [r3, #32]
}
 8003aaa:	bf00      	nop
 8003aac:	371c      	adds	r7, #28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40010000 	.word	0x40010000

08003abc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	f023 0201 	bic.w	r2, r3, #1
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4a24      	ldr	r2, [pc, #144]	@ (8003b78 <TIM_TI1_SetConfig+0xbc>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d013      	beq.n	8003b12 <TIM_TI1_SetConfig+0x56>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003af0:	d00f      	beq.n	8003b12 <TIM_TI1_SetConfig+0x56>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4a21      	ldr	r2, [pc, #132]	@ (8003b7c <TIM_TI1_SetConfig+0xc0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00b      	beq.n	8003b12 <TIM_TI1_SetConfig+0x56>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4a20      	ldr	r2, [pc, #128]	@ (8003b80 <TIM_TI1_SetConfig+0xc4>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d007      	beq.n	8003b12 <TIM_TI1_SetConfig+0x56>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4a1f      	ldr	r2, [pc, #124]	@ (8003b84 <TIM_TI1_SetConfig+0xc8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d003      	beq.n	8003b12 <TIM_TI1_SetConfig+0x56>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4a1e      	ldr	r2, [pc, #120]	@ (8003b88 <TIM_TI1_SetConfig+0xcc>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d101      	bne.n	8003b16 <TIM_TI1_SetConfig+0x5a>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <TIM_TI1_SetConfig+0x5c>
 8003b16:	2300      	movs	r3, #0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d008      	beq.n	8003b2e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f023 0303 	bic.w	r3, r3, #3
 8003b22:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	e003      	b.n	8003b36 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f023 030a 	bic.w	r3, r3, #10
 8003b50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f003 030a 	and.w	r3, r3, #10
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	621a      	str	r2, [r3, #32]
}
 8003b6a:	bf00      	nop
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40010000 	.word	0x40010000
 8003b7c:	40000400 	.word	0x40000400
 8003b80:	40000800 	.word	0x40000800
 8003b84:	40000c00 	.word	0x40000c00
 8003b88:	40014000 	.word	0x40014000

08003b8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	f023 0201 	bic.w	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f023 030a 	bic.w	r3, r3, #10
 8003bc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	621a      	str	r2, [r3, #32]
}
 8003bde:	bf00      	nop
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b087      	sub	sp, #28
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	607a      	str	r2, [r7, #4]
 8003bf6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	f023 0210 	bic.w	r2, r3, #16
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	021b      	lsls	r3, r3, #8
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	031b      	lsls	r3, r3, #12
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c3c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	621a      	str	r2, [r3, #32]
}
 8003c58:	bf00      	nop
 8003c5a:	371c      	adds	r7, #28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	f023 0210 	bic.w	r2, r3, #16
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	031b      	lsls	r3, r3, #12
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ca0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	621a      	str	r2, [r3, #32]
}
 8003cb8:	bf00      	nop
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f023 0303 	bic.w	r3, r3, #3
 8003cf0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d00:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003d14:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	021b      	lsls	r3, r3, #8
 8003d1a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	621a      	str	r2, [r3, #32]
}
 8003d30:	bf00      	nop
 8003d32:	371c      	adds	r7, #28
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d68:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	021b      	lsls	r3, r3, #8
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d7a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	031b      	lsls	r3, r3, #12
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003d8e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	031b      	lsls	r3, r3, #12
 8003d94:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	621a      	str	r2, [r3, #32]
}
 8003daa:	bf00      	nop
 8003dac:	371c      	adds	r7, #28
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b085      	sub	sp, #20
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f043 0307 	orr.w	r3, r3, #7
 8003dd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	609a      	str	r2, [r3, #8]
}
 8003de0:	bf00      	nop
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
 8003df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	021a      	lsls	r2, r3, #8
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	609a      	str	r2, [r3, #8]
}
 8003e20:	bf00      	nop
 8003e22:	371c      	adds	r7, #28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f003 031f 	and.w	r3, r3, #31
 8003e3e:	2201      	movs	r2, #1
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a1a      	ldr	r2, [r3, #32]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	401a      	ands	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a1a      	ldr	r2, [r3, #32]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f003 031f 	and.w	r3, r3, #31
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	fa01 f303 	lsl.w	r3, r1, r3
 8003e64:	431a      	orrs	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	621a      	str	r2, [r3, #32]
}
 8003e6a:	bf00      	nop
 8003e6c:	371c      	adds	r7, #28
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
	...

08003e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e050      	b.n	8003f32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1c      	ldr	r2, [pc, #112]	@ (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d018      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003edc:	d013      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a18      	ldr	r2, [pc, #96]	@ (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d00e      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a16      	ldr	r2, [pc, #88]	@ (8003f48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d009      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a15      	ldr	r2, [pc, #84]	@ (8003f4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d004      	beq.n	8003f06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a13      	ldr	r2, [pc, #76]	@ (8003f50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d10c      	bne.n	8003f20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800
 8003f4c:	40000c00 	.word	0x40000c00
 8003f50:	40014000 	.word	0x40014000

08003f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e042      	b.n	8004014 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fd fba2 	bl	80016ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2224      	movs	r2, #36	@ 0x24
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 fdd3 	bl	8004b6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08a      	sub	sp, #40	@ 0x28
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b20      	cmp	r3, #32
 800403a:	d175      	bne.n	8004128 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <HAL_UART_Transmit+0x2c>
 8004042:	88fb      	ldrh	r3, [r7, #6]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e06e      	b.n	800412a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2221      	movs	r2, #33	@ 0x21
 8004056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800405a:	f7fd fc33 	bl	80018c4 <HAL_GetTick>
 800405e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	88fa      	ldrh	r2, [r7, #6]
 8004064:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	88fa      	ldrh	r2, [r7, #6]
 800406a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004074:	d108      	bne.n	8004088 <HAL_UART_Transmit+0x6c>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d104      	bne.n	8004088 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	61bb      	str	r3, [r7, #24]
 8004086:	e003      	b.n	8004090 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800408c:	2300      	movs	r3, #0
 800408e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004090:	e02e      	b.n	80040f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2200      	movs	r2, #0
 800409a:	2180      	movs	r1, #128	@ 0x80
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 fb37 	bl	8004710 <UART_WaitOnFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d005      	beq.n	80040b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e03a      	b.n	800412a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10b      	bne.n	80040d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	3302      	adds	r3, #2
 80040ce:	61bb      	str	r3, [r7, #24]
 80040d0:	e007      	b.n	80040e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	781a      	ldrb	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	3301      	adds	r3, #1
 80040e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1cb      	bne.n	8004092 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2200      	movs	r2, #0
 8004102:	2140      	movs	r1, #64	@ 0x40
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 fb03 	bl	8004710 <UART_WaitOnFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e006      	b.n	800412a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	e000      	b.n	800412a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004128:	2302      	movs	r3, #2
  }
}
 800412a:	4618      	mov	r0, r3
 800412c:	3720      	adds	r7, #32
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	4613      	mov	r3, r2
 800413e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b20      	cmp	r3, #32
 800414a:	d112      	bne.n	8004172 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <HAL_UART_Receive_IT+0x26>
 8004152:	88fb      	ldrh	r3, [r7, #6]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e00b      	b.n	8004174 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004162:	88fb      	ldrh	r3, [r7, #6]
 8004164:	461a      	mov	r2, r3
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 fb2a 	bl	80047c2 <UART_Start_Receive_IT>
 800416e:	4603      	mov	r3, r0
 8004170:	e000      	b.n	8004174 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004172:	2302      	movs	r3, #2
  }
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b0ba      	sub	sp, #232	@ 0xe8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80041ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10f      	bne.n	80041e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d009      	beq.n	80041e2 <HAL_UART_IRQHandler+0x66>
 80041ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fc07 	bl	80049ee <UART_Receive_IT>
      return;
 80041e0:	e273      	b.n	80046ca <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 80de 	beq.w	80043a8 <HAL_UART_IRQHandler+0x22c>
 80041ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d106      	bne.n	8004206 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 80d1 	beq.w	80043a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00b      	beq.n	800422a <HAL_UART_IRQHandler+0xae>
 8004212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800421a:	2b00      	cmp	r3, #0
 800421c:	d005      	beq.n	800422a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004222:	f043 0201 	orr.w	r2, r3, #1
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800422a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800422e:	f003 0304 	and.w	r3, r3, #4
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00b      	beq.n	800424e <HAL_UART_IRQHandler+0xd2>
 8004236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004246:	f043 0202 	orr.w	r2, r3, #2
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800424e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00b      	beq.n	8004272 <HAL_UART_IRQHandler+0xf6>
 800425a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426a:	f043 0204 	orr.w	r2, r3, #4
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d011      	beq.n	80042a2 <HAL_UART_IRQHandler+0x126>
 800427e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b00      	cmp	r3, #0
 8004288:	d105      	bne.n	8004296 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800428a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d005      	beq.n	80042a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429a:	f043 0208 	orr.w	r2, r3, #8
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 820a 	beq.w	80046c0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_UART_IRQHandler+0x14e>
 80042b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 fb92 	bl	80049ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d4:	2b40      	cmp	r3, #64	@ 0x40
 80042d6:	bf0c      	ite	eq
 80042d8:	2301      	moveq	r3, #1
 80042da:	2300      	movne	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d103      	bne.n	80042f6 <HAL_UART_IRQHandler+0x17a>
 80042ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d04f      	beq.n	8004396 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fa9d 	bl	8004836 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004306:	2b40      	cmp	r3, #64	@ 0x40
 8004308:	d141      	bne.n	800438e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3314      	adds	r3, #20
 8004310:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004320:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004324:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004328:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3314      	adds	r3, #20
 8004332:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004336:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800433a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004342:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800434e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1d9      	bne.n	800430a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800435a:	2b00      	cmp	r3, #0
 800435c:	d013      	beq.n	8004386 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004362:	4a8a      	ldr	r2, [pc, #552]	@ (800458c <HAL_UART_IRQHandler+0x410>)
 8004364:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800436a:	4618      	mov	r0, r3
 800436c:	f7fd fc08 	bl	8001b80 <HAL_DMA_Abort_IT>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d016      	beq.n	80043a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800437a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004380:	4610      	mov	r0, r2
 8004382:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004384:	e00e      	b.n	80043a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f9ac 	bl	80046e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800438c:	e00a      	b.n	80043a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f9a8 	bl	80046e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004394:	e006      	b.n	80043a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f9a4 	bl	80046e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80043a2:	e18d      	b.n	80046c0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a4:	bf00      	nop
    return;
 80043a6:	e18b      	b.n	80046c0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	f040 8167 	bne.w	8004680 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043b6:	f003 0310 	and.w	r3, r3, #16
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 8160 	beq.w	8004680 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80043c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043c4:	f003 0310 	and.w	r3, r3, #16
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 8159 	beq.w	8004680 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043ce:	2300      	movs	r3, #0
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	60bb      	str	r3, [r7, #8]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	60bb      	str	r3, [r7, #8]
 80043e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ee:	2b40      	cmp	r3, #64	@ 0x40
 80043f0:	f040 80ce 	bne.w	8004590 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004400:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 80a9 	beq.w	800455c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800440e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004412:	429a      	cmp	r2, r3
 8004414:	f080 80a2 	bcs.w	800455c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800441e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800442a:	f000 8088 	beq.w	800453e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	330c      	adds	r3, #12
 8004434:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004444:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004448:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800444c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	330c      	adds	r3, #12
 8004456:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800445a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800445e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004462:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004466:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800446a:	e841 2300 	strex	r3, r2, [r1]
 800446e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004472:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1d9      	bne.n	800442e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3314      	adds	r3, #20
 8004480:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800448a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800448c:	f023 0301 	bic.w	r3, r3, #1
 8004490:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3314      	adds	r3, #20
 800449a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800449e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80044a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044aa:	e841 2300 	strex	r3, r2, [r1]
 80044ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80044b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1e1      	bne.n	800447a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3314      	adds	r3, #20
 80044bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80044c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3314      	adds	r3, #20
 80044d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80044e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044e2:	e841 2300 	strex	r3, r2, [r1]
 80044e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80044e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1e3      	bne.n	80044b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	330c      	adds	r3, #12
 8004502:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004506:	e853 3f00 	ldrex	r3, [r3]
 800450a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800450c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800450e:	f023 0310 	bic.w	r3, r3, #16
 8004512:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	330c      	adds	r3, #12
 800451c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004520:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004522:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004526:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004528:	e841 2300 	strex	r3, r2, [r1]
 800452c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800452e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e3      	bne.n	80044fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004538:	4618      	mov	r0, r3
 800453a:	f7fd fab1 	bl	8001aa0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2202      	movs	r2, #2
 8004542:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800454c:	b29b      	uxth	r3, r3
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	b29b      	uxth	r3, r3
 8004552:	4619      	mov	r1, r3
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f8cf 	bl	80046f8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800455a:	e0b3      	b.n	80046c4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004560:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004564:	429a      	cmp	r2, r3
 8004566:	f040 80ad 	bne.w	80046c4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004574:	f040 80a6 	bne.w	80046c4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004582:	4619      	mov	r1, r3
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f8b7 	bl	80046f8 <HAL_UARTEx_RxEventCallback>
      return;
 800458a:	e09b      	b.n	80046c4 <HAL_UART_IRQHandler+0x548>
 800458c:	080048fd 	.word	0x080048fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004598:	b29b      	uxth	r3, r3
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 808e 	beq.w	80046c8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80045ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 8089 	beq.w	80046c8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	330c      	adds	r3, #12
 80045bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c0:	e853 3f00 	ldrex	r3, [r3]
 80045c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	330c      	adds	r3, #12
 80045d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80045da:	647a      	str	r2, [r7, #68]	@ 0x44
 80045dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045e2:	e841 2300 	strex	r3, r2, [r1]
 80045e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1e3      	bne.n	80045b6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3314      	adds	r3, #20
 80045f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f8:	e853 3f00 	ldrex	r3, [r3]
 80045fc:	623b      	str	r3, [r7, #32]
   return(result);
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	f023 0301 	bic.w	r3, r3, #1
 8004604:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3314      	adds	r3, #20
 800460e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004612:	633a      	str	r2, [r7, #48]	@ 0x30
 8004614:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004618:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e3      	bne.n	80045ee <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	330c      	adds	r3, #12
 800463a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	e853 3f00 	ldrex	r3, [r3]
 8004642:	60fb      	str	r3, [r7, #12]
   return(result);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 0310 	bic.w	r3, r3, #16
 800464a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	330c      	adds	r3, #12
 8004654:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004658:	61fa      	str	r2, [r7, #28]
 800465a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465c:	69b9      	ldr	r1, [r7, #24]
 800465e:	69fa      	ldr	r2, [r7, #28]
 8004660:	e841 2300 	strex	r3, r2, [r1]
 8004664:	617b      	str	r3, [r7, #20]
   return(result);
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e3      	bne.n	8004634 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004672:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004676:	4619      	mov	r1, r3
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f83d 	bl	80046f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800467e:	e023      	b.n	80046c8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004688:	2b00      	cmp	r3, #0
 800468a:	d009      	beq.n	80046a0 <HAL_UART_IRQHandler+0x524>
 800468c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f940 	bl	800491e <UART_Transmit_IT>
    return;
 800469e:	e014      	b.n	80046ca <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00e      	beq.n	80046ca <HAL_UART_IRQHandler+0x54e>
 80046ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d008      	beq.n	80046ca <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f980 	bl	80049be <UART_EndTransmit_IT>
    return;
 80046be:	e004      	b.n	80046ca <HAL_UART_IRQHandler+0x54e>
    return;
 80046c0:	bf00      	nop
 80046c2:	e002      	b.n	80046ca <HAL_UART_IRQHandler+0x54e>
      return;
 80046c4:	bf00      	nop
 80046c6:	e000      	b.n	80046ca <HAL_UART_IRQHandler+0x54e>
      return;
 80046c8:	bf00      	nop
  }
}
 80046ca:	37e8      	adds	r7, #232	@ 0xe8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	460b      	mov	r3, r1
 8004702:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	4613      	mov	r3, r2
 800471e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004720:	e03b      	b.n	800479a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004728:	d037      	beq.n	800479a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472a:	f7fd f8cb 	bl	80018c4 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	6a3a      	ldr	r2, [r7, #32]
 8004736:	429a      	cmp	r2, r3
 8004738:	d302      	bcc.n	8004740 <UART_WaitOnFlagUntilTimeout+0x30>
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e03a      	b.n	80047ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f003 0304 	and.w	r3, r3, #4
 800474e:	2b00      	cmp	r3, #0
 8004750:	d023      	beq.n	800479a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b80      	cmp	r3, #128	@ 0x80
 8004756:	d020      	beq.n	800479a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2b40      	cmp	r3, #64	@ 0x40
 800475c:	d01d      	beq.n	800479a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b08      	cmp	r3, #8
 800476a:	d116      	bne.n	800479a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800476c:	2300      	movs	r3, #0
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 f857 	bl	8004836 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2208      	movs	r2, #8
 800478c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e00f      	b.n	80047ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4013      	ands	r3, r2
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	bf0c      	ite	eq
 80047aa:	2301      	moveq	r3, #1
 80047ac:	2300      	movne	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d0b4      	beq.n	8004722 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b085      	sub	sp, #20
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	4613      	mov	r3, r2
 80047ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	88fa      	ldrh	r2, [r7, #6]
 80047da:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	88fa      	ldrh	r2, [r7, #6]
 80047e0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2222      	movs	r2, #34	@ 0x22
 80047ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d007      	beq.n	8004808 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004806:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695a      	ldr	r2, [r3, #20]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0201 	orr.w	r2, r2, #1
 8004816:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0220 	orr.w	r2, r2, #32
 8004826:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004836:	b480      	push	{r7}
 8004838:	b095      	sub	sp, #84	@ 0x54
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	330c      	adds	r3, #12
 8004844:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004848:	e853 3f00 	ldrex	r3, [r3]
 800484c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800484e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004850:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004854:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	330c      	adds	r3, #12
 800485c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800485e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004860:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004862:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004864:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004866:	e841 2300 	strex	r3, r2, [r1]
 800486a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800486c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1e5      	bne.n	800483e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3314      	adds	r3, #20
 8004878:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	e853 3f00 	ldrex	r3, [r3]
 8004880:	61fb      	str	r3, [r7, #28]
   return(result);
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	f023 0301 	bic.w	r3, r3, #1
 8004888:	64bb      	str	r3, [r7, #72]	@ 0x48
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3314      	adds	r3, #20
 8004890:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004892:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004894:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004896:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004898:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800489a:	e841 2300 	strex	r3, r2, [r1]
 800489e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1e5      	bne.n	8004872 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d119      	bne.n	80048e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	330c      	adds	r3, #12
 80048b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	e853 3f00 	ldrex	r3, [r3]
 80048bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f023 0310 	bic.w	r3, r3, #16
 80048c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	330c      	adds	r3, #12
 80048cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048ce:	61ba      	str	r2, [r7, #24]
 80048d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	6979      	ldr	r1, [r7, #20]
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	613b      	str	r3, [r7, #16]
   return(result);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e5      	bne.n	80048ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80048f0:	bf00      	nop
 80048f2:	3754      	adds	r7, #84	@ 0x54
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004908:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f7ff fee7 	bl	80046e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004916:	bf00      	nop
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800491e:	b480      	push	{r7}
 8004920:	b085      	sub	sp, #20
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b21      	cmp	r3, #33	@ 0x21
 8004930:	d13e      	bne.n	80049b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800493a:	d114      	bne.n	8004966 <UART_Transmit_IT+0x48>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d110      	bne.n	8004966 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004958:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	1c9a      	adds	r2, r3, #2
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	621a      	str	r2, [r3, #32]
 8004964:	e008      	b.n	8004978 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	1c59      	adds	r1, r3, #1
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6211      	str	r1, [r2, #32]
 8004970:	781a      	ldrb	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b01      	subs	r3, #1
 8004980:	b29b      	uxth	r3, r3
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	4619      	mov	r1, r3
 8004986:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10f      	bne.n	80049ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800499a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	e000      	b.n	80049b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049b0:	2302      	movs	r3, #2
  }
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68da      	ldr	r2, [r3, #12]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff fe76 	bl	80046d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b08c      	sub	sp, #48	@ 0x30
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80049f6:	2300      	movs	r3, #0
 80049f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b22      	cmp	r3, #34	@ 0x22
 8004a08:	f040 80aa 	bne.w	8004b60 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a14:	d115      	bne.n	8004a42 <UART_Receive_IT+0x54>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d111      	bne.n	8004a42 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a22:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a3a:	1c9a      	adds	r2, r3, #2
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a40:	e024      	b.n	8004a8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a50:	d007      	beq.n	8004a62 <UART_Receive_IT+0x74>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10a      	bne.n	8004a70 <UART_Receive_IT+0x82>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a6c:	701a      	strb	r2, [r3, #0]
 8004a6e:	e008      	b.n	8004a82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	4619      	mov	r1, r3
 8004a9a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d15d      	bne.n	8004b5c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0220 	bic.w	r2, r2, #32
 8004aae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004abe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695a      	ldr	r2, [r3, #20]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0201 	bic.w	r2, r2, #1
 8004ace:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d135      	bne.n	8004b52 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	330c      	adds	r3, #12
 8004af2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	e853 3f00 	ldrex	r3, [r3]
 8004afa:	613b      	str	r3, [r7, #16]
   return(result);
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f023 0310 	bic.w	r3, r3, #16
 8004b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	330c      	adds	r3, #12
 8004b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b0c:	623a      	str	r2, [r7, #32]
 8004b0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	69f9      	ldr	r1, [r7, #28]
 8004b12:	6a3a      	ldr	r2, [r7, #32]
 8004b14:	e841 2300 	strex	r3, r2, [r1]
 8004b18:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e5      	bne.n	8004aec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0310 	and.w	r3, r3, #16
 8004b2a:	2b10      	cmp	r3, #16
 8004b2c:	d10a      	bne.n	8004b44 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	60fb      	str	r3, [r7, #12]
 8004b42:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b48:	4619      	mov	r1, r3
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7ff fdd4 	bl	80046f8 <HAL_UARTEx_RxEventCallback>
 8004b50:	e002      	b.n	8004b58 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fb fd62 	bl	800061c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	e002      	b.n	8004b62 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	e000      	b.n	8004b62 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b60:	2302      	movs	r3, #2
  }
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3730      	adds	r7, #48	@ 0x30
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b70:	b0c0      	sub	sp, #256	@ 0x100
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b88:	68d9      	ldr	r1, [r3, #12]
 8004b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	ea40 0301 	orr.w	r3, r0, r1
 8004b94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	431a      	orrs	r2, r3
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004bc4:	f021 010c 	bic.w	r1, r1, #12
 8004bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bd2:	430b      	orrs	r3, r1
 8004bd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be6:	6999      	ldr	r1, [r3, #24]
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	ea40 0301 	orr.w	r3, r0, r1
 8004bf2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	4b8f      	ldr	r3, [pc, #572]	@ (8004e38 <UART_SetConfig+0x2cc>)
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d005      	beq.n	8004c0c <UART_SetConfig+0xa0>
 8004c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	4b8d      	ldr	r3, [pc, #564]	@ (8004e3c <UART_SetConfig+0x2d0>)
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d104      	bne.n	8004c16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c0c:	f7fd fdfc 	bl	8002808 <HAL_RCC_GetPCLK2Freq>
 8004c10:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c14:	e003      	b.n	8004c1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c16:	f7fd fde3 	bl	80027e0 <HAL_RCC_GetPCLK1Freq>
 8004c1a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c28:	f040 810c 	bne.w	8004e44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c30:	2200      	movs	r2, #0
 8004c32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c36:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c3e:	4622      	mov	r2, r4
 8004c40:	462b      	mov	r3, r5
 8004c42:	1891      	adds	r1, r2, r2
 8004c44:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c46:	415b      	adcs	r3, r3
 8004c48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c4e:	4621      	mov	r1, r4
 8004c50:	eb12 0801 	adds.w	r8, r2, r1
 8004c54:	4629      	mov	r1, r5
 8004c56:	eb43 0901 	adc.w	r9, r3, r1
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c6e:	4690      	mov	r8, r2
 8004c70:	4699      	mov	r9, r3
 8004c72:	4623      	mov	r3, r4
 8004c74:	eb18 0303 	adds.w	r3, r8, r3
 8004c78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c7c:	462b      	mov	r3, r5
 8004c7e:	eb49 0303 	adc.w	r3, r9, r3
 8004c82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c92:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	18db      	adds	r3, r3, r3
 8004c9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	eb42 0303 	adc.w	r3, r2, r3
 8004ca6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ca8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004cac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004cb0:	f7fb fae6 	bl	8000280 <__aeabi_uldivmod>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4b61      	ldr	r3, [pc, #388]	@ (8004e40 <UART_SetConfig+0x2d4>)
 8004cba:	fba3 2302 	umull	r2, r3, r3, r2
 8004cbe:	095b      	lsrs	r3, r3, #5
 8004cc0:	011c      	lsls	r4, r3, #4
 8004cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ccc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004cd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004cd4:	4642      	mov	r2, r8
 8004cd6:	464b      	mov	r3, r9
 8004cd8:	1891      	adds	r1, r2, r2
 8004cda:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004cdc:	415b      	adcs	r3, r3
 8004cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ce0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ce4:	4641      	mov	r1, r8
 8004ce6:	eb12 0a01 	adds.w	sl, r2, r1
 8004cea:	4649      	mov	r1, r9
 8004cec:	eb43 0b01 	adc.w	fp, r3, r1
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	f04f 0300 	mov.w	r3, #0
 8004cf8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cfc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d04:	4692      	mov	sl, r2
 8004d06:	469b      	mov	fp, r3
 8004d08:	4643      	mov	r3, r8
 8004d0a:	eb1a 0303 	adds.w	r3, sl, r3
 8004d0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d12:	464b      	mov	r3, r9
 8004d14:	eb4b 0303 	adc.w	r3, fp, r3
 8004d18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d28:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d30:	460b      	mov	r3, r1
 8004d32:	18db      	adds	r3, r3, r3
 8004d34:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d36:	4613      	mov	r3, r2
 8004d38:	eb42 0303 	adc.w	r3, r2, r3
 8004d3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d46:	f7fb fa9b 	bl	8000280 <__aeabi_uldivmod>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	4611      	mov	r1, r2
 8004d50:	4b3b      	ldr	r3, [pc, #236]	@ (8004e40 <UART_SetConfig+0x2d4>)
 8004d52:	fba3 2301 	umull	r2, r3, r3, r1
 8004d56:	095b      	lsrs	r3, r3, #5
 8004d58:	2264      	movs	r2, #100	@ 0x64
 8004d5a:	fb02 f303 	mul.w	r3, r2, r3
 8004d5e:	1acb      	subs	r3, r1, r3
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d66:	4b36      	ldr	r3, [pc, #216]	@ (8004e40 <UART_SetConfig+0x2d4>)
 8004d68:	fba3 2302 	umull	r2, r3, r3, r2
 8004d6c:	095b      	lsrs	r3, r3, #5
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d74:	441c      	add	r4, r3
 8004d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d80:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d88:	4642      	mov	r2, r8
 8004d8a:	464b      	mov	r3, r9
 8004d8c:	1891      	adds	r1, r2, r2
 8004d8e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d90:	415b      	adcs	r3, r3
 8004d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d98:	4641      	mov	r1, r8
 8004d9a:	1851      	adds	r1, r2, r1
 8004d9c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d9e:	4649      	mov	r1, r9
 8004da0:	414b      	adcs	r3, r1
 8004da2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004db0:	4659      	mov	r1, fp
 8004db2:	00cb      	lsls	r3, r1, #3
 8004db4:	4651      	mov	r1, sl
 8004db6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dba:	4651      	mov	r1, sl
 8004dbc:	00ca      	lsls	r2, r1, #3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	4642      	mov	r2, r8
 8004dc6:	189b      	adds	r3, r3, r2
 8004dc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dcc:	464b      	mov	r3, r9
 8004dce:	460a      	mov	r2, r1
 8004dd0:	eb42 0303 	adc.w	r3, r2, r3
 8004dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004de4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004de8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004dec:	460b      	mov	r3, r1
 8004dee:	18db      	adds	r3, r3, r3
 8004df0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004df2:	4613      	mov	r3, r2
 8004df4:	eb42 0303 	adc.w	r3, r2, r3
 8004df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004dfe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e02:	f7fb fa3d 	bl	8000280 <__aeabi_uldivmod>
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e40 <UART_SetConfig+0x2d4>)
 8004e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e10:	095b      	lsrs	r3, r3, #5
 8004e12:	2164      	movs	r1, #100	@ 0x64
 8004e14:	fb01 f303 	mul.w	r3, r1, r3
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	3332      	adds	r3, #50	@ 0x32
 8004e1e:	4a08      	ldr	r2, [pc, #32]	@ (8004e40 <UART_SetConfig+0x2d4>)
 8004e20:	fba2 2303 	umull	r2, r3, r2, r3
 8004e24:	095b      	lsrs	r3, r3, #5
 8004e26:	f003 0207 	and.w	r2, r3, #7
 8004e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4422      	add	r2, r4
 8004e32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e34:	e106      	b.n	8005044 <UART_SetConfig+0x4d8>
 8004e36:	bf00      	nop
 8004e38:	40011000 	.word	0x40011000
 8004e3c:	40011400 	.word	0x40011400
 8004e40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e4e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e56:	4642      	mov	r2, r8
 8004e58:	464b      	mov	r3, r9
 8004e5a:	1891      	adds	r1, r2, r2
 8004e5c:	6239      	str	r1, [r7, #32]
 8004e5e:	415b      	adcs	r3, r3
 8004e60:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e66:	4641      	mov	r1, r8
 8004e68:	1854      	adds	r4, r2, r1
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	eb43 0501 	adc.w	r5, r3, r1
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	00eb      	lsls	r3, r5, #3
 8004e7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e7e:	00e2      	lsls	r2, r4, #3
 8004e80:	4614      	mov	r4, r2
 8004e82:	461d      	mov	r5, r3
 8004e84:	4643      	mov	r3, r8
 8004e86:	18e3      	adds	r3, r4, r3
 8004e88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e8c:	464b      	mov	r3, r9
 8004e8e:	eb45 0303 	adc.w	r3, r5, r3
 8004e92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ea2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ea6:	f04f 0200 	mov.w	r2, #0
 8004eaa:	f04f 0300 	mov.w	r3, #0
 8004eae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004eb2:	4629      	mov	r1, r5
 8004eb4:	008b      	lsls	r3, r1, #2
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ebc:	4621      	mov	r1, r4
 8004ebe:	008a      	lsls	r2, r1, #2
 8004ec0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ec4:	f7fb f9dc 	bl	8000280 <__aeabi_uldivmod>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4b60      	ldr	r3, [pc, #384]	@ (8005050 <UART_SetConfig+0x4e4>)
 8004ece:	fba3 2302 	umull	r2, r3, r3, r2
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	011c      	lsls	r4, r3, #4
 8004ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ee0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ee4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ee8:	4642      	mov	r2, r8
 8004eea:	464b      	mov	r3, r9
 8004eec:	1891      	adds	r1, r2, r2
 8004eee:	61b9      	str	r1, [r7, #24]
 8004ef0:	415b      	adcs	r3, r3
 8004ef2:	61fb      	str	r3, [r7, #28]
 8004ef4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ef8:	4641      	mov	r1, r8
 8004efa:	1851      	adds	r1, r2, r1
 8004efc:	6139      	str	r1, [r7, #16]
 8004efe:	4649      	mov	r1, r9
 8004f00:	414b      	adcs	r3, r1
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	f04f 0200 	mov.w	r2, #0
 8004f08:	f04f 0300 	mov.w	r3, #0
 8004f0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f10:	4659      	mov	r1, fp
 8004f12:	00cb      	lsls	r3, r1, #3
 8004f14:	4651      	mov	r1, sl
 8004f16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f1a:	4651      	mov	r1, sl
 8004f1c:	00ca      	lsls	r2, r1, #3
 8004f1e:	4610      	mov	r0, r2
 8004f20:	4619      	mov	r1, r3
 8004f22:	4603      	mov	r3, r0
 8004f24:	4642      	mov	r2, r8
 8004f26:	189b      	adds	r3, r3, r2
 8004f28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f2c:	464b      	mov	r3, r9
 8004f2e:	460a      	mov	r2, r1
 8004f30:	eb42 0303 	adc.w	r3, r2, r3
 8004f34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f50:	4649      	mov	r1, r9
 8004f52:	008b      	lsls	r3, r1, #2
 8004f54:	4641      	mov	r1, r8
 8004f56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f5a:	4641      	mov	r1, r8
 8004f5c:	008a      	lsls	r2, r1, #2
 8004f5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f62:	f7fb f98d 	bl	8000280 <__aeabi_uldivmod>
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	4b38      	ldr	r3, [pc, #224]	@ (8005050 <UART_SetConfig+0x4e4>)
 8004f6e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	2264      	movs	r2, #100	@ 0x64
 8004f76:	fb02 f303 	mul.w	r3, r2, r3
 8004f7a:	1acb      	subs	r3, r1, r3
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	3332      	adds	r3, #50	@ 0x32
 8004f80:	4a33      	ldr	r2, [pc, #204]	@ (8005050 <UART_SetConfig+0x4e4>)
 8004f82:	fba2 2303 	umull	r2, r3, r2, r3
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f8c:	441c      	add	r4, r3
 8004f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f92:	2200      	movs	r2, #0
 8004f94:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f96:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f9c:	4642      	mov	r2, r8
 8004f9e:	464b      	mov	r3, r9
 8004fa0:	1891      	adds	r1, r2, r2
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	415b      	adcs	r3, r3
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fac:	4641      	mov	r1, r8
 8004fae:	1851      	adds	r1, r2, r1
 8004fb0:	6039      	str	r1, [r7, #0]
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	414b      	adcs	r3, r1
 8004fb6:	607b      	str	r3, [r7, #4]
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	f04f 0300 	mov.w	r3, #0
 8004fc0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fc4:	4659      	mov	r1, fp
 8004fc6:	00cb      	lsls	r3, r1, #3
 8004fc8:	4651      	mov	r1, sl
 8004fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fce:	4651      	mov	r1, sl
 8004fd0:	00ca      	lsls	r2, r1, #3
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	4642      	mov	r2, r8
 8004fda:	189b      	adds	r3, r3, r2
 8004fdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fde:	464b      	mov	r3, r9
 8004fe0:	460a      	mov	r2, r1
 8004fe2:	eb42 0303 	adc.w	r3, r2, r3
 8004fe6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ff2:	667a      	str	r2, [r7, #100]	@ 0x64
 8004ff4:	f04f 0200 	mov.w	r2, #0
 8004ff8:	f04f 0300 	mov.w	r3, #0
 8004ffc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005000:	4649      	mov	r1, r9
 8005002:	008b      	lsls	r3, r1, #2
 8005004:	4641      	mov	r1, r8
 8005006:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800500a:	4641      	mov	r1, r8
 800500c:	008a      	lsls	r2, r1, #2
 800500e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005012:	f7fb f935 	bl	8000280 <__aeabi_uldivmod>
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	4b0d      	ldr	r3, [pc, #52]	@ (8005050 <UART_SetConfig+0x4e4>)
 800501c:	fba3 1302 	umull	r1, r3, r3, r2
 8005020:	095b      	lsrs	r3, r3, #5
 8005022:	2164      	movs	r1, #100	@ 0x64
 8005024:	fb01 f303 	mul.w	r3, r1, r3
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	3332      	adds	r3, #50	@ 0x32
 800502e:	4a08      	ldr	r2, [pc, #32]	@ (8005050 <UART_SetConfig+0x4e4>)
 8005030:	fba2 2303 	umull	r2, r3, r2, r3
 8005034:	095b      	lsrs	r3, r3, #5
 8005036:	f003 020f 	and.w	r2, r3, #15
 800503a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4422      	add	r2, r4
 8005042:	609a      	str	r2, [r3, #8]
}
 8005044:	bf00      	nop
 8005046:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800504a:	46bd      	mov	sp, r7
 800504c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005050:	51eb851f 	.word	0x51eb851f

08005054 <__NVIC_SetPriority>:
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	4603      	mov	r3, r0
 800505c:	6039      	str	r1, [r7, #0]
 800505e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005064:	2b00      	cmp	r3, #0
 8005066:	db0a      	blt.n	800507e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	b2da      	uxtb	r2, r3
 800506c:	490c      	ldr	r1, [pc, #48]	@ (80050a0 <__NVIC_SetPriority+0x4c>)
 800506e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005072:	0112      	lsls	r2, r2, #4
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	440b      	add	r3, r1
 8005078:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800507c:	e00a      	b.n	8005094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	b2da      	uxtb	r2, r3
 8005082:	4908      	ldr	r1, [pc, #32]	@ (80050a4 <__NVIC_SetPriority+0x50>)
 8005084:	79fb      	ldrb	r3, [r7, #7]
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	3b04      	subs	r3, #4
 800508c:	0112      	lsls	r2, r2, #4
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	440b      	add	r3, r1
 8005092:	761a      	strb	r2, [r3, #24]
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	e000e100 	.word	0xe000e100
 80050a4:	e000ed00 	.word	0xe000ed00

080050a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80050ac:	4b05      	ldr	r3, [pc, #20]	@ (80050c4 <SysTick_Handler+0x1c>)
 80050ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80050b0:	f001 fd46 	bl	8006b40 <xTaskGetSchedulerState>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d001      	beq.n	80050be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80050ba:	f002 fb3d 	bl	8007738 <xPortSysTickHandler>
  }
}
 80050be:	bf00      	nop
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	e000e010 	.word	0xe000e010

080050c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80050cc:	2100      	movs	r1, #0
 80050ce:	f06f 0004 	mvn.w	r0, #4
 80050d2:	f7ff ffbf 	bl	8005054 <__NVIC_SetPriority>
#endif
}
 80050d6:	bf00      	nop
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050e2:	f3ef 8305 	mrs	r3, IPSR
 80050e6:	603b      	str	r3, [r7, #0]
  return(result);
 80050e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80050ee:	f06f 0305 	mvn.w	r3, #5
 80050f2:	607b      	str	r3, [r7, #4]
 80050f4:	e00c      	b.n	8005110 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80050f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005120 <osKernelInitialize+0x44>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d105      	bne.n	800510a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80050fe:	4b08      	ldr	r3, [pc, #32]	@ (8005120 <osKernelInitialize+0x44>)
 8005100:	2201      	movs	r2, #1
 8005102:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005104:	2300      	movs	r3, #0
 8005106:	607b      	str	r3, [r7, #4]
 8005108:	e002      	b.n	8005110 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800510a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800510e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005110:	687b      	ldr	r3, [r7, #4]
}
 8005112:	4618      	mov	r0, r3
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	20000270 	.word	0x20000270

08005124 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800512a:	f3ef 8305 	mrs	r3, IPSR
 800512e:	603b      	str	r3, [r7, #0]
  return(result);
 8005130:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005136:	f06f 0305 	mvn.w	r3, #5
 800513a:	607b      	str	r3, [r7, #4]
 800513c:	e010      	b.n	8005160 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800513e:	4b0b      	ldr	r3, [pc, #44]	@ (800516c <osKernelStart+0x48>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d109      	bne.n	800515a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005146:	f7ff ffbf 	bl	80050c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800514a:	4b08      	ldr	r3, [pc, #32]	@ (800516c <osKernelStart+0x48>)
 800514c:	2202      	movs	r2, #2
 800514e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005150:	f001 f892 	bl	8006278 <vTaskStartScheduler>
      stat = osOK;
 8005154:	2300      	movs	r3, #0
 8005156:	607b      	str	r3, [r7, #4]
 8005158:	e002      	b.n	8005160 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800515a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800515e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005160:	687b      	ldr	r3, [r7, #4]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	20000270 	.word	0x20000270

08005170 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005170:	b580      	push	{r7, lr}
 8005172:	b08e      	sub	sp, #56	@ 0x38
 8005174:	af04      	add	r7, sp, #16
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800517c:	2300      	movs	r3, #0
 800517e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005180:	f3ef 8305 	mrs	r3, IPSR
 8005184:	617b      	str	r3, [r7, #20]
  return(result);
 8005186:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005188:	2b00      	cmp	r3, #0
 800518a:	d17e      	bne.n	800528a <osThreadNew+0x11a>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d07b      	beq.n	800528a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005192:	2380      	movs	r3, #128	@ 0x80
 8005194:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005196:	2318      	movs	r3, #24
 8005198:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800519a:	2300      	movs	r3, #0
 800519c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800519e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80051a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d045      	beq.n	8005236 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <osThreadNew+0x48>
        name = attr->name;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d008      	beq.n	80051de <osThreadNew+0x6e>
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	2b38      	cmp	r3, #56	@ 0x38
 80051d0:	d805      	bhi.n	80051de <osThreadNew+0x6e>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <osThreadNew+0x72>
        return (NULL);
 80051de:	2300      	movs	r3, #0
 80051e0:	e054      	b.n	800528c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	089b      	lsrs	r3, r3, #2
 80051f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00e      	beq.n	8005218 <osThreadNew+0xa8>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	2ba7      	cmp	r3, #167	@ 0xa7
 8005200:	d90a      	bls.n	8005218 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005206:	2b00      	cmp	r3, #0
 8005208:	d006      	beq.n	8005218 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <osThreadNew+0xa8>
        mem = 1;
 8005212:	2301      	movs	r3, #1
 8005214:	61bb      	str	r3, [r7, #24]
 8005216:	e010      	b.n	800523a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10c      	bne.n	800523a <osThreadNew+0xca>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d108      	bne.n	800523a <osThreadNew+0xca>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d104      	bne.n	800523a <osThreadNew+0xca>
          mem = 0;
 8005230:	2300      	movs	r3, #0
 8005232:	61bb      	str	r3, [r7, #24]
 8005234:	e001      	b.n	800523a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005236:	2300      	movs	r3, #0
 8005238:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d110      	bne.n	8005262 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005248:	9202      	str	r2, [sp, #8]
 800524a:	9301      	str	r3, [sp, #4]
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	6a3a      	ldr	r2, [r7, #32]
 8005254:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fe1a 	bl	8005e90 <xTaskCreateStatic>
 800525c:	4603      	mov	r3, r0
 800525e:	613b      	str	r3, [r7, #16]
 8005260:	e013      	b.n	800528a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d110      	bne.n	800528a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	b29a      	uxth	r2, r3
 800526c:	f107 0310 	add.w	r3, r7, #16
 8005270:	9301      	str	r3, [sp, #4]
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 fe68 	bl	8005f50 <xTaskCreate>
 8005280:	4603      	mov	r3, r0
 8005282:	2b01      	cmp	r3, #1
 8005284:	d001      	beq.n	800528a <osThreadNew+0x11a>
            hTask = NULL;
 8005286:	2300      	movs	r3, #0
 8005288:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800528a:	693b      	ldr	r3, [r7, #16]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3728      	adds	r7, #40	@ 0x28
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800529c:	f3ef 8305 	mrs	r3, IPSR
 80052a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80052a2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <osDelay+0x1c>
    stat = osErrorISR;
 80052a8:	f06f 0305 	mvn.w	r3, #5
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	e007      	b.n	80052c0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 ffa6 	bl	800620c <vTaskDelay>
    }
  }

  return (stat);
 80052c0:	68fb      	ldr	r3, [r7, #12]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
	...

080052cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4a07      	ldr	r2, [pc, #28]	@ (80052f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80052dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	4a06      	ldr	r2, [pc, #24]	@ (80052fc <vApplicationGetIdleTaskMemory+0x30>)
 80052e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2280      	movs	r2, #128	@ 0x80
 80052e8:	601a      	str	r2, [r3, #0]
}
 80052ea:	bf00      	nop
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	20000274 	.word	0x20000274
 80052fc:	2000031c 	.word	0x2000031c

08005300 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4a07      	ldr	r2, [pc, #28]	@ (800532c <vApplicationGetTimerTaskMemory+0x2c>)
 8005310:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4a06      	ldr	r2, [pc, #24]	@ (8005330 <vApplicationGetTimerTaskMemory+0x30>)
 8005316:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800531e:	601a      	str	r2, [r3, #0]
}
 8005320:	bf00      	nop
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	2000051c 	.word	0x2000051c
 8005330:	200005c4 	.word	0x200005c4

08005334 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f103 0208 	add.w	r2, r3, #8
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800534c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f103 0208 	add.w	r2, r3, #8
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f103 0208 	add.w	r2, r3, #8
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800538e:	b480      	push	{r7}
 8005390:	b085      	sub	sp, #20
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	601a      	str	r2, [r3, #0]
}
 80053ca:	bf00      	nop
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053d6:	b480      	push	{r7}
 80053d8:	b085      	sub	sp, #20
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053ec:	d103      	bne.n	80053f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	e00c      	b.n	8005410 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	3308      	adds	r3, #8
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	e002      	b.n	8005404 <vListInsert+0x2e>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	429a      	cmp	r2, r3
 800540e:	d2f6      	bcs.n	80053fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	601a      	str	r2, [r3, #0]
}
 800543c:	bf00      	nop
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6892      	ldr	r2, [r2, #8]
 800545e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	6852      	ldr	r2, [r2, #4]
 8005468:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	429a      	cmp	r2, r3
 8005472:	d103      	bne.n	800547c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	1e5a      	subs	r2, r3, #1
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10b      	bne.n	80054c8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054c2:	bf00      	nop
 80054c4:	bf00      	nop
 80054c6:	e7fd      	b.n	80054c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054c8:	f002 f8a6 	bl	8007618 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d4:	68f9      	ldr	r1, [r7, #12]
 80054d6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80054d8:	fb01 f303 	mul.w	r3, r1, r3
 80054dc:	441a      	add	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f8:	3b01      	subs	r3, #1
 80054fa:	68f9      	ldr	r1, [r7, #12]
 80054fc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80054fe:	fb01 f303 	mul.w	r3, r1, r3
 8005502:	441a      	add	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	22ff      	movs	r2, #255	@ 0xff
 800550c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	22ff      	movs	r2, #255	@ 0xff
 8005514:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d114      	bne.n	8005548 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d01a      	beq.n	800555c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3310      	adds	r3, #16
 800552a:	4618      	mov	r0, r3
 800552c:	f001 f942 	bl	80067b4 <xTaskRemoveFromEventList>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d012      	beq.n	800555c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005536:	4b0d      	ldr	r3, [pc, #52]	@ (800556c <xQueueGenericReset+0xd0>)
 8005538:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	e009      	b.n	800555c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3310      	adds	r3, #16
 800554c:	4618      	mov	r0, r3
 800554e:	f7ff fef1 	bl	8005334 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3324      	adds	r3, #36	@ 0x24
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff feec 	bl	8005334 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800555c:	f002 f88e 	bl	800767c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005560:	2301      	movs	r3, #1
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	e000ed04 	.word	0xe000ed04

08005570 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08e      	sub	sp, #56	@ 0x38
 8005574:	af02      	add	r7, sp, #8
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10b      	bne.n	800559c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005596:	bf00      	nop
 8005598:	bf00      	nop
 800559a:	e7fd      	b.n	8005598 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10b      	bne.n	80055ba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80055a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop
 80055b8:	e7fd      	b.n	80055b6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <xQueueGenericCreateStatic+0x56>
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <xQueueGenericCreateStatic+0x5a>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e000      	b.n	80055cc <xQueueGenericCreateStatic+0x5c>
 80055ca:	2300      	movs	r3, #0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10b      	bne.n	80055e8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	623b      	str	r3, [r7, #32]
}
 80055e2:	bf00      	nop
 80055e4:	bf00      	nop
 80055e6:	e7fd      	b.n	80055e4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d102      	bne.n	80055f4 <xQueueGenericCreateStatic+0x84>
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <xQueueGenericCreateStatic+0x88>
 80055f4:	2301      	movs	r3, #1
 80055f6:	e000      	b.n	80055fa <xQueueGenericCreateStatic+0x8a>
 80055f8:	2300      	movs	r3, #0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10b      	bne.n	8005616 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	61fb      	str	r3, [r7, #28]
}
 8005610:	bf00      	nop
 8005612:	bf00      	nop
 8005614:	e7fd      	b.n	8005612 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005616:	2350      	movs	r3, #80	@ 0x50
 8005618:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2b50      	cmp	r3, #80	@ 0x50
 800561e:	d00b      	beq.n	8005638 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	61bb      	str	r3, [r7, #24]
}
 8005632:	bf00      	nop
 8005634:	bf00      	nop
 8005636:	e7fd      	b.n	8005634 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005638:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800563e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00d      	beq.n	8005660 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800564c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	4613      	mov	r3, r2
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	68b9      	ldr	r1, [r7, #8]
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 f805 	bl	800566a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005662:	4618      	mov	r0, r3
 8005664:	3730      	adds	r7, #48	@ 0x30
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b084      	sub	sp, #16
 800566e:	af00      	add	r7, sp, #0
 8005670:	60f8      	str	r0, [r7, #12]
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	607a      	str	r2, [r7, #4]
 8005676:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d103      	bne.n	8005686 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	e002      	b.n	800568c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005698:	2101      	movs	r1, #1
 800569a:	69b8      	ldr	r0, [r7, #24]
 800569c:	f7ff fefe 	bl	800549c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	78fa      	ldrb	r2, [r7, #3]
 80056a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056a8:	bf00      	nop
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08e      	sub	sp, #56	@ 0x38
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056be:	2300      	movs	r3, #0
 80056c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80056c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10b      	bne.n	80056e4 <xQueueGenericSend+0x34>
	__asm volatile
 80056cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80056de:	bf00      	nop
 80056e0:	bf00      	nop
 80056e2:	e7fd      	b.n	80056e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d103      	bne.n	80056f2 <xQueueGenericSend+0x42>
 80056ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <xQueueGenericSend+0x46>
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <xQueueGenericSend+0x48>
 80056f6:	2300      	movs	r3, #0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10b      	bne.n	8005714 <xQueueGenericSend+0x64>
	__asm volatile
 80056fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005700:	f383 8811 	msr	BASEPRI, r3
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800570e:	bf00      	nop
 8005710:	bf00      	nop
 8005712:	e7fd      	b.n	8005710 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	2b02      	cmp	r3, #2
 8005718:	d103      	bne.n	8005722 <xQueueGenericSend+0x72>
 800571a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800571e:	2b01      	cmp	r3, #1
 8005720:	d101      	bne.n	8005726 <xQueueGenericSend+0x76>
 8005722:	2301      	movs	r3, #1
 8005724:	e000      	b.n	8005728 <xQueueGenericSend+0x78>
 8005726:	2300      	movs	r3, #0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10b      	bne.n	8005744 <xQueueGenericSend+0x94>
	__asm volatile
 800572c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005730:	f383 8811 	msr	BASEPRI, r3
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	623b      	str	r3, [r7, #32]
}
 800573e:	bf00      	nop
 8005740:	bf00      	nop
 8005742:	e7fd      	b.n	8005740 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005744:	f001 f9fc 	bl	8006b40 <xTaskGetSchedulerState>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d102      	bne.n	8005754 <xQueueGenericSend+0xa4>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <xQueueGenericSend+0xa8>
 8005754:	2301      	movs	r3, #1
 8005756:	e000      	b.n	800575a <xQueueGenericSend+0xaa>
 8005758:	2300      	movs	r3, #0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10b      	bne.n	8005776 <xQueueGenericSend+0xc6>
	__asm volatile
 800575e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	61fb      	str	r3, [r7, #28]
}
 8005770:	bf00      	nop
 8005772:	bf00      	nop
 8005774:	e7fd      	b.n	8005772 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005776:	f001 ff4f 	bl	8007618 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800577a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800577e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005782:	429a      	cmp	r2, r3
 8005784:	d302      	bcc.n	800578c <xQueueGenericSend+0xdc>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b02      	cmp	r3, #2
 800578a:	d129      	bne.n	80057e0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	68b9      	ldr	r1, [r7, #8]
 8005790:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005792:	f000 fa0f 	bl	8005bb4 <prvCopyDataToQueue>
 8005796:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579c:	2b00      	cmp	r3, #0
 800579e:	d010      	beq.n	80057c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a2:	3324      	adds	r3, #36	@ 0x24
 80057a4:	4618      	mov	r0, r3
 80057a6:	f001 f805 	bl	80067b4 <xTaskRemoveFromEventList>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d013      	beq.n	80057d8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057b0:	4b3f      	ldr	r3, [pc, #252]	@ (80058b0 <xQueueGenericSend+0x200>)
 80057b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	e00a      	b.n	80057d8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d007      	beq.n	80057d8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057c8:	4b39      	ldr	r3, [pc, #228]	@ (80058b0 <xQueueGenericSend+0x200>)
 80057ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057d8:	f001 ff50 	bl	800767c <vPortExitCritical>
				return pdPASS;
 80057dc:	2301      	movs	r3, #1
 80057de:	e063      	b.n	80058a8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d103      	bne.n	80057ee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057e6:	f001 ff49 	bl	800767c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057ea:	2300      	movs	r3, #0
 80057ec:	e05c      	b.n	80058a8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d106      	bne.n	8005802 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057f4:	f107 0314 	add.w	r3, r7, #20
 80057f8:	4618      	mov	r0, r3
 80057fa:	f001 f83f 	bl	800687c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057fe:	2301      	movs	r3, #1
 8005800:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005802:	f001 ff3b 	bl	800767c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005806:	f000 fda7 	bl	8006358 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800580a:	f001 ff05 	bl	8007618 <vPortEnterCritical>
 800580e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005810:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005814:	b25b      	sxtb	r3, r3
 8005816:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800581a:	d103      	bne.n	8005824 <xQueueGenericSend+0x174>
 800581c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005826:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800582a:	b25b      	sxtb	r3, r3
 800582c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005830:	d103      	bne.n	800583a <xQueueGenericSend+0x18a>
 8005832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800583a:	f001 ff1f 	bl	800767c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800583e:	1d3a      	adds	r2, r7, #4
 8005840:	f107 0314 	add.w	r3, r7, #20
 8005844:	4611      	mov	r1, r2
 8005846:	4618      	mov	r0, r3
 8005848:	f001 f82e 	bl	80068a8 <xTaskCheckForTimeOut>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d124      	bne.n	800589c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005852:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005854:	f000 faa6 	bl	8005da4 <prvIsQueueFull>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d018      	beq.n	8005890 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800585e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005860:	3310      	adds	r3, #16
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	4611      	mov	r1, r2
 8005866:	4618      	mov	r0, r3
 8005868:	f000 ff52 	bl	8006710 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800586c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800586e:	f000 fa31 	bl	8005cd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005872:	f000 fd7f 	bl	8006374 <xTaskResumeAll>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	f47f af7c 	bne.w	8005776 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800587e:	4b0c      	ldr	r3, [pc, #48]	@ (80058b0 <xQueueGenericSend+0x200>)
 8005880:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	e772      	b.n	8005776 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005890:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005892:	f000 fa1f 	bl	8005cd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005896:	f000 fd6d 	bl	8006374 <xTaskResumeAll>
 800589a:	e76c      	b.n	8005776 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800589c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800589e:	f000 fa19 	bl	8005cd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058a2:	f000 fd67 	bl	8006374 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3738      	adds	r7, #56	@ 0x38
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	e000ed04 	.word	0xe000ed04

080058b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b090      	sub	sp, #64	@ 0x40
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
 80058c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80058c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10b      	bne.n	80058e4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80058cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d0:	f383 8811 	msr	BASEPRI, r3
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80058de:	bf00      	nop
 80058e0:	bf00      	nop
 80058e2:	e7fd      	b.n	80058e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d103      	bne.n	80058f2 <xQueueGenericSendFromISR+0x3e>
 80058ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <xQueueGenericSendFromISR+0x42>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <xQueueGenericSendFromISR+0x44>
 80058f6:	2300      	movs	r3, #0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10b      	bne.n	8005914 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800590e:	bf00      	nop
 8005910:	bf00      	nop
 8005912:	e7fd      	b.n	8005910 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2b02      	cmp	r3, #2
 8005918:	d103      	bne.n	8005922 <xQueueGenericSendFromISR+0x6e>
 800591a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800591c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <xQueueGenericSendFromISR+0x72>
 8005922:	2301      	movs	r3, #1
 8005924:	e000      	b.n	8005928 <xQueueGenericSendFromISR+0x74>
 8005926:	2300      	movs	r3, #0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10b      	bne.n	8005944 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	623b      	str	r3, [r7, #32]
}
 800593e:	bf00      	nop
 8005940:	bf00      	nop
 8005942:	e7fd      	b.n	8005940 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005944:	f001 ff48 	bl	80077d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005948:	f3ef 8211 	mrs	r2, BASEPRI
 800594c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005950:	f383 8811 	msr	BASEPRI, r3
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	61fa      	str	r2, [r7, #28]
 800595e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005960:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005962:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005966:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800596a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800596c:	429a      	cmp	r2, r3
 800596e:	d302      	bcc.n	8005976 <xQueueGenericSendFromISR+0xc2>
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d12f      	bne.n	80059d6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005978:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800597c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005984:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	68b9      	ldr	r1, [r7, #8]
 800598a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800598c:	f000 f912 	bl	8005bb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005990:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005994:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005998:	d112      	bne.n	80059c0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800599a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d016      	beq.n	80059d0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a4:	3324      	adds	r3, #36	@ 0x24
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 ff04 	bl	80067b4 <xTaskRemoveFromEventList>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00e      	beq.n	80059d0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00b      	beq.n	80059d0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	e007      	b.n	80059d0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80059c4:	3301      	adds	r3, #1
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	b25a      	sxtb	r2, r3
 80059ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80059d0:	2301      	movs	r3, #1
 80059d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80059d4:	e001      	b.n	80059da <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059d6:	2300      	movs	r3, #0
 80059d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059dc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3740      	adds	r7, #64	@ 0x40
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08c      	sub	sp, #48	@ 0x30
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059fc:	2300      	movs	r3, #0
 80059fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10b      	bne.n	8005a22 <xQueueReceive+0x32>
	__asm volatile
 8005a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	623b      	str	r3, [r7, #32]
}
 8005a1c:	bf00      	nop
 8005a1e:	bf00      	nop
 8005a20:	e7fd      	b.n	8005a1e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d103      	bne.n	8005a30 <xQueueReceive+0x40>
 8005a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <xQueueReceive+0x44>
 8005a30:	2301      	movs	r3, #1
 8005a32:	e000      	b.n	8005a36 <xQueueReceive+0x46>
 8005a34:	2300      	movs	r3, #0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10b      	bne.n	8005a52 <xQueueReceive+0x62>
	__asm volatile
 8005a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a3e:	f383 8811 	msr	BASEPRI, r3
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	61fb      	str	r3, [r7, #28]
}
 8005a4c:	bf00      	nop
 8005a4e:	bf00      	nop
 8005a50:	e7fd      	b.n	8005a4e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a52:	f001 f875 	bl	8006b40 <xTaskGetSchedulerState>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d102      	bne.n	8005a62 <xQueueReceive+0x72>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <xQueueReceive+0x76>
 8005a62:	2301      	movs	r3, #1
 8005a64:	e000      	b.n	8005a68 <xQueueReceive+0x78>
 8005a66:	2300      	movs	r3, #0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10b      	bne.n	8005a84 <xQueueReceive+0x94>
	__asm volatile
 8005a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	61bb      	str	r3, [r7, #24]
}
 8005a7e:	bf00      	nop
 8005a80:	bf00      	nop
 8005a82:	e7fd      	b.n	8005a80 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a84:	f001 fdc8 	bl	8007618 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d01f      	beq.n	8005ad4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a94:	68b9      	ldr	r1, [r7, #8]
 8005a96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a98:	f000 f8f6 	bl	8005c88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9e:	1e5a      	subs	r2, r3, #1
 8005aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00f      	beq.n	8005acc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aae:	3310      	adds	r3, #16
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f000 fe7f 	bl	80067b4 <xTaskRemoveFromEventList>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d007      	beq.n	8005acc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005abc:	4b3c      	ldr	r3, [pc, #240]	@ (8005bb0 <xQueueReceive+0x1c0>)
 8005abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005acc:	f001 fdd6 	bl	800767c <vPortExitCritical>
				return pdPASS;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e069      	b.n	8005ba8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d103      	bne.n	8005ae2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ada:	f001 fdcf 	bl	800767c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	e062      	b.n	8005ba8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d106      	bne.n	8005af6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ae8:	f107 0310 	add.w	r3, r7, #16
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fec5 	bl	800687c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005af2:	2301      	movs	r3, #1
 8005af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005af6:	f001 fdc1 	bl	800767c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005afa:	f000 fc2d 	bl	8006358 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005afe:	f001 fd8b 	bl	8007618 <vPortEnterCritical>
 8005b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b08:	b25b      	sxtb	r3, r3
 8005b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b0e:	d103      	bne.n	8005b18 <xQueueReceive+0x128>
 8005b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b1e:	b25b      	sxtb	r3, r3
 8005b20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b24:	d103      	bne.n	8005b2e <xQueueReceive+0x13e>
 8005b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b2e:	f001 fda5 	bl	800767c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b32:	1d3a      	adds	r2, r7, #4
 8005b34:	f107 0310 	add.w	r3, r7, #16
 8005b38:	4611      	mov	r1, r2
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 feb4 	bl	80068a8 <xTaskCheckForTimeOut>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d123      	bne.n	8005b8e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b48:	f000 f916 	bl	8005d78 <prvIsQueueEmpty>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d017      	beq.n	8005b82 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b54:	3324      	adds	r3, #36	@ 0x24
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	4611      	mov	r1, r2
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fdd8 	bl	8006710 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b62:	f000 f8b7 	bl	8005cd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b66:	f000 fc05 	bl	8006374 <xTaskResumeAll>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d189      	bne.n	8005a84 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005b70:	4b0f      	ldr	r3, [pc, #60]	@ (8005bb0 <xQueueReceive+0x1c0>)
 8005b72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	e780      	b.n	8005a84 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b84:	f000 f8a6 	bl	8005cd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b88:	f000 fbf4 	bl	8006374 <xTaskResumeAll>
 8005b8c:	e77a      	b.n	8005a84 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b90:	f000 f8a0 	bl	8005cd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b94:	f000 fbee 	bl	8006374 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b9a:	f000 f8ed 	bl	8005d78 <prvIsQueueEmpty>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f43f af6f 	beq.w	8005a84 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ba6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3730      	adds	r7, #48	@ 0x30
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	e000ed04 	.word	0xe000ed04

08005bb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10d      	bne.n	8005bee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d14d      	bne.n	8005c76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 ffcc 	bl	8006b7c <xTaskPriorityDisinherit>
 8005be4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	609a      	str	r2, [r3, #8]
 8005bec:	e043      	b.n	8005c76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d119      	bne.n	8005c28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6858      	ldr	r0, [r3, #4]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	68b9      	ldr	r1, [r7, #8]
 8005c00:	f002 fa0b 	bl	800801a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0c:	441a      	add	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d32b      	bcc.n	8005c76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	605a      	str	r2, [r3, #4]
 8005c26:	e026      	b.n	8005c76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	68d8      	ldr	r0, [r3, #12]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c30:	461a      	mov	r2, r3
 8005c32:	68b9      	ldr	r1, [r7, #8]
 8005c34:	f002 f9f1 	bl	800801a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c40:	425b      	negs	r3, r3
 8005c42:	441a      	add	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	68da      	ldr	r2, [r3, #12]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d207      	bcs.n	8005c64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5c:	425b      	negs	r3, r3
 8005c5e:	441a      	add	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d105      	bne.n	8005c76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005c7e:	697b      	ldr	r3, [r7, #20]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d018      	beq.n	8005ccc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca2:	441a      	add	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68da      	ldr	r2, [r3, #12]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d303      	bcc.n	8005cbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68d9      	ldr	r1, [r3, #12]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	6838      	ldr	r0, [r7, #0]
 8005cc8:	f002 f9a7 	bl	800801a <memcpy>
	}
}
 8005ccc:	bf00      	nop
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cdc:	f001 fc9c 	bl	8007618 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ce6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ce8:	e011      	b.n	8005d0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d012      	beq.n	8005d18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	3324      	adds	r3, #36	@ 0x24
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 fd5c 	bl	80067b4 <xTaskRemoveFromEventList>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d02:	f000 fe35 	bl	8006970 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d06:	7bfb      	ldrb	r3, [r7, #15]
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	dce9      	bgt.n	8005cea <prvUnlockQueue+0x16>
 8005d16:	e000      	b.n	8005d1a <prvUnlockQueue+0x46>
					break;
 8005d18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	22ff      	movs	r2, #255	@ 0xff
 8005d1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005d22:	f001 fcab 	bl	800767c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d26:	f001 fc77 	bl	8007618 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d32:	e011      	b.n	8005d58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d012      	beq.n	8005d62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	3310      	adds	r3, #16
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 fd37 	bl	80067b4 <xTaskRemoveFromEventList>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d4c:	f000 fe10 	bl	8006970 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d50:	7bbb      	ldrb	r3, [r7, #14]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	dce9      	bgt.n	8005d34 <prvUnlockQueue+0x60>
 8005d60:	e000      	b.n	8005d64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	22ff      	movs	r2, #255	@ 0xff
 8005d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005d6c:	f001 fc86 	bl	800767c <vPortExitCritical>
}
 8005d70:	bf00      	nop
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d80:	f001 fc4a 	bl	8007618 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d102      	bne.n	8005d92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	60fb      	str	r3, [r7, #12]
 8005d90:	e001      	b.n	8005d96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d92:	2300      	movs	r3, #0
 8005d94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d96:	f001 fc71 	bl	800767c <vPortExitCritical>

	return xReturn;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005dac:	f001 fc34 	bl	8007618 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d102      	bne.n	8005dc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	e001      	b.n	8005dc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dc6:	f001 fc59 	bl	800767c <vPortExitCritical>

	return xReturn;
 8005dca:	68fb      	ldr	r3, [r7, #12]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	e014      	b.n	8005e0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005de4:	4a0f      	ldr	r2, [pc, #60]	@ (8005e24 <vQueueAddToRegistry+0x50>)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10b      	bne.n	8005e08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005df0:	490c      	ldr	r1, [pc, #48]	@ (8005e24 <vQueueAddToRegistry+0x50>)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8005e24 <vQueueAddToRegistry+0x50>)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	4413      	add	r3, r2
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e06:	e006      	b.n	8005e16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	60fb      	str	r3, [r7, #12]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2b07      	cmp	r3, #7
 8005e12:	d9e7      	bls.n	8005de4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e14:	bf00      	nop
 8005e16:	bf00      	nop
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	200009c4 	.word	0x200009c4

08005e28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e38:	f001 fbee 	bl	8007618 <vPortEnterCritical>
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e42:	b25b      	sxtb	r3, r3
 8005e44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e48:	d103      	bne.n	8005e52 <vQueueWaitForMessageRestricted+0x2a>
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e58:	b25b      	sxtb	r3, r3
 8005e5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e5e:	d103      	bne.n	8005e68 <vQueueWaitForMessageRestricted+0x40>
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e68:	f001 fc08 	bl	800767c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d106      	bne.n	8005e82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	3324      	adds	r3, #36	@ 0x24
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	68b9      	ldr	r1, [r7, #8]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fc6d 	bl	800675c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e82:	6978      	ldr	r0, [r7, #20]
 8005e84:	f7ff ff26 	bl	8005cd4 <prvUnlockQueue>
	}
 8005e88:	bf00      	nop
 8005e8a:	3718      	adds	r7, #24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08e      	sub	sp, #56	@ 0x38
 8005e94:	af04      	add	r7, sp, #16
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10b      	bne.n	8005ebc <xTaskCreateStatic+0x2c>
	__asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	623b      	str	r3, [r7, #32]
}
 8005eb6:	bf00      	nop
 8005eb8:	bf00      	nop
 8005eba:	e7fd      	b.n	8005eb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10b      	bne.n	8005eda <xTaskCreateStatic+0x4a>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	61fb      	str	r3, [r7, #28]
}
 8005ed4:	bf00      	nop
 8005ed6:	bf00      	nop
 8005ed8:	e7fd      	b.n	8005ed6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005eda:	23a8      	movs	r3, #168	@ 0xa8
 8005edc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	2ba8      	cmp	r3, #168	@ 0xa8
 8005ee2:	d00b      	beq.n	8005efc <xTaskCreateStatic+0x6c>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	61bb      	str	r3, [r7, #24]
}
 8005ef6:	bf00      	nop
 8005ef8:	bf00      	nop
 8005efa:	e7fd      	b.n	8005ef8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005efc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d01e      	beq.n	8005f42 <xTaskCreateStatic+0xb2>
 8005f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d01b      	beq.n	8005f42 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f0c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f12:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	9303      	str	r3, [sp, #12]
 8005f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f22:	9302      	str	r3, [sp, #8]
 8005f24:	f107 0314 	add.w	r3, r7, #20
 8005f28:	9301      	str	r3, [sp, #4]
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	68b9      	ldr	r1, [r7, #8]
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 f851 	bl	8005fdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f3c:	f000 f8f6 	bl	800612c <prvAddNewTaskToReadyList>
 8005f40:	e001      	b.n	8005f46 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f46:	697b      	ldr	r3, [r7, #20]
	}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3728      	adds	r7, #40	@ 0x28
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08c      	sub	sp, #48	@ 0x30
 8005f54:	af04      	add	r7, sp, #16
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	603b      	str	r3, [r7, #0]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f60:	88fb      	ldrh	r3, [r7, #6]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4618      	mov	r0, r3
 8005f66:	f001 fc79 	bl	800785c <pvPortMalloc>
 8005f6a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00e      	beq.n	8005f90 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f72:	20a8      	movs	r0, #168	@ 0xa8
 8005f74:	f001 fc72 	bl	800785c <pvPortMalloc>
 8005f78:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f86:	e005      	b.n	8005f94 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f88:	6978      	ldr	r0, [r7, #20]
 8005f8a:	f001 fd35 	bl	80079f8 <vPortFree>
 8005f8e:	e001      	b.n	8005f94 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f90:	2300      	movs	r3, #0
 8005f92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d017      	beq.n	8005fca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fa2:	88fa      	ldrh	r2, [r7, #6]
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	9303      	str	r3, [sp, #12]
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	9302      	str	r3, [sp, #8]
 8005fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fae:	9301      	str	r3, [sp, #4]
 8005fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	68b9      	ldr	r1, [r7, #8]
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 f80f 	bl	8005fdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fbe:	69f8      	ldr	r0, [r7, #28]
 8005fc0:	f000 f8b4 	bl	800612c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	61bb      	str	r3, [r7, #24]
 8005fc8:	e002      	b.n	8005fd0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005fce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fd0:	69bb      	ldr	r3, [r7, #24]
	}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3720      	adds	r7, #32
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
	...

08005fdc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b088      	sub	sp, #32
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
 8005fe8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fec:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	21a5      	movs	r1, #165	@ 0xa5
 8005ff6:	f001 ff36 	bl	8007e66 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006004:	3b01      	subs	r3, #1
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	f023 0307 	bic.w	r3, r3, #7
 8006012:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00b      	beq.n	8006036 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	617b      	str	r3, [r7, #20]
}
 8006030:	bf00      	nop
 8006032:	bf00      	nop
 8006034:	e7fd      	b.n	8006032 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d01f      	beq.n	800607c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800603c:	2300      	movs	r3, #0
 800603e:	61fb      	str	r3, [r7, #28]
 8006040:	e012      	b.n	8006068 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	4413      	add	r3, r2
 8006048:	7819      	ldrb	r1, [r3, #0]
 800604a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	4413      	add	r3, r2
 8006050:	3334      	adds	r3, #52	@ 0x34
 8006052:	460a      	mov	r2, r1
 8006054:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	4413      	add	r3, r2
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d006      	beq.n	8006070 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	3301      	adds	r3, #1
 8006066:	61fb      	str	r3, [r7, #28]
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	2b0f      	cmp	r3, #15
 800606c:	d9e9      	bls.n	8006042 <prvInitialiseNewTask+0x66>
 800606e:	e000      	b.n	8006072 <prvInitialiseNewTask+0x96>
			{
				break;
 8006070:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800607a:	e003      	b.n	8006084 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800607c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006086:	2b37      	cmp	r3, #55	@ 0x37
 8006088:	d901      	bls.n	800608e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800608a:	2337      	movs	r3, #55	@ 0x37
 800608c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800608e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006090:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006092:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006096:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006098:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800609a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609c:	2200      	movs	r2, #0
 800609e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a2:	3304      	adds	r3, #4
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff f965 	bl	8005374 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ac:	3318      	adds	r3, #24
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7ff f960 	bl	8005374 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80060c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060c8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060cc:	2200      	movs	r2, #0
 80060ce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80060da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060dc:	3354      	adds	r3, #84	@ 0x54
 80060de:	224c      	movs	r2, #76	@ 0x4c
 80060e0:	2100      	movs	r1, #0
 80060e2:	4618      	mov	r0, r3
 80060e4:	f001 febf 	bl	8007e66 <memset>
 80060e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ea:	4a0d      	ldr	r2, [pc, #52]	@ (8006120 <prvInitialiseNewTask+0x144>)
 80060ec:	659a      	str	r2, [r3, #88]	@ 0x58
 80060ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f0:	4a0c      	ldr	r2, [pc, #48]	@ (8006124 <prvInitialiseNewTask+0x148>)
 80060f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80060f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f6:	4a0c      	ldr	r2, [pc, #48]	@ (8006128 <prvInitialiseNewTask+0x14c>)
 80060f8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	68f9      	ldr	r1, [r7, #12]
 80060fe:	69b8      	ldr	r0, [r7, #24]
 8006100:	f001 f95a 	bl	80073b8 <pxPortInitialiseStack>
 8006104:	4602      	mov	r2, r0
 8006106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006108:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800610a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006116:	bf00      	nop
 8006118:	3720      	adds	r7, #32
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	20004c58 	.word	0x20004c58
 8006124:	20004cc0 	.word	0x20004cc0
 8006128:	20004d28 	.word	0x20004d28

0800612c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006134:	f001 fa70 	bl	8007618 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006138:	4b2d      	ldr	r3, [pc, #180]	@ (80061f0 <prvAddNewTaskToReadyList+0xc4>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3301      	adds	r3, #1
 800613e:	4a2c      	ldr	r2, [pc, #176]	@ (80061f0 <prvAddNewTaskToReadyList+0xc4>)
 8006140:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006142:	4b2c      	ldr	r3, [pc, #176]	@ (80061f4 <prvAddNewTaskToReadyList+0xc8>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d109      	bne.n	800615e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800614a:	4a2a      	ldr	r2, [pc, #168]	@ (80061f4 <prvAddNewTaskToReadyList+0xc8>)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006150:	4b27      	ldr	r3, [pc, #156]	@ (80061f0 <prvAddNewTaskToReadyList+0xc4>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d110      	bne.n	800617a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006158:	f000 fc2e 	bl	80069b8 <prvInitialiseTaskLists>
 800615c:	e00d      	b.n	800617a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800615e:	4b26      	ldr	r3, [pc, #152]	@ (80061f8 <prvAddNewTaskToReadyList+0xcc>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d109      	bne.n	800617a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006166:	4b23      	ldr	r3, [pc, #140]	@ (80061f4 <prvAddNewTaskToReadyList+0xc8>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006170:	429a      	cmp	r2, r3
 8006172:	d802      	bhi.n	800617a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006174:	4a1f      	ldr	r2, [pc, #124]	@ (80061f4 <prvAddNewTaskToReadyList+0xc8>)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800617a:	4b20      	ldr	r3, [pc, #128]	@ (80061fc <prvAddNewTaskToReadyList+0xd0>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3301      	adds	r3, #1
 8006180:	4a1e      	ldr	r2, [pc, #120]	@ (80061fc <prvAddNewTaskToReadyList+0xd0>)
 8006182:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006184:	4b1d      	ldr	r3, [pc, #116]	@ (80061fc <prvAddNewTaskToReadyList+0xd0>)
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006190:	4b1b      	ldr	r3, [pc, #108]	@ (8006200 <prvAddNewTaskToReadyList+0xd4>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	429a      	cmp	r2, r3
 8006196:	d903      	bls.n	80061a0 <prvAddNewTaskToReadyList+0x74>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619c:	4a18      	ldr	r2, [pc, #96]	@ (8006200 <prvAddNewTaskToReadyList+0xd4>)
 800619e:	6013      	str	r3, [r2, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061a4:	4613      	mov	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4a15      	ldr	r2, [pc, #84]	@ (8006204 <prvAddNewTaskToReadyList+0xd8>)
 80061ae:	441a      	add	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	3304      	adds	r3, #4
 80061b4:	4619      	mov	r1, r3
 80061b6:	4610      	mov	r0, r2
 80061b8:	f7ff f8e9 	bl	800538e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061bc:	f001 fa5e 	bl	800767c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061c0:	4b0d      	ldr	r3, [pc, #52]	@ (80061f8 <prvAddNewTaskToReadyList+0xcc>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00e      	beq.n	80061e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061c8:	4b0a      	ldr	r3, [pc, #40]	@ (80061f4 <prvAddNewTaskToReadyList+0xc8>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d207      	bcs.n	80061e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006208 <prvAddNewTaskToReadyList+0xdc>)
 80061d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061e6:	bf00      	nop
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20000ed8 	.word	0x20000ed8
 80061f4:	20000a04 	.word	0x20000a04
 80061f8:	20000ee4 	.word	0x20000ee4
 80061fc:	20000ef4 	.word	0x20000ef4
 8006200:	20000ee0 	.word	0x20000ee0
 8006204:	20000a08 	.word	0x20000a08
 8006208:	e000ed04 	.word	0xe000ed04

0800620c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006214:	2300      	movs	r3, #0
 8006216:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d018      	beq.n	8006250 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800621e:	4b14      	ldr	r3, [pc, #80]	@ (8006270 <vTaskDelay+0x64>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00b      	beq.n	800623e <vTaskDelay+0x32>
	__asm volatile
 8006226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	60bb      	str	r3, [r7, #8]
}
 8006238:	bf00      	nop
 800623a:	bf00      	nop
 800623c:	e7fd      	b.n	800623a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800623e:	f000 f88b 	bl	8006358 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006242:	2100      	movs	r1, #0
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fd09 	bl	8006c5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800624a:	f000 f893 	bl	8006374 <xTaskResumeAll>
 800624e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d107      	bne.n	8006266 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006256:	4b07      	ldr	r3, [pc, #28]	@ (8006274 <vTaskDelay+0x68>)
 8006258:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006266:	bf00      	nop
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	20000f00 	.word	0x20000f00
 8006274:	e000ed04 	.word	0xe000ed04

08006278 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b08a      	sub	sp, #40	@ 0x28
 800627c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800627e:	2300      	movs	r3, #0
 8006280:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006282:	2300      	movs	r3, #0
 8006284:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006286:	463a      	mov	r2, r7
 8006288:	1d39      	adds	r1, r7, #4
 800628a:	f107 0308 	add.w	r3, r7, #8
 800628e:	4618      	mov	r0, r3
 8006290:	f7ff f81c 	bl	80052cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	9202      	str	r2, [sp, #8]
 800629c:	9301      	str	r3, [sp, #4]
 800629e:	2300      	movs	r3, #0
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	2300      	movs	r3, #0
 80062a4:	460a      	mov	r2, r1
 80062a6:	4924      	ldr	r1, [pc, #144]	@ (8006338 <vTaskStartScheduler+0xc0>)
 80062a8:	4824      	ldr	r0, [pc, #144]	@ (800633c <vTaskStartScheduler+0xc4>)
 80062aa:	f7ff fdf1 	bl	8005e90 <xTaskCreateStatic>
 80062ae:	4603      	mov	r3, r0
 80062b0:	4a23      	ldr	r2, [pc, #140]	@ (8006340 <vTaskStartScheduler+0xc8>)
 80062b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80062b4:	4b22      	ldr	r3, [pc, #136]	@ (8006340 <vTaskStartScheduler+0xc8>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80062bc:	2301      	movs	r3, #1
 80062be:	617b      	str	r3, [r7, #20]
 80062c0:	e001      	b.n	80062c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062c2:	2300      	movs	r3, #0
 80062c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d102      	bne.n	80062d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80062cc:	f000 fd1a 	bl	8006d04 <xTimerCreateTimerTask>
 80062d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d11b      	bne.n	8006310 <vTaskStartScheduler+0x98>
	__asm volatile
 80062d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062dc:	f383 8811 	msr	BASEPRI, r3
 80062e0:	f3bf 8f6f 	isb	sy
 80062e4:	f3bf 8f4f 	dsb	sy
 80062e8:	613b      	str	r3, [r7, #16]
}
 80062ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80062ec:	4b15      	ldr	r3, [pc, #84]	@ (8006344 <vTaskStartScheduler+0xcc>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	3354      	adds	r3, #84	@ 0x54
 80062f2:	4a15      	ldr	r2, [pc, #84]	@ (8006348 <vTaskStartScheduler+0xd0>)
 80062f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062f6:	4b15      	ldr	r3, [pc, #84]	@ (800634c <vTaskStartScheduler+0xd4>)
 80062f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80062fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062fe:	4b14      	ldr	r3, [pc, #80]	@ (8006350 <vTaskStartScheduler+0xd8>)
 8006300:	2201      	movs	r2, #1
 8006302:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006304:	4b13      	ldr	r3, [pc, #76]	@ (8006354 <vTaskStartScheduler+0xdc>)
 8006306:	2200      	movs	r2, #0
 8006308:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800630a:	f001 f8e1 	bl	80074d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800630e:	e00f      	b.n	8006330 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006316:	d10b      	bne.n	8006330 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631c:	f383 8811 	msr	BASEPRI, r3
 8006320:	f3bf 8f6f 	isb	sy
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	60fb      	str	r3, [r7, #12]
}
 800632a:	bf00      	nop
 800632c:	bf00      	nop
 800632e:	e7fd      	b.n	800632c <vTaskStartScheduler+0xb4>
}
 8006330:	bf00      	nop
 8006332:	3718      	adds	r7, #24
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	08008bdc 	.word	0x08008bdc
 800633c:	08006989 	.word	0x08006989
 8006340:	20000efc 	.word	0x20000efc
 8006344:	20000a04 	.word	0x20000a04
 8006348:	2000001c 	.word	0x2000001c
 800634c:	20000ef8 	.word	0x20000ef8
 8006350:	20000ee4 	.word	0x20000ee4
 8006354:	20000edc 	.word	0x20000edc

08006358 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006358:	b480      	push	{r7}
 800635a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800635c:	4b04      	ldr	r3, [pc, #16]	@ (8006370 <vTaskSuspendAll+0x18>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	3301      	adds	r3, #1
 8006362:	4a03      	ldr	r2, [pc, #12]	@ (8006370 <vTaskSuspendAll+0x18>)
 8006364:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006366:	bf00      	nop
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	20000f00 	.word	0x20000f00

08006374 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800637a:	2300      	movs	r3, #0
 800637c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800637e:	2300      	movs	r3, #0
 8006380:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006382:	4b42      	ldr	r3, [pc, #264]	@ (800648c <xTaskResumeAll+0x118>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10b      	bne.n	80063a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	603b      	str	r3, [r7, #0]
}
 800639c:	bf00      	nop
 800639e:	bf00      	nop
 80063a0:	e7fd      	b.n	800639e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80063a2:	f001 f939 	bl	8007618 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80063a6:	4b39      	ldr	r3, [pc, #228]	@ (800648c <xTaskResumeAll+0x118>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	4a37      	ldr	r2, [pc, #220]	@ (800648c <xTaskResumeAll+0x118>)
 80063ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063b0:	4b36      	ldr	r3, [pc, #216]	@ (800648c <xTaskResumeAll+0x118>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d162      	bne.n	800647e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063b8:	4b35      	ldr	r3, [pc, #212]	@ (8006490 <xTaskResumeAll+0x11c>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d05e      	beq.n	800647e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063c0:	e02f      	b.n	8006422 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c2:	4b34      	ldr	r3, [pc, #208]	@ (8006494 <xTaskResumeAll+0x120>)
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3318      	adds	r3, #24
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7ff f83a 	bl	8005448 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	3304      	adds	r3, #4
 80063d8:	4618      	mov	r0, r3
 80063da:	f7ff f835 	bl	8005448 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063e2:	4b2d      	ldr	r3, [pc, #180]	@ (8006498 <xTaskResumeAll+0x124>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d903      	bls.n	80063f2 <xTaskResumeAll+0x7e>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ee:	4a2a      	ldr	r2, [pc, #168]	@ (8006498 <xTaskResumeAll+0x124>)
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063f6:	4613      	mov	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4a27      	ldr	r2, [pc, #156]	@ (800649c <xTaskResumeAll+0x128>)
 8006400:	441a      	add	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	3304      	adds	r3, #4
 8006406:	4619      	mov	r1, r3
 8006408:	4610      	mov	r0, r2
 800640a:	f7fe ffc0 	bl	800538e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006412:	4b23      	ldr	r3, [pc, #140]	@ (80064a0 <xTaskResumeAll+0x12c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006418:	429a      	cmp	r2, r3
 800641a:	d302      	bcc.n	8006422 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800641c:	4b21      	ldr	r3, [pc, #132]	@ (80064a4 <xTaskResumeAll+0x130>)
 800641e:	2201      	movs	r2, #1
 8006420:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006422:	4b1c      	ldr	r3, [pc, #112]	@ (8006494 <xTaskResumeAll+0x120>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1cb      	bne.n	80063c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006430:	f000 fb66 	bl	8006b00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006434:	4b1c      	ldr	r3, [pc, #112]	@ (80064a8 <xTaskResumeAll+0x134>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d010      	beq.n	8006462 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006440:	f000 f846 	bl	80064d0 <xTaskIncrementTick>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800644a:	4b16      	ldr	r3, [pc, #88]	@ (80064a4 <xTaskResumeAll+0x130>)
 800644c:	2201      	movs	r2, #1
 800644e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3b01      	subs	r3, #1
 8006454:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1f1      	bne.n	8006440 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800645c:	4b12      	ldr	r3, [pc, #72]	@ (80064a8 <xTaskResumeAll+0x134>)
 800645e:	2200      	movs	r2, #0
 8006460:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006462:	4b10      	ldr	r3, [pc, #64]	@ (80064a4 <xTaskResumeAll+0x130>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d009      	beq.n	800647e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800646a:	2301      	movs	r3, #1
 800646c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800646e:	4b0f      	ldr	r3, [pc, #60]	@ (80064ac <xTaskResumeAll+0x138>)
 8006470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800647e:	f001 f8fd 	bl	800767c <vPortExitCritical>

	return xAlreadyYielded;
 8006482:	68bb      	ldr	r3, [r7, #8]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	20000f00 	.word	0x20000f00
 8006490:	20000ed8 	.word	0x20000ed8
 8006494:	20000e98 	.word	0x20000e98
 8006498:	20000ee0 	.word	0x20000ee0
 800649c:	20000a08 	.word	0x20000a08
 80064a0:	20000a04 	.word	0x20000a04
 80064a4:	20000eec 	.word	0x20000eec
 80064a8:	20000ee8 	.word	0x20000ee8
 80064ac:	e000ed04 	.word	0xe000ed04

080064b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80064b6:	4b05      	ldr	r3, [pc, #20]	@ (80064cc <xTaskGetTickCount+0x1c>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80064bc:	687b      	ldr	r3, [r7, #4]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	20000edc 	.word	0x20000edc

080064d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80064d6:	2300      	movs	r3, #0
 80064d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064da:	4b4f      	ldr	r3, [pc, #316]	@ (8006618 <xTaskIncrementTick+0x148>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f040 8090 	bne.w	8006604 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064e4:	4b4d      	ldr	r3, [pc, #308]	@ (800661c <xTaskIncrementTick+0x14c>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3301      	adds	r3, #1
 80064ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064ec:	4a4b      	ldr	r2, [pc, #300]	@ (800661c <xTaskIncrementTick+0x14c>)
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d121      	bne.n	800653c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80064f8:	4b49      	ldr	r3, [pc, #292]	@ (8006620 <xTaskIncrementTick+0x150>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00b      	beq.n	800651a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	603b      	str	r3, [r7, #0]
}
 8006514:	bf00      	nop
 8006516:	bf00      	nop
 8006518:	e7fd      	b.n	8006516 <xTaskIncrementTick+0x46>
 800651a:	4b41      	ldr	r3, [pc, #260]	@ (8006620 <xTaskIncrementTick+0x150>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	4b40      	ldr	r3, [pc, #256]	@ (8006624 <xTaskIncrementTick+0x154>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a3e      	ldr	r2, [pc, #248]	@ (8006620 <xTaskIncrementTick+0x150>)
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	4a3e      	ldr	r2, [pc, #248]	@ (8006624 <xTaskIncrementTick+0x154>)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6013      	str	r3, [r2, #0]
 800652e:	4b3e      	ldr	r3, [pc, #248]	@ (8006628 <xTaskIncrementTick+0x158>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	3301      	adds	r3, #1
 8006534:	4a3c      	ldr	r2, [pc, #240]	@ (8006628 <xTaskIncrementTick+0x158>)
 8006536:	6013      	str	r3, [r2, #0]
 8006538:	f000 fae2 	bl	8006b00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800653c:	4b3b      	ldr	r3, [pc, #236]	@ (800662c <xTaskIncrementTick+0x15c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	429a      	cmp	r2, r3
 8006544:	d349      	bcc.n	80065da <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006546:	4b36      	ldr	r3, [pc, #216]	@ (8006620 <xTaskIncrementTick+0x150>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d104      	bne.n	800655a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006550:	4b36      	ldr	r3, [pc, #216]	@ (800662c <xTaskIncrementTick+0x15c>)
 8006552:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006556:	601a      	str	r2, [r3, #0]
					break;
 8006558:	e03f      	b.n	80065da <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800655a:	4b31      	ldr	r3, [pc, #196]	@ (8006620 <xTaskIncrementTick+0x150>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	429a      	cmp	r2, r3
 8006570:	d203      	bcs.n	800657a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006572:	4a2e      	ldr	r2, [pc, #184]	@ (800662c <xTaskIncrementTick+0x15c>)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006578:	e02f      	b.n	80065da <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	3304      	adds	r3, #4
 800657e:	4618      	mov	r0, r3
 8006580:	f7fe ff62 	bl	8005448 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006588:	2b00      	cmp	r3, #0
 800658a:	d004      	beq.n	8006596 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	3318      	adds	r3, #24
 8006590:	4618      	mov	r0, r3
 8006592:	f7fe ff59 	bl	8005448 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800659a:	4b25      	ldr	r3, [pc, #148]	@ (8006630 <xTaskIncrementTick+0x160>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d903      	bls.n	80065aa <xTaskIncrementTick+0xda>
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a6:	4a22      	ldr	r2, [pc, #136]	@ (8006630 <xTaskIncrementTick+0x160>)
 80065a8:	6013      	str	r3, [r2, #0]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ae:	4613      	mov	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006634 <xTaskIncrementTick+0x164>)
 80065b8:	441a      	add	r2, r3
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	3304      	adds	r3, #4
 80065be:	4619      	mov	r1, r3
 80065c0:	4610      	mov	r0, r2
 80065c2:	f7fe fee4 	bl	800538e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ca:	4b1b      	ldr	r3, [pc, #108]	@ (8006638 <xTaskIncrementTick+0x168>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d3b8      	bcc.n	8006546 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80065d4:	2301      	movs	r3, #1
 80065d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065d8:	e7b5      	b.n	8006546 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065da:	4b17      	ldr	r3, [pc, #92]	@ (8006638 <xTaskIncrementTick+0x168>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065e0:	4914      	ldr	r1, [pc, #80]	@ (8006634 <xTaskIncrementTick+0x164>)
 80065e2:	4613      	mov	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	440b      	add	r3, r1
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d901      	bls.n	80065f6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80065f2:	2301      	movs	r3, #1
 80065f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80065f6:	4b11      	ldr	r3, [pc, #68]	@ (800663c <xTaskIncrementTick+0x16c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d007      	beq.n	800660e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80065fe:	2301      	movs	r3, #1
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	e004      	b.n	800660e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006604:	4b0e      	ldr	r3, [pc, #56]	@ (8006640 <xTaskIncrementTick+0x170>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3301      	adds	r3, #1
 800660a:	4a0d      	ldr	r2, [pc, #52]	@ (8006640 <xTaskIncrementTick+0x170>)
 800660c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800660e:	697b      	ldr	r3, [r7, #20]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3718      	adds	r7, #24
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	20000f00 	.word	0x20000f00
 800661c:	20000edc 	.word	0x20000edc
 8006620:	20000e90 	.word	0x20000e90
 8006624:	20000e94 	.word	0x20000e94
 8006628:	20000ef0 	.word	0x20000ef0
 800662c:	20000ef8 	.word	0x20000ef8
 8006630:	20000ee0 	.word	0x20000ee0
 8006634:	20000a08 	.word	0x20000a08
 8006638:	20000a04 	.word	0x20000a04
 800663c:	20000eec 	.word	0x20000eec
 8006640:	20000ee8 	.word	0x20000ee8

08006644 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800664a:	4b2b      	ldr	r3, [pc, #172]	@ (80066f8 <vTaskSwitchContext+0xb4>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006652:	4b2a      	ldr	r3, [pc, #168]	@ (80066fc <vTaskSwitchContext+0xb8>)
 8006654:	2201      	movs	r2, #1
 8006656:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006658:	e047      	b.n	80066ea <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800665a:	4b28      	ldr	r3, [pc, #160]	@ (80066fc <vTaskSwitchContext+0xb8>)
 800665c:	2200      	movs	r2, #0
 800665e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006660:	4b27      	ldr	r3, [pc, #156]	@ (8006700 <vTaskSwitchContext+0xbc>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	60fb      	str	r3, [r7, #12]
 8006666:	e011      	b.n	800668c <vTaskSwitchContext+0x48>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10b      	bne.n	8006686 <vTaskSwitchContext+0x42>
	__asm volatile
 800666e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	607b      	str	r3, [r7, #4]
}
 8006680:	bf00      	nop
 8006682:	bf00      	nop
 8006684:	e7fd      	b.n	8006682 <vTaskSwitchContext+0x3e>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	3b01      	subs	r3, #1
 800668a:	60fb      	str	r3, [r7, #12]
 800668c:	491d      	ldr	r1, [pc, #116]	@ (8006704 <vTaskSwitchContext+0xc0>)
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	4613      	mov	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	440b      	add	r3, r1
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d0e3      	beq.n	8006668 <vTaskSwitchContext+0x24>
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	4613      	mov	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4a16      	ldr	r2, [pc, #88]	@ (8006704 <vTaskSwitchContext+0xc0>)
 80066ac:	4413      	add	r3, r2
 80066ae:	60bb      	str	r3, [r7, #8]
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	605a      	str	r2, [r3, #4]
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	3308      	adds	r3, #8
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d104      	bne.n	80066d0 <vTaskSwitchContext+0x8c>
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	605a      	str	r2, [r3, #4]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	4a0c      	ldr	r2, [pc, #48]	@ (8006708 <vTaskSwitchContext+0xc4>)
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	4a09      	ldr	r2, [pc, #36]	@ (8006700 <vTaskSwitchContext+0xbc>)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80066e0:	4b09      	ldr	r3, [pc, #36]	@ (8006708 <vTaskSwitchContext+0xc4>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3354      	adds	r3, #84	@ 0x54
 80066e6:	4a09      	ldr	r2, [pc, #36]	@ (800670c <vTaskSwitchContext+0xc8>)
 80066e8:	6013      	str	r3, [r2, #0]
}
 80066ea:	bf00      	nop
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	20000f00 	.word	0x20000f00
 80066fc:	20000eec 	.word	0x20000eec
 8006700:	20000ee0 	.word	0x20000ee0
 8006704:	20000a08 	.word	0x20000a08
 8006708:	20000a04 	.word	0x20000a04
 800670c:	2000001c 	.word	0x2000001c

08006710 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10b      	bne.n	8006738 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	60fb      	str	r3, [r7, #12]
}
 8006732:	bf00      	nop
 8006734:	bf00      	nop
 8006736:	e7fd      	b.n	8006734 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006738:	4b07      	ldr	r3, [pc, #28]	@ (8006758 <vTaskPlaceOnEventList+0x48>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3318      	adds	r3, #24
 800673e:	4619      	mov	r1, r3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7fe fe48 	bl	80053d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006746:	2101      	movs	r1, #1
 8006748:	6838      	ldr	r0, [r7, #0]
 800674a:	f000 fa87 	bl	8006c5c <prvAddCurrentTaskToDelayedList>
}
 800674e:	bf00      	nop
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	20000a04 	.word	0x20000a04

0800675c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10b      	bne.n	8006786 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800676e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	617b      	str	r3, [r7, #20]
}
 8006780:	bf00      	nop
 8006782:	bf00      	nop
 8006784:	e7fd      	b.n	8006782 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006786:	4b0a      	ldr	r3, [pc, #40]	@ (80067b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3318      	adds	r3, #24
 800678c:	4619      	mov	r1, r3
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f7fe fdfd 	bl	800538e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800679a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800679e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80067a0:	6879      	ldr	r1, [r7, #4]
 80067a2:	68b8      	ldr	r0, [r7, #8]
 80067a4:	f000 fa5a 	bl	8006c5c <prvAddCurrentTaskToDelayedList>
	}
 80067a8:	bf00      	nop
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	20000a04 	.word	0x20000a04

080067b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10b      	bne.n	80067e2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	60fb      	str	r3, [r7, #12]
}
 80067dc:	bf00      	nop
 80067de:	bf00      	nop
 80067e0:	e7fd      	b.n	80067de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	3318      	adds	r3, #24
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fe fe2e 	bl	8005448 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006864 <xTaskRemoveFromEventList+0xb0>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d11d      	bne.n	8006830 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	3304      	adds	r3, #4
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7fe fe25 	bl	8005448 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006802:	4b19      	ldr	r3, [pc, #100]	@ (8006868 <xTaskRemoveFromEventList+0xb4>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	429a      	cmp	r2, r3
 8006808:	d903      	bls.n	8006812 <xTaskRemoveFromEventList+0x5e>
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680e:	4a16      	ldr	r2, [pc, #88]	@ (8006868 <xTaskRemoveFromEventList+0xb4>)
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006816:	4613      	mov	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4a13      	ldr	r2, [pc, #76]	@ (800686c <xTaskRemoveFromEventList+0xb8>)
 8006820:	441a      	add	r2, r3
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	3304      	adds	r3, #4
 8006826:	4619      	mov	r1, r3
 8006828:	4610      	mov	r0, r2
 800682a:	f7fe fdb0 	bl	800538e <vListInsertEnd>
 800682e:	e005      	b.n	800683c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	3318      	adds	r3, #24
 8006834:	4619      	mov	r1, r3
 8006836:	480e      	ldr	r0, [pc, #56]	@ (8006870 <xTaskRemoveFromEventList+0xbc>)
 8006838:	f7fe fda9 	bl	800538e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006840:	4b0c      	ldr	r3, [pc, #48]	@ (8006874 <xTaskRemoveFromEventList+0xc0>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006846:	429a      	cmp	r2, r3
 8006848:	d905      	bls.n	8006856 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800684a:	2301      	movs	r3, #1
 800684c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800684e:	4b0a      	ldr	r3, [pc, #40]	@ (8006878 <xTaskRemoveFromEventList+0xc4>)
 8006850:	2201      	movs	r2, #1
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	e001      	b.n	800685a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006856:	2300      	movs	r3, #0
 8006858:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800685a:	697b      	ldr	r3, [r7, #20]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3718      	adds	r7, #24
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	20000f00 	.word	0x20000f00
 8006868:	20000ee0 	.word	0x20000ee0
 800686c:	20000a08 	.word	0x20000a08
 8006870:	20000e98 	.word	0x20000e98
 8006874:	20000a04 	.word	0x20000a04
 8006878:	20000eec 	.word	0x20000eec

0800687c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006884:	4b06      	ldr	r3, [pc, #24]	@ (80068a0 <vTaskInternalSetTimeOutState+0x24>)
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800688c:	4b05      	ldr	r3, [pc, #20]	@ (80068a4 <vTaskInternalSetTimeOutState+0x28>)
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	605a      	str	r2, [r3, #4]
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	20000ef0 	.word	0x20000ef0
 80068a4:	20000edc 	.word	0x20000edc

080068a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b088      	sub	sp, #32
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10b      	bne.n	80068d0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80068b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	613b      	str	r3, [r7, #16]
}
 80068ca:	bf00      	nop
 80068cc:	bf00      	nop
 80068ce:	e7fd      	b.n	80068cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10b      	bne.n	80068ee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80068d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068da:	f383 8811 	msr	BASEPRI, r3
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f3bf 8f4f 	dsb	sy
 80068e6:	60fb      	str	r3, [r7, #12]
}
 80068e8:	bf00      	nop
 80068ea:	bf00      	nop
 80068ec:	e7fd      	b.n	80068ea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80068ee:	f000 fe93 	bl	8007618 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80068f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006968 <xTaskCheckForTimeOut+0xc0>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800690a:	d102      	bne.n	8006912 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800690c:	2300      	movs	r3, #0
 800690e:	61fb      	str	r3, [r7, #28]
 8006910:	e023      	b.n	800695a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	4b15      	ldr	r3, [pc, #84]	@ (800696c <xTaskCheckForTimeOut+0xc4>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	429a      	cmp	r2, r3
 800691c:	d007      	beq.n	800692e <xTaskCheckForTimeOut+0x86>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	429a      	cmp	r2, r3
 8006926:	d302      	bcc.n	800692e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006928:	2301      	movs	r3, #1
 800692a:	61fb      	str	r3, [r7, #28]
 800692c:	e015      	b.n	800695a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	429a      	cmp	r2, r3
 8006936:	d20b      	bcs.n	8006950 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	1ad2      	subs	r2, r2, r3
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f7ff ff99 	bl	800687c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800694a:	2300      	movs	r3, #0
 800694c:	61fb      	str	r3, [r7, #28]
 800694e:	e004      	b.n	800695a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	2200      	movs	r2, #0
 8006954:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006956:	2301      	movs	r3, #1
 8006958:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800695a:	f000 fe8f 	bl	800767c <vPortExitCritical>

	return xReturn;
 800695e:	69fb      	ldr	r3, [r7, #28]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3720      	adds	r7, #32
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	20000edc 	.word	0x20000edc
 800696c:	20000ef0 	.word	0x20000ef0

08006970 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006970:	b480      	push	{r7}
 8006972:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006974:	4b03      	ldr	r3, [pc, #12]	@ (8006984 <vTaskMissedYield+0x14>)
 8006976:	2201      	movs	r2, #1
 8006978:	601a      	str	r2, [r3, #0]
}
 800697a:	bf00      	nop
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	20000eec 	.word	0x20000eec

08006988 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006990:	f000 f852 	bl	8006a38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006994:	4b06      	ldr	r3, [pc, #24]	@ (80069b0 <prvIdleTask+0x28>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d9f9      	bls.n	8006990 <prvIdleTask+0x8>
			{
				taskYIELD();
 800699c:	4b05      	ldr	r3, [pc, #20]	@ (80069b4 <prvIdleTask+0x2c>)
 800699e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80069ac:	e7f0      	b.n	8006990 <prvIdleTask+0x8>
 80069ae:	bf00      	nop
 80069b0:	20000a08 	.word	0x20000a08
 80069b4:	e000ed04 	.word	0xe000ed04

080069b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069be:	2300      	movs	r3, #0
 80069c0:	607b      	str	r3, [r7, #4]
 80069c2:	e00c      	b.n	80069de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	4613      	mov	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4a12      	ldr	r2, [pc, #72]	@ (8006a18 <prvInitialiseTaskLists+0x60>)
 80069d0:	4413      	add	r3, r2
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fe fcae 	bl	8005334 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	3301      	adds	r3, #1
 80069dc:	607b      	str	r3, [r7, #4]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b37      	cmp	r3, #55	@ 0x37
 80069e2:	d9ef      	bls.n	80069c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80069e4:	480d      	ldr	r0, [pc, #52]	@ (8006a1c <prvInitialiseTaskLists+0x64>)
 80069e6:	f7fe fca5 	bl	8005334 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80069ea:	480d      	ldr	r0, [pc, #52]	@ (8006a20 <prvInitialiseTaskLists+0x68>)
 80069ec:	f7fe fca2 	bl	8005334 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069f0:	480c      	ldr	r0, [pc, #48]	@ (8006a24 <prvInitialiseTaskLists+0x6c>)
 80069f2:	f7fe fc9f 	bl	8005334 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80069f6:	480c      	ldr	r0, [pc, #48]	@ (8006a28 <prvInitialiseTaskLists+0x70>)
 80069f8:	f7fe fc9c 	bl	8005334 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80069fc:	480b      	ldr	r0, [pc, #44]	@ (8006a2c <prvInitialiseTaskLists+0x74>)
 80069fe:	f7fe fc99 	bl	8005334 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a02:	4b0b      	ldr	r3, [pc, #44]	@ (8006a30 <prvInitialiseTaskLists+0x78>)
 8006a04:	4a05      	ldr	r2, [pc, #20]	@ (8006a1c <prvInitialiseTaskLists+0x64>)
 8006a06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a08:	4b0a      	ldr	r3, [pc, #40]	@ (8006a34 <prvInitialiseTaskLists+0x7c>)
 8006a0a:	4a05      	ldr	r2, [pc, #20]	@ (8006a20 <prvInitialiseTaskLists+0x68>)
 8006a0c:	601a      	str	r2, [r3, #0]
}
 8006a0e:	bf00      	nop
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	20000a08 	.word	0x20000a08
 8006a1c:	20000e68 	.word	0x20000e68
 8006a20:	20000e7c 	.word	0x20000e7c
 8006a24:	20000e98 	.word	0x20000e98
 8006a28:	20000eac 	.word	0x20000eac
 8006a2c:	20000ec4 	.word	0x20000ec4
 8006a30:	20000e90 	.word	0x20000e90
 8006a34:	20000e94 	.word	0x20000e94

08006a38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a3e:	e019      	b.n	8006a74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a40:	f000 fdea 	bl	8007618 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a44:	4b10      	ldr	r3, [pc, #64]	@ (8006a88 <prvCheckTasksWaitingTermination+0x50>)
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	3304      	adds	r3, #4
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7fe fcf9 	bl	8005448 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a56:	4b0d      	ldr	r3, [pc, #52]	@ (8006a8c <prvCheckTasksWaitingTermination+0x54>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	4a0b      	ldr	r2, [pc, #44]	@ (8006a8c <prvCheckTasksWaitingTermination+0x54>)
 8006a5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a60:	4b0b      	ldr	r3, [pc, #44]	@ (8006a90 <prvCheckTasksWaitingTermination+0x58>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	3b01      	subs	r3, #1
 8006a66:	4a0a      	ldr	r2, [pc, #40]	@ (8006a90 <prvCheckTasksWaitingTermination+0x58>)
 8006a68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a6a:	f000 fe07 	bl	800767c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f810 	bl	8006a94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a74:	4b06      	ldr	r3, [pc, #24]	@ (8006a90 <prvCheckTasksWaitingTermination+0x58>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1e1      	bne.n	8006a40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a7c:	bf00      	nop
 8006a7e:	bf00      	nop
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20000eac 	.word	0x20000eac
 8006a8c:	20000ed8 	.word	0x20000ed8
 8006a90:	20000ec0 	.word	0x20000ec0

08006a94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	3354      	adds	r3, #84	@ 0x54
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f001 f9f9 	bl	8007e98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d108      	bne.n	8006ac2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 ff9f 	bl	80079f8 <vPortFree>
				vPortFree( pxTCB );
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 ff9c 	bl	80079f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ac0:	e019      	b.n	8006af6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d103      	bne.n	8006ad4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 ff93 	bl	80079f8 <vPortFree>
	}
 8006ad2:	e010      	b.n	8006af6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d00b      	beq.n	8006af6 <prvDeleteTCB+0x62>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	60fb      	str	r3, [r7, #12]
}
 8006af0:	bf00      	nop
 8006af2:	bf00      	nop
 8006af4:	e7fd      	b.n	8006af2 <prvDeleteTCB+0x5e>
	}
 8006af6:	bf00      	nop
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
	...

08006b00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b06:	4b0c      	ldr	r3, [pc, #48]	@ (8006b38 <prvResetNextTaskUnblockTime+0x38>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d104      	bne.n	8006b1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b10:	4b0a      	ldr	r3, [pc, #40]	@ (8006b3c <prvResetNextTaskUnblockTime+0x3c>)
 8006b12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b18:	e008      	b.n	8006b2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b1a:	4b07      	ldr	r3, [pc, #28]	@ (8006b38 <prvResetNextTaskUnblockTime+0x38>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	4a04      	ldr	r2, [pc, #16]	@ (8006b3c <prvResetNextTaskUnblockTime+0x3c>)
 8006b2a:	6013      	str	r3, [r2, #0]
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	20000e90 	.word	0x20000e90
 8006b3c:	20000ef8 	.word	0x20000ef8

08006b40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b46:	4b0b      	ldr	r3, [pc, #44]	@ (8006b74 <xTaskGetSchedulerState+0x34>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d102      	bne.n	8006b54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	607b      	str	r3, [r7, #4]
 8006b52:	e008      	b.n	8006b66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b54:	4b08      	ldr	r3, [pc, #32]	@ (8006b78 <xTaskGetSchedulerState+0x38>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d102      	bne.n	8006b62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	607b      	str	r3, [r7, #4]
 8006b60:	e001      	b.n	8006b66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b62:	2300      	movs	r3, #0
 8006b64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b66:	687b      	ldr	r3, [r7, #4]
	}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	20000ee4 	.word	0x20000ee4
 8006b78:	20000f00 	.word	0x20000f00

08006b7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d058      	beq.n	8006c44 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b92:	4b2f      	ldr	r3, [pc, #188]	@ (8006c50 <xTaskPriorityDisinherit+0xd4>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d00b      	beq.n	8006bb4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	60fb      	str	r3, [r7, #12]
}
 8006bae:	bf00      	nop
 8006bb0:	bf00      	nop
 8006bb2:	e7fd      	b.n	8006bb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10b      	bne.n	8006bd4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	60bb      	str	r3, [r7, #8]
}
 8006bce:	bf00      	nop
 8006bd0:	bf00      	nop
 8006bd2:	e7fd      	b.n	8006bd0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bd8:	1e5a      	subs	r2, r3, #1
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d02c      	beq.n	8006c44 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d128      	bne.n	8006c44 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fe fc26 	bl	8005448 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c08:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c14:	4b0f      	ldr	r3, [pc, #60]	@ (8006c54 <xTaskPriorityDisinherit+0xd8>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d903      	bls.n	8006c24 <xTaskPriorityDisinherit+0xa8>
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c20:	4a0c      	ldr	r2, [pc, #48]	@ (8006c54 <xTaskPriorityDisinherit+0xd8>)
 8006c22:	6013      	str	r3, [r2, #0]
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c28:	4613      	mov	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4a09      	ldr	r2, [pc, #36]	@ (8006c58 <xTaskPriorityDisinherit+0xdc>)
 8006c32:	441a      	add	r2, r3
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	3304      	adds	r3, #4
 8006c38:	4619      	mov	r1, r3
 8006c3a:	4610      	mov	r0, r2
 8006c3c:	f7fe fba7 	bl	800538e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c40:	2301      	movs	r3, #1
 8006c42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c44:	697b      	ldr	r3, [r7, #20]
	}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3718      	adds	r7, #24
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	20000a04 	.word	0x20000a04
 8006c54:	20000ee0 	.word	0x20000ee0
 8006c58:	20000a08 	.word	0x20000a08

08006c5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c66:	4b21      	ldr	r3, [pc, #132]	@ (8006cec <prvAddCurrentTaskToDelayedList+0x90>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c6c:	4b20      	ldr	r3, [pc, #128]	@ (8006cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3304      	adds	r3, #4
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fe fbe8 	bl	8005448 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c7e:	d10a      	bne.n	8006c96 <prvAddCurrentTaskToDelayedList+0x3a>
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d007      	beq.n	8006c96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c86:	4b1a      	ldr	r3, [pc, #104]	@ (8006cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3304      	adds	r3, #4
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	4819      	ldr	r0, [pc, #100]	@ (8006cf4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c90:	f7fe fb7d 	bl	800538e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c94:	e026      	b.n	8006ce4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c9e:	4b14      	ldr	r3, [pc, #80]	@ (8006cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d209      	bcs.n	8006cc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cae:	4b12      	ldr	r3, [pc, #72]	@ (8006cf8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8006cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4610      	mov	r0, r2
 8006cbc:	f7fe fb8b 	bl	80053d6 <vListInsert>
}
 8006cc0:	e010      	b.n	8006ce4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8006cfc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3304      	adds	r3, #4
 8006ccc:	4619      	mov	r1, r3
 8006cce:	4610      	mov	r0, r2
 8006cd0:	f7fe fb81 	bl	80053d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8006d00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d202      	bcs.n	8006ce4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006cde:	4a08      	ldr	r2, [pc, #32]	@ (8006d00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	6013      	str	r3, [r2, #0]
}
 8006ce4:	bf00      	nop
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	20000edc 	.word	0x20000edc
 8006cf0:	20000a04 	.word	0x20000a04
 8006cf4:	20000ec4 	.word	0x20000ec4
 8006cf8:	20000e94 	.word	0x20000e94
 8006cfc:	20000e90 	.word	0x20000e90
 8006d00:	20000ef8 	.word	0x20000ef8

08006d04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08a      	sub	sp, #40	@ 0x28
 8006d08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d0e:	f000 fb13 	bl	8007338 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d12:	4b1d      	ldr	r3, [pc, #116]	@ (8006d88 <xTimerCreateTimerTask+0x84>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d021      	beq.n	8006d5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d22:	1d3a      	adds	r2, r7, #4
 8006d24:	f107 0108 	add.w	r1, r7, #8
 8006d28:	f107 030c 	add.w	r3, r7, #12
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fe fae7 	bl	8005300 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d32:	6879      	ldr	r1, [r7, #4]
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	9202      	str	r2, [sp, #8]
 8006d3a:	9301      	str	r3, [sp, #4]
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	2300      	movs	r3, #0
 8006d42:	460a      	mov	r2, r1
 8006d44:	4911      	ldr	r1, [pc, #68]	@ (8006d8c <xTimerCreateTimerTask+0x88>)
 8006d46:	4812      	ldr	r0, [pc, #72]	@ (8006d90 <xTimerCreateTimerTask+0x8c>)
 8006d48:	f7ff f8a2 	bl	8005e90 <xTaskCreateStatic>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	4a11      	ldr	r2, [pc, #68]	@ (8006d94 <xTimerCreateTimerTask+0x90>)
 8006d50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d52:	4b10      	ldr	r3, [pc, #64]	@ (8006d94 <xTimerCreateTimerTask+0x90>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10b      	bne.n	8006d7c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	613b      	str	r3, [r7, #16]
}
 8006d76:	bf00      	nop
 8006d78:	bf00      	nop
 8006d7a:	e7fd      	b.n	8006d78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d7c:	697b      	ldr	r3, [r7, #20]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3718      	adds	r7, #24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	20000f34 	.word	0x20000f34
 8006d8c:	08008be4 	.word	0x08008be4
 8006d90:	08006ed1 	.word	0x08006ed1
 8006d94:	20000f38 	.word	0x20000f38

08006d98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b08a      	sub	sp, #40	@ 0x28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
 8006da4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006da6:	2300      	movs	r3, #0
 8006da8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d10b      	bne.n	8006dc8 <xTimerGenericCommand+0x30>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	623b      	str	r3, [r7, #32]
}
 8006dc2:	bf00      	nop
 8006dc4:	bf00      	nop
 8006dc6:	e7fd      	b.n	8006dc4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006dc8:	4b19      	ldr	r3, [pc, #100]	@ (8006e30 <xTimerGenericCommand+0x98>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d02a      	beq.n	8006e26 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	2b05      	cmp	r3, #5
 8006de0:	dc18      	bgt.n	8006e14 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006de2:	f7ff fead 	bl	8006b40 <xTaskGetSchedulerState>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d109      	bne.n	8006e00 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006dec:	4b10      	ldr	r3, [pc, #64]	@ (8006e30 <xTimerGenericCommand+0x98>)
 8006dee:	6818      	ldr	r0, [r3, #0]
 8006df0:	f107 0110 	add.w	r1, r7, #16
 8006df4:	2300      	movs	r3, #0
 8006df6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006df8:	f7fe fc5a 	bl	80056b0 <xQueueGenericSend>
 8006dfc:	6278      	str	r0, [r7, #36]	@ 0x24
 8006dfe:	e012      	b.n	8006e26 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e00:	4b0b      	ldr	r3, [pc, #44]	@ (8006e30 <xTimerGenericCommand+0x98>)
 8006e02:	6818      	ldr	r0, [r3, #0]
 8006e04:	f107 0110 	add.w	r1, r7, #16
 8006e08:	2300      	movs	r3, #0
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f7fe fc50 	bl	80056b0 <xQueueGenericSend>
 8006e10:	6278      	str	r0, [r7, #36]	@ 0x24
 8006e12:	e008      	b.n	8006e26 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e14:	4b06      	ldr	r3, [pc, #24]	@ (8006e30 <xTimerGenericCommand+0x98>)
 8006e16:	6818      	ldr	r0, [r3, #0]
 8006e18:	f107 0110 	add.w	r1, r7, #16
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	f7fe fd48 	bl	80058b4 <xQueueGenericSendFromISR>
 8006e24:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3728      	adds	r7, #40	@ 0x28
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	20000f34 	.word	0x20000f34

08006e34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b088      	sub	sp, #32
 8006e38:	af02      	add	r7, sp, #8
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e3e:	4b23      	ldr	r3, [pc, #140]	@ (8006ecc <prvProcessExpiredTimer+0x98>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	3304      	adds	r3, #4
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7fe fafb 	bl	8005448 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e58:	f003 0304 	and.w	r3, r3, #4
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d023      	beq.n	8006ea8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	699a      	ldr	r2, [r3, #24]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	18d1      	adds	r1, r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	6978      	ldr	r0, [r7, #20]
 8006e6e:	f000 f8d5 	bl	800701c <prvInsertTimerInActiveList>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d020      	beq.n	8006eba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e78:	2300      	movs	r3, #0
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	2100      	movs	r1, #0
 8006e82:	6978      	ldr	r0, [r7, #20]
 8006e84:	f7ff ff88 	bl	8006d98 <xTimerGenericCommand>
 8006e88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d114      	bne.n	8006eba <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	60fb      	str	r3, [r7, #12]
}
 8006ea2:	bf00      	nop
 8006ea4:	bf00      	nop
 8006ea6:	e7fd      	b.n	8006ea4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006eae:	f023 0301 	bic.w	r3, r3, #1
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	6978      	ldr	r0, [r7, #20]
 8006ec0:	4798      	blx	r3
}
 8006ec2:	bf00      	nop
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	20000f2c 	.word	0x20000f2c

08006ed0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ed8:	f107 0308 	add.w	r3, r7, #8
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 f859 	bl	8006f94 <prvGetNextExpireTime>
 8006ee2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 f805 	bl	8006ef8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006eee:	f000 f8d7 	bl	80070a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ef2:	bf00      	nop
 8006ef4:	e7f0      	b.n	8006ed8 <prvTimerTask+0x8>
	...

08006ef8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f02:	f7ff fa29 	bl	8006358 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f06:	f107 0308 	add.w	r3, r7, #8
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 f866 	bl	8006fdc <prvSampleTimeNow>
 8006f10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d130      	bne.n	8006f7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10a      	bne.n	8006f34 <prvProcessTimerOrBlockTask+0x3c>
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d806      	bhi.n	8006f34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f26:	f7ff fa25 	bl	8006374 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f2a:	68f9      	ldr	r1, [r7, #12]
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7ff ff81 	bl	8006e34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f32:	e024      	b.n	8006f7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d008      	beq.n	8006f4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f3a:	4b13      	ldr	r3, [pc, #76]	@ (8006f88 <prvProcessTimerOrBlockTask+0x90>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <prvProcessTimerOrBlockTask+0x50>
 8006f44:	2301      	movs	r3, #1
 8006f46:	e000      	b.n	8006f4a <prvProcessTimerOrBlockTask+0x52>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8006f8c <prvProcessTimerOrBlockTask+0x94>)
 8006f4e:	6818      	ldr	r0, [r3, #0]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	4619      	mov	r1, r3
 8006f5a:	f7fe ff65 	bl	8005e28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f5e:	f7ff fa09 	bl	8006374 <xTaskResumeAll>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10a      	bne.n	8006f7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f68:	4b09      	ldr	r3, [pc, #36]	@ (8006f90 <prvProcessTimerOrBlockTask+0x98>)
 8006f6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f6e:	601a      	str	r2, [r3, #0]
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	f3bf 8f6f 	isb	sy
}
 8006f78:	e001      	b.n	8006f7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f7a:	f7ff f9fb 	bl	8006374 <xTaskResumeAll>
}
 8006f7e:	bf00      	nop
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	20000f30 	.word	0x20000f30
 8006f8c:	20000f34 	.word	0x20000f34
 8006f90:	e000ed04 	.word	0xe000ed04

08006f94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8006fd8 <prvGetNextExpireTime+0x44>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <prvGetNextExpireTime+0x16>
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	e000      	b.n	8006fac <prvGetNextExpireTime+0x18>
 8006faa:	2200      	movs	r2, #0
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d105      	bne.n	8006fc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fb8:	4b07      	ldr	r3, [pc, #28]	@ (8006fd8 <prvGetNextExpireTime+0x44>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	60fb      	str	r3, [r7, #12]
 8006fc2:	e001      	b.n	8006fc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	20000f2c 	.word	0x20000f2c

08006fdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006fe4:	f7ff fa64 	bl	80064b0 <xTaskGetTickCount>
 8006fe8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006fea:	4b0b      	ldr	r3, [pc, #44]	@ (8007018 <prvSampleTimeNow+0x3c>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d205      	bcs.n	8007000 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ff4:	f000 f93a 	bl	800726c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	601a      	str	r2, [r3, #0]
 8006ffe:	e002      	b.n	8007006 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007006:	4a04      	ldr	r2, [pc, #16]	@ (8007018 <prvSampleTimeNow+0x3c>)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800700c:	68fb      	ldr	r3, [r7, #12]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	20000f3c 	.word	0x20000f3c

0800701c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
 8007028:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800702a:	2300      	movs	r3, #0
 800702c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	429a      	cmp	r2, r3
 8007040:	d812      	bhi.n	8007068 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	1ad2      	subs	r2, r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	429a      	cmp	r2, r3
 800704e:	d302      	bcc.n	8007056 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007050:	2301      	movs	r3, #1
 8007052:	617b      	str	r3, [r7, #20]
 8007054:	e01b      	b.n	800708e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007056:	4b10      	ldr	r3, [pc, #64]	@ (8007098 <prvInsertTimerInActiveList+0x7c>)
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3304      	adds	r3, #4
 800705e:	4619      	mov	r1, r3
 8007060:	4610      	mov	r0, r2
 8007062:	f7fe f9b8 	bl	80053d6 <vListInsert>
 8007066:	e012      	b.n	800708e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	429a      	cmp	r2, r3
 800706e:	d206      	bcs.n	800707e <prvInsertTimerInActiveList+0x62>
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	429a      	cmp	r2, r3
 8007076:	d302      	bcc.n	800707e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007078:	2301      	movs	r3, #1
 800707a:	617b      	str	r3, [r7, #20]
 800707c:	e007      	b.n	800708e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800707e:	4b07      	ldr	r3, [pc, #28]	@ (800709c <prvInsertTimerInActiveList+0x80>)
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3304      	adds	r3, #4
 8007086:	4619      	mov	r1, r3
 8007088:	4610      	mov	r0, r2
 800708a:	f7fe f9a4 	bl	80053d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800708e:	697b      	ldr	r3, [r7, #20]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3718      	adds	r7, #24
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	20000f30 	.word	0x20000f30
 800709c:	20000f2c 	.word	0x20000f2c

080070a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b08e      	sub	sp, #56	@ 0x38
 80070a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070a6:	e0ce      	b.n	8007246 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	da19      	bge.n	80070e2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80070ae:	1d3b      	adds	r3, r7, #4
 80070b0:	3304      	adds	r3, #4
 80070b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80070b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10b      	bne.n	80070d2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80070ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070be:	f383 8811 	msr	BASEPRI, r3
 80070c2:	f3bf 8f6f 	isb	sy
 80070c6:	f3bf 8f4f 	dsb	sy
 80070ca:	61fb      	str	r3, [r7, #28]
}
 80070cc:	bf00      	nop
 80070ce:	bf00      	nop
 80070d0:	e7fd      	b.n	80070ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80070d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070d8:	6850      	ldr	r0, [r2, #4]
 80070da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070dc:	6892      	ldr	r2, [r2, #8]
 80070de:	4611      	mov	r1, r2
 80070e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f2c0 80ae 	blt.w	8007246 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80070ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d004      	beq.n	8007100 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f8:	3304      	adds	r3, #4
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fe f9a4 	bl	8005448 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007100:	463b      	mov	r3, r7
 8007102:	4618      	mov	r0, r3
 8007104:	f7ff ff6a 	bl	8006fdc <prvSampleTimeNow>
 8007108:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b09      	cmp	r3, #9
 800710e:	f200 8097 	bhi.w	8007240 <prvProcessReceivedCommands+0x1a0>
 8007112:	a201      	add	r2, pc, #4	@ (adr r2, 8007118 <prvProcessReceivedCommands+0x78>)
 8007114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007118:	08007141 	.word	0x08007141
 800711c:	08007141 	.word	0x08007141
 8007120:	08007141 	.word	0x08007141
 8007124:	080071b7 	.word	0x080071b7
 8007128:	080071cb 	.word	0x080071cb
 800712c:	08007217 	.word	0x08007217
 8007130:	08007141 	.word	0x08007141
 8007134:	08007141 	.word	0x08007141
 8007138:	080071b7 	.word	0x080071b7
 800713c:	080071cb 	.word	0x080071cb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007142:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007146:	f043 0301 	orr.w	r3, r3, #1
 800714a:	b2da      	uxtb	r2, r3
 800714c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800714e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	18d1      	adds	r1, r2, r3
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800715e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007160:	f7ff ff5c 	bl	800701c <prvInsertTimerInActiveList>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d06c      	beq.n	8007244 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800716a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007170:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007174:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007178:	f003 0304 	and.w	r3, r3, #4
 800717c:	2b00      	cmp	r3, #0
 800717e:	d061      	beq.n	8007244 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	441a      	add	r2, r3
 8007188:	2300      	movs	r3, #0
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	2300      	movs	r3, #0
 800718e:	2100      	movs	r1, #0
 8007190:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007192:	f7ff fe01 	bl	8006d98 <xTimerGenericCommand>
 8007196:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d152      	bne.n	8007244 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	61bb      	str	r3, [r7, #24]
}
 80071b0:	bf00      	nop
 80071b2:	bf00      	nop
 80071b4:	e7fd      	b.n	80071b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071bc:	f023 0301 	bic.w	r3, r3, #1
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80071c8:	e03d      	b.n	8007246 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071d0:	f043 0301 	orr.w	r3, r3, #1
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80071e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10b      	bne.n	8007202 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80071ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	617b      	str	r3, [r7, #20]
}
 80071fc:	bf00      	nop
 80071fe:	bf00      	nop
 8007200:	e7fd      	b.n	80071fe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007204:	699a      	ldr	r2, [r3, #24]
 8007206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007208:	18d1      	adds	r1, r2, r3
 800720a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800720e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007210:	f7ff ff04 	bl	800701c <prvInsertTimerInActiveList>
					break;
 8007214:	e017      	b.n	8007246 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007218:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800721c:	f003 0302 	and.w	r3, r3, #2
 8007220:	2b00      	cmp	r3, #0
 8007222:	d103      	bne.n	800722c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007224:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007226:	f000 fbe7 	bl	80079f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800722a:	e00c      	b.n	8007246 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800722c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800722e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007232:	f023 0301 	bic.w	r3, r3, #1
 8007236:	b2da      	uxtb	r2, r3
 8007238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800723a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800723e:	e002      	b.n	8007246 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007240:	bf00      	nop
 8007242:	e000      	b.n	8007246 <prvProcessReceivedCommands+0x1a6>
					break;
 8007244:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007246:	4b08      	ldr	r3, [pc, #32]	@ (8007268 <prvProcessReceivedCommands+0x1c8>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	1d39      	adds	r1, r7, #4
 800724c:	2200      	movs	r2, #0
 800724e:	4618      	mov	r0, r3
 8007250:	f7fe fbce 	bl	80059f0 <xQueueReceive>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	f47f af26 	bne.w	80070a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800725c:	bf00      	nop
 800725e:	bf00      	nop
 8007260:	3730      	adds	r7, #48	@ 0x30
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	20000f34 	.word	0x20000f34

0800726c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b088      	sub	sp, #32
 8007270:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007272:	e049      	b.n	8007308 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007274:	4b2e      	ldr	r3, [pc, #184]	@ (8007330 <prvSwitchTimerLists+0xc4>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800727e:	4b2c      	ldr	r3, [pc, #176]	@ (8007330 <prvSwitchTimerLists+0xc4>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	3304      	adds	r3, #4
 800728c:	4618      	mov	r0, r3
 800728e:	f7fe f8db 	bl	8005448 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072a0:	f003 0304 	and.w	r3, r3, #4
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d02f      	beq.n	8007308 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	4413      	add	r3, r2
 80072b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d90e      	bls.n	80072d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072c6:	4b1a      	ldr	r3, [pc, #104]	@ (8007330 <prvSwitchTimerLists+0xc4>)
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	3304      	adds	r3, #4
 80072ce:	4619      	mov	r1, r3
 80072d0:	4610      	mov	r0, r2
 80072d2:	f7fe f880 	bl	80053d6 <vListInsert>
 80072d6:	e017      	b.n	8007308 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072d8:	2300      	movs	r3, #0
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	2300      	movs	r3, #0
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	2100      	movs	r1, #0
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f7ff fd58 	bl	8006d98 <xTimerGenericCommand>
 80072e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10b      	bne.n	8007308 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80072f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	603b      	str	r3, [r7, #0]
}
 8007302:	bf00      	nop
 8007304:	bf00      	nop
 8007306:	e7fd      	b.n	8007304 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007308:	4b09      	ldr	r3, [pc, #36]	@ (8007330 <prvSwitchTimerLists+0xc4>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1b0      	bne.n	8007274 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007312:	4b07      	ldr	r3, [pc, #28]	@ (8007330 <prvSwitchTimerLists+0xc4>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007318:	4b06      	ldr	r3, [pc, #24]	@ (8007334 <prvSwitchTimerLists+0xc8>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a04      	ldr	r2, [pc, #16]	@ (8007330 <prvSwitchTimerLists+0xc4>)
 800731e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007320:	4a04      	ldr	r2, [pc, #16]	@ (8007334 <prvSwitchTimerLists+0xc8>)
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	6013      	str	r3, [r2, #0]
}
 8007326:	bf00      	nop
 8007328:	3718      	adds	r7, #24
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	20000f2c 	.word	0x20000f2c
 8007334:	20000f30 	.word	0x20000f30

08007338 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800733e:	f000 f96b 	bl	8007618 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007342:	4b15      	ldr	r3, [pc, #84]	@ (8007398 <prvCheckForValidListAndQueue+0x60>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d120      	bne.n	800738c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800734a:	4814      	ldr	r0, [pc, #80]	@ (800739c <prvCheckForValidListAndQueue+0x64>)
 800734c:	f7fd fff2 	bl	8005334 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007350:	4813      	ldr	r0, [pc, #76]	@ (80073a0 <prvCheckForValidListAndQueue+0x68>)
 8007352:	f7fd ffef 	bl	8005334 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007356:	4b13      	ldr	r3, [pc, #76]	@ (80073a4 <prvCheckForValidListAndQueue+0x6c>)
 8007358:	4a10      	ldr	r2, [pc, #64]	@ (800739c <prvCheckForValidListAndQueue+0x64>)
 800735a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800735c:	4b12      	ldr	r3, [pc, #72]	@ (80073a8 <prvCheckForValidListAndQueue+0x70>)
 800735e:	4a10      	ldr	r2, [pc, #64]	@ (80073a0 <prvCheckForValidListAndQueue+0x68>)
 8007360:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007362:	2300      	movs	r3, #0
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	4b11      	ldr	r3, [pc, #68]	@ (80073ac <prvCheckForValidListAndQueue+0x74>)
 8007368:	4a11      	ldr	r2, [pc, #68]	@ (80073b0 <prvCheckForValidListAndQueue+0x78>)
 800736a:	2110      	movs	r1, #16
 800736c:	200a      	movs	r0, #10
 800736e:	f7fe f8ff 	bl	8005570 <xQueueGenericCreateStatic>
 8007372:	4603      	mov	r3, r0
 8007374:	4a08      	ldr	r2, [pc, #32]	@ (8007398 <prvCheckForValidListAndQueue+0x60>)
 8007376:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007378:	4b07      	ldr	r3, [pc, #28]	@ (8007398 <prvCheckForValidListAndQueue+0x60>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d005      	beq.n	800738c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007380:	4b05      	ldr	r3, [pc, #20]	@ (8007398 <prvCheckForValidListAndQueue+0x60>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	490b      	ldr	r1, [pc, #44]	@ (80073b4 <prvCheckForValidListAndQueue+0x7c>)
 8007386:	4618      	mov	r0, r3
 8007388:	f7fe fd24 	bl	8005dd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800738c:	f000 f976 	bl	800767c <vPortExitCritical>
}
 8007390:	bf00      	nop
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	20000f34 	.word	0x20000f34
 800739c:	20000f04 	.word	0x20000f04
 80073a0:	20000f18 	.word	0x20000f18
 80073a4:	20000f2c 	.word	0x20000f2c
 80073a8:	20000f30 	.word	0x20000f30
 80073ac:	20000fe0 	.word	0x20000fe0
 80073b0:	20000f40 	.word	0x20000f40
 80073b4:	08008bec 	.word	0x08008bec

080073b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	3b04      	subs	r3, #4
 80073c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80073d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	3b04      	subs	r3, #4
 80073d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f023 0201 	bic.w	r2, r3, #1
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	3b04      	subs	r3, #4
 80073e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80073e8:	4a0c      	ldr	r2, [pc, #48]	@ (800741c <pxPortInitialiseStack+0x64>)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	3b14      	subs	r3, #20
 80073f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	3b04      	subs	r3, #4
 80073fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f06f 0202 	mvn.w	r2, #2
 8007406:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	3b20      	subs	r3, #32
 800740c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800740e:	68fb      	ldr	r3, [r7, #12]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	08007421 	.word	0x08007421

08007420 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007426:	2300      	movs	r3, #0
 8007428:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800742a:	4b13      	ldr	r3, [pc, #76]	@ (8007478 <prvTaskExitError+0x58>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007432:	d00b      	beq.n	800744c <prvTaskExitError+0x2c>
	__asm volatile
 8007434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007438:	f383 8811 	msr	BASEPRI, r3
 800743c:	f3bf 8f6f 	isb	sy
 8007440:	f3bf 8f4f 	dsb	sy
 8007444:	60fb      	str	r3, [r7, #12]
}
 8007446:	bf00      	nop
 8007448:	bf00      	nop
 800744a:	e7fd      	b.n	8007448 <prvTaskExitError+0x28>
	__asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	60bb      	str	r3, [r7, #8]
}
 800745e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007460:	bf00      	nop
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d0fc      	beq.n	8007462 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007468:	bf00      	nop
 800746a:	bf00      	nop
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	2000000c 	.word	0x2000000c
 800747c:	00000000 	.word	0x00000000

08007480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007480:	4b07      	ldr	r3, [pc, #28]	@ (80074a0 <pxCurrentTCBConst2>)
 8007482:	6819      	ldr	r1, [r3, #0]
 8007484:	6808      	ldr	r0, [r1, #0]
 8007486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800748a:	f380 8809 	msr	PSP, r0
 800748e:	f3bf 8f6f 	isb	sy
 8007492:	f04f 0000 	mov.w	r0, #0
 8007496:	f380 8811 	msr	BASEPRI, r0
 800749a:	4770      	bx	lr
 800749c:	f3af 8000 	nop.w

080074a0 <pxCurrentTCBConst2>:
 80074a0:	20000a04 	.word	0x20000a04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074a4:	bf00      	nop
 80074a6:	bf00      	nop

080074a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074a8:	4808      	ldr	r0, [pc, #32]	@ (80074cc <prvPortStartFirstTask+0x24>)
 80074aa:	6800      	ldr	r0, [r0, #0]
 80074ac:	6800      	ldr	r0, [r0, #0]
 80074ae:	f380 8808 	msr	MSP, r0
 80074b2:	f04f 0000 	mov.w	r0, #0
 80074b6:	f380 8814 	msr	CONTROL, r0
 80074ba:	b662      	cpsie	i
 80074bc:	b661      	cpsie	f
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	df00      	svc	0
 80074c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074ca:	bf00      	nop
 80074cc:	e000ed08 	.word	0xe000ed08

080074d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80074d6:	4b47      	ldr	r3, [pc, #284]	@ (80075f4 <xPortStartScheduler+0x124>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a47      	ldr	r2, [pc, #284]	@ (80075f8 <xPortStartScheduler+0x128>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d10b      	bne.n	80074f8 <xPortStartScheduler+0x28>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	60fb      	str	r3, [r7, #12]
}
 80074f2:	bf00      	nop
 80074f4:	bf00      	nop
 80074f6:	e7fd      	b.n	80074f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80074f8:	4b3e      	ldr	r3, [pc, #248]	@ (80075f4 <xPortStartScheduler+0x124>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a3f      	ldr	r2, [pc, #252]	@ (80075fc <xPortStartScheduler+0x12c>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d10b      	bne.n	800751a <xPortStartScheduler+0x4a>
	__asm volatile
 8007502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007506:	f383 8811 	msr	BASEPRI, r3
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	613b      	str	r3, [r7, #16]
}
 8007514:	bf00      	nop
 8007516:	bf00      	nop
 8007518:	e7fd      	b.n	8007516 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800751a:	4b39      	ldr	r3, [pc, #228]	@ (8007600 <xPortStartScheduler+0x130>)
 800751c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	b2db      	uxtb	r3, r3
 8007524:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	22ff      	movs	r2, #255	@ 0xff
 800752a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	b2db      	uxtb	r3, r3
 8007532:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007534:	78fb      	ldrb	r3, [r7, #3]
 8007536:	b2db      	uxtb	r3, r3
 8007538:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800753c:	b2da      	uxtb	r2, r3
 800753e:	4b31      	ldr	r3, [pc, #196]	@ (8007604 <xPortStartScheduler+0x134>)
 8007540:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007542:	4b31      	ldr	r3, [pc, #196]	@ (8007608 <xPortStartScheduler+0x138>)
 8007544:	2207      	movs	r2, #7
 8007546:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007548:	e009      	b.n	800755e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800754a:	4b2f      	ldr	r3, [pc, #188]	@ (8007608 <xPortStartScheduler+0x138>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3b01      	subs	r3, #1
 8007550:	4a2d      	ldr	r2, [pc, #180]	@ (8007608 <xPortStartScheduler+0x138>)
 8007552:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007554:	78fb      	ldrb	r3, [r7, #3]
 8007556:	b2db      	uxtb	r3, r3
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	b2db      	uxtb	r3, r3
 800755c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800755e:	78fb      	ldrb	r3, [r7, #3]
 8007560:	b2db      	uxtb	r3, r3
 8007562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007566:	2b80      	cmp	r3, #128	@ 0x80
 8007568:	d0ef      	beq.n	800754a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800756a:	4b27      	ldr	r3, [pc, #156]	@ (8007608 <xPortStartScheduler+0x138>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f1c3 0307 	rsb	r3, r3, #7
 8007572:	2b04      	cmp	r3, #4
 8007574:	d00b      	beq.n	800758e <xPortStartScheduler+0xbe>
	__asm volatile
 8007576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757a:	f383 8811 	msr	BASEPRI, r3
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	60bb      	str	r3, [r7, #8]
}
 8007588:	bf00      	nop
 800758a:	bf00      	nop
 800758c:	e7fd      	b.n	800758a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800758e:	4b1e      	ldr	r3, [pc, #120]	@ (8007608 <xPortStartScheduler+0x138>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	021b      	lsls	r3, r3, #8
 8007594:	4a1c      	ldr	r2, [pc, #112]	@ (8007608 <xPortStartScheduler+0x138>)
 8007596:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007598:	4b1b      	ldr	r3, [pc, #108]	@ (8007608 <xPortStartScheduler+0x138>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80075a0:	4a19      	ldr	r2, [pc, #100]	@ (8007608 <xPortStartScheduler+0x138>)
 80075a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	b2da      	uxtb	r2, r3
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075ac:	4b17      	ldr	r3, [pc, #92]	@ (800760c <xPortStartScheduler+0x13c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a16      	ldr	r2, [pc, #88]	@ (800760c <xPortStartScheduler+0x13c>)
 80075b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80075b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075b8:	4b14      	ldr	r3, [pc, #80]	@ (800760c <xPortStartScheduler+0x13c>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a13      	ldr	r2, [pc, #76]	@ (800760c <xPortStartScheduler+0x13c>)
 80075be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80075c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075c4:	f000 f8da 	bl	800777c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075c8:	4b11      	ldr	r3, [pc, #68]	@ (8007610 <xPortStartScheduler+0x140>)
 80075ca:	2200      	movs	r2, #0
 80075cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80075ce:	f000 f8f9 	bl	80077c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80075d2:	4b10      	ldr	r3, [pc, #64]	@ (8007614 <xPortStartScheduler+0x144>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a0f      	ldr	r2, [pc, #60]	@ (8007614 <xPortStartScheduler+0x144>)
 80075d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80075dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80075de:	f7ff ff63 	bl	80074a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80075e2:	f7ff f82f 	bl	8006644 <vTaskSwitchContext>
	prvTaskExitError();
 80075e6:	f7ff ff1b 	bl	8007420 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3718      	adds	r7, #24
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	e000ed00 	.word	0xe000ed00
 80075f8:	410fc271 	.word	0x410fc271
 80075fc:	410fc270 	.word	0x410fc270
 8007600:	e000e400 	.word	0xe000e400
 8007604:	20001030 	.word	0x20001030
 8007608:	20001034 	.word	0x20001034
 800760c:	e000ed20 	.word	0xe000ed20
 8007610:	2000000c 	.word	0x2000000c
 8007614:	e000ef34 	.word	0xe000ef34

08007618 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	607b      	str	r3, [r7, #4]
}
 8007630:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007632:	4b10      	ldr	r3, [pc, #64]	@ (8007674 <vPortEnterCritical+0x5c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	3301      	adds	r3, #1
 8007638:	4a0e      	ldr	r2, [pc, #56]	@ (8007674 <vPortEnterCritical+0x5c>)
 800763a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800763c:	4b0d      	ldr	r3, [pc, #52]	@ (8007674 <vPortEnterCritical+0x5c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b01      	cmp	r3, #1
 8007642:	d110      	bne.n	8007666 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007644:	4b0c      	ldr	r3, [pc, #48]	@ (8007678 <vPortEnterCritical+0x60>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00b      	beq.n	8007666 <vPortEnterCritical+0x4e>
	__asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	603b      	str	r3, [r7, #0]
}
 8007660:	bf00      	nop
 8007662:	bf00      	nop
 8007664:	e7fd      	b.n	8007662 <vPortEnterCritical+0x4a>
	}
}
 8007666:	bf00      	nop
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	2000000c 	.word	0x2000000c
 8007678:	e000ed04 	.word	0xe000ed04

0800767c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007682:	4b12      	ldr	r3, [pc, #72]	@ (80076cc <vPortExitCritical+0x50>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10b      	bne.n	80076a2 <vPortExitCritical+0x26>
	__asm volatile
 800768a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	607b      	str	r3, [r7, #4]
}
 800769c:	bf00      	nop
 800769e:	bf00      	nop
 80076a0:	e7fd      	b.n	800769e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80076a2:	4b0a      	ldr	r3, [pc, #40]	@ (80076cc <vPortExitCritical+0x50>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3b01      	subs	r3, #1
 80076a8:	4a08      	ldr	r2, [pc, #32]	@ (80076cc <vPortExitCritical+0x50>)
 80076aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076ac:	4b07      	ldr	r3, [pc, #28]	@ (80076cc <vPortExitCritical+0x50>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d105      	bne.n	80076c0 <vPortExitCritical+0x44>
 80076b4:	2300      	movs	r3, #0
 80076b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	f383 8811 	msr	BASEPRI, r3
}
 80076be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	2000000c 	.word	0x2000000c

080076d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80076d0:	f3ef 8009 	mrs	r0, PSP
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	4b15      	ldr	r3, [pc, #84]	@ (8007730 <pxCurrentTCBConst>)
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	f01e 0f10 	tst.w	lr, #16
 80076e0:	bf08      	it	eq
 80076e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80076e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ea:	6010      	str	r0, [r2, #0]
 80076ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80076f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80076f4:	f380 8811 	msr	BASEPRI, r0
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f7fe ffa0 	bl	8006644 <vTaskSwitchContext>
 8007704:	f04f 0000 	mov.w	r0, #0
 8007708:	f380 8811 	msr	BASEPRI, r0
 800770c:	bc09      	pop	{r0, r3}
 800770e:	6819      	ldr	r1, [r3, #0]
 8007710:	6808      	ldr	r0, [r1, #0]
 8007712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007716:	f01e 0f10 	tst.w	lr, #16
 800771a:	bf08      	it	eq
 800771c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007720:	f380 8809 	msr	PSP, r0
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	f3af 8000 	nop.w

08007730 <pxCurrentTCBConst>:
 8007730:	20000a04 	.word	0x20000a04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007734:	bf00      	nop
 8007736:	bf00      	nop

08007738 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	607b      	str	r3, [r7, #4]
}
 8007750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007752:	f7fe febd 	bl	80064d0 <xTaskIncrementTick>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800775c:	4b06      	ldr	r3, [pc, #24]	@ (8007778 <xPortSysTickHandler+0x40>)
 800775e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	2300      	movs	r3, #0
 8007766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	f383 8811 	msr	BASEPRI, r3
}
 800776e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007770:	bf00      	nop
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	e000ed04 	.word	0xe000ed04

0800777c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800777c:	b480      	push	{r7}
 800777e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007780:	4b0b      	ldr	r3, [pc, #44]	@ (80077b0 <vPortSetupTimerInterrupt+0x34>)
 8007782:	2200      	movs	r2, #0
 8007784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007786:	4b0b      	ldr	r3, [pc, #44]	@ (80077b4 <vPortSetupTimerInterrupt+0x38>)
 8007788:	2200      	movs	r2, #0
 800778a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800778c:	4b0a      	ldr	r3, [pc, #40]	@ (80077b8 <vPortSetupTimerInterrupt+0x3c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a0a      	ldr	r2, [pc, #40]	@ (80077bc <vPortSetupTimerInterrupt+0x40>)
 8007792:	fba2 2303 	umull	r2, r3, r2, r3
 8007796:	099b      	lsrs	r3, r3, #6
 8007798:	4a09      	ldr	r2, [pc, #36]	@ (80077c0 <vPortSetupTimerInterrupt+0x44>)
 800779a:	3b01      	subs	r3, #1
 800779c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800779e:	4b04      	ldr	r3, [pc, #16]	@ (80077b0 <vPortSetupTimerInterrupt+0x34>)
 80077a0:	2207      	movs	r2, #7
 80077a2:	601a      	str	r2, [r3, #0]
}
 80077a4:	bf00      	nop
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	e000e010 	.word	0xe000e010
 80077b4:	e000e018 	.word	0xe000e018
 80077b8:	20000000 	.word	0x20000000
 80077bc:	10624dd3 	.word	0x10624dd3
 80077c0:	e000e014 	.word	0xe000e014

080077c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80077d4 <vPortEnableVFP+0x10>
 80077c8:	6801      	ldr	r1, [r0, #0]
 80077ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80077ce:	6001      	str	r1, [r0, #0]
 80077d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80077d2:	bf00      	nop
 80077d4:	e000ed88 	.word	0xe000ed88

080077d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80077de:	f3ef 8305 	mrs	r3, IPSR
 80077e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2b0f      	cmp	r3, #15
 80077e8:	d915      	bls.n	8007816 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80077ea:	4a18      	ldr	r2, [pc, #96]	@ (800784c <vPortValidateInterruptPriority+0x74>)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4413      	add	r3, r2
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80077f4:	4b16      	ldr	r3, [pc, #88]	@ (8007850 <vPortValidateInterruptPriority+0x78>)
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	7afa      	ldrb	r2, [r7, #11]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d20b      	bcs.n	8007816 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80077fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	607b      	str	r3, [r7, #4]
}
 8007810:	bf00      	nop
 8007812:	bf00      	nop
 8007814:	e7fd      	b.n	8007812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007816:	4b0f      	ldr	r3, [pc, #60]	@ (8007854 <vPortValidateInterruptPriority+0x7c>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800781e:	4b0e      	ldr	r3, [pc, #56]	@ (8007858 <vPortValidateInterruptPriority+0x80>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	429a      	cmp	r2, r3
 8007824:	d90b      	bls.n	800783e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	603b      	str	r3, [r7, #0]
}
 8007838:	bf00      	nop
 800783a:	bf00      	nop
 800783c:	e7fd      	b.n	800783a <vPortValidateInterruptPriority+0x62>
	}
 800783e:	bf00      	nop
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	e000e3f0 	.word	0xe000e3f0
 8007850:	20001030 	.word	0x20001030
 8007854:	e000ed0c 	.word	0xe000ed0c
 8007858:	20001034 	.word	0x20001034

0800785c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b08a      	sub	sp, #40	@ 0x28
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007864:	2300      	movs	r3, #0
 8007866:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007868:	f7fe fd76 	bl	8006358 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800786c:	4b5c      	ldr	r3, [pc, #368]	@ (80079e0 <pvPortMalloc+0x184>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d101      	bne.n	8007878 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007874:	f000 f924 	bl	8007ac0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007878:	4b5a      	ldr	r3, [pc, #360]	@ (80079e4 <pvPortMalloc+0x188>)
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4013      	ands	r3, r2
 8007880:	2b00      	cmp	r3, #0
 8007882:	f040 8095 	bne.w	80079b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d01e      	beq.n	80078ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800788c:	2208      	movs	r2, #8
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4413      	add	r3, r2
 8007892:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f003 0307 	and.w	r3, r3, #7
 800789a:	2b00      	cmp	r3, #0
 800789c:	d015      	beq.n	80078ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f023 0307 	bic.w	r3, r3, #7
 80078a4:	3308      	adds	r3, #8
 80078a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f003 0307 	and.w	r3, r3, #7
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00b      	beq.n	80078ca <pvPortMalloc+0x6e>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	617b      	str	r3, [r7, #20]
}
 80078c4:	bf00      	nop
 80078c6:	bf00      	nop
 80078c8:	e7fd      	b.n	80078c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d06f      	beq.n	80079b0 <pvPortMalloc+0x154>
 80078d0:	4b45      	ldr	r3, [pc, #276]	@ (80079e8 <pvPortMalloc+0x18c>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d86a      	bhi.n	80079b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078da:	4b44      	ldr	r3, [pc, #272]	@ (80079ec <pvPortMalloc+0x190>)
 80078dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078de:	4b43      	ldr	r3, [pc, #268]	@ (80079ec <pvPortMalloc+0x190>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078e4:	e004      	b.n	80078f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80078e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80078ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d903      	bls.n	8007902 <pvPortMalloc+0xa6>
 80078fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1f1      	bne.n	80078e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007902:	4b37      	ldr	r3, [pc, #220]	@ (80079e0 <pvPortMalloc+0x184>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007908:	429a      	cmp	r2, r3
 800790a:	d051      	beq.n	80079b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800790c:	6a3b      	ldr	r3, [r7, #32]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2208      	movs	r2, #8
 8007912:	4413      	add	r3, r2
 8007914:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	6a3b      	ldr	r3, [r7, #32]
 800791c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800791e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007920:	685a      	ldr	r2, [r3, #4]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	1ad2      	subs	r2, r2, r3
 8007926:	2308      	movs	r3, #8
 8007928:	005b      	lsls	r3, r3, #1
 800792a:	429a      	cmp	r2, r3
 800792c:	d920      	bls.n	8007970 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800792e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4413      	add	r3, r2
 8007934:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	f003 0307 	and.w	r3, r3, #7
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00b      	beq.n	8007958 <pvPortMalloc+0xfc>
	__asm volatile
 8007940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	613b      	str	r3, [r7, #16]
}
 8007952:	bf00      	nop
 8007954:	bf00      	nop
 8007956:	e7fd      	b.n	8007954 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	1ad2      	subs	r2, r2, r3
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800796a:	69b8      	ldr	r0, [r7, #24]
 800796c:	f000 f90a 	bl	8007b84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007970:	4b1d      	ldr	r3, [pc, #116]	@ (80079e8 <pvPortMalloc+0x18c>)
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	4a1b      	ldr	r2, [pc, #108]	@ (80079e8 <pvPortMalloc+0x18c>)
 800797c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800797e:	4b1a      	ldr	r3, [pc, #104]	@ (80079e8 <pvPortMalloc+0x18c>)
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	4b1b      	ldr	r3, [pc, #108]	@ (80079f0 <pvPortMalloc+0x194>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	429a      	cmp	r2, r3
 8007988:	d203      	bcs.n	8007992 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800798a:	4b17      	ldr	r3, [pc, #92]	@ (80079e8 <pvPortMalloc+0x18c>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a18      	ldr	r2, [pc, #96]	@ (80079f0 <pvPortMalloc+0x194>)
 8007990:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007994:	685a      	ldr	r2, [r3, #4]
 8007996:	4b13      	ldr	r3, [pc, #76]	@ (80079e4 <pvPortMalloc+0x188>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	431a      	orrs	r2, r3
 800799c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a2:	2200      	movs	r2, #0
 80079a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079a6:	4b13      	ldr	r3, [pc, #76]	@ (80079f4 <pvPortMalloc+0x198>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3301      	adds	r3, #1
 80079ac:	4a11      	ldr	r2, [pc, #68]	@ (80079f4 <pvPortMalloc+0x198>)
 80079ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079b0:	f7fe fce0 	bl	8006374 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	f003 0307 	and.w	r3, r3, #7
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00b      	beq.n	80079d6 <pvPortMalloc+0x17a>
	__asm volatile
 80079be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	60fb      	str	r3, [r7, #12]
}
 80079d0:	bf00      	nop
 80079d2:	bf00      	nop
 80079d4:	e7fd      	b.n	80079d2 <pvPortMalloc+0x176>
	return pvReturn;
 80079d6:	69fb      	ldr	r3, [r7, #28]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3728      	adds	r7, #40	@ 0x28
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	20004c40 	.word	0x20004c40
 80079e4:	20004c54 	.word	0x20004c54
 80079e8:	20004c44 	.word	0x20004c44
 80079ec:	20004c38 	.word	0x20004c38
 80079f0:	20004c48 	.word	0x20004c48
 80079f4:	20004c4c 	.word	0x20004c4c

080079f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d04f      	beq.n	8007aaa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a0a:	2308      	movs	r3, #8
 8007a0c:	425b      	negs	r3, r3
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	4413      	add	r3, r2
 8007a12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	4b25      	ldr	r3, [pc, #148]	@ (8007ab4 <vPortFree+0xbc>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4013      	ands	r3, r2
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10b      	bne.n	8007a3e <vPortFree+0x46>
	__asm volatile
 8007a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2a:	f383 8811 	msr	BASEPRI, r3
 8007a2e:	f3bf 8f6f 	isb	sy
 8007a32:	f3bf 8f4f 	dsb	sy
 8007a36:	60fb      	str	r3, [r7, #12]
}
 8007a38:	bf00      	nop
 8007a3a:	bf00      	nop
 8007a3c:	e7fd      	b.n	8007a3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00b      	beq.n	8007a5e <vPortFree+0x66>
	__asm volatile
 8007a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	60bb      	str	r3, [r7, #8]
}
 8007a58:	bf00      	nop
 8007a5a:	bf00      	nop
 8007a5c:	e7fd      	b.n	8007a5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	4b14      	ldr	r3, [pc, #80]	@ (8007ab4 <vPortFree+0xbc>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4013      	ands	r3, r2
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d01e      	beq.n	8007aaa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d11a      	bne.n	8007aaa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	4b0e      	ldr	r3, [pc, #56]	@ (8007ab4 <vPortFree+0xbc>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	43db      	mvns	r3, r3
 8007a7e:	401a      	ands	r2, r3
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a84:	f7fe fc68 	bl	8006358 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ab8 <vPortFree+0xc0>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4413      	add	r3, r2
 8007a92:	4a09      	ldr	r2, [pc, #36]	@ (8007ab8 <vPortFree+0xc0>)
 8007a94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a96:	6938      	ldr	r0, [r7, #16]
 8007a98:	f000 f874 	bl	8007b84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a9c:	4b07      	ldr	r3, [pc, #28]	@ (8007abc <vPortFree+0xc4>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	4a06      	ldr	r2, [pc, #24]	@ (8007abc <vPortFree+0xc4>)
 8007aa4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007aa6:	f7fe fc65 	bl	8006374 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007aaa:	bf00      	nop
 8007aac:	3718      	adds	r7, #24
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20004c54 	.word	0x20004c54
 8007ab8:	20004c44 	.word	0x20004c44
 8007abc:	20004c50 	.word	0x20004c50

08007ac0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ac6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007aca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007acc:	4b27      	ldr	r3, [pc, #156]	@ (8007b6c <prvHeapInit+0xac>)
 8007ace:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f003 0307 	and.w	r3, r3, #7
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00c      	beq.n	8007af4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3307      	adds	r3, #7
 8007ade:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f023 0307 	bic.w	r3, r3, #7
 8007ae6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	4a1f      	ldr	r2, [pc, #124]	@ (8007b6c <prvHeapInit+0xac>)
 8007af0:	4413      	add	r3, r2
 8007af2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007af8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b70 <prvHeapInit+0xb0>)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007afe:	4b1c      	ldr	r3, [pc, #112]	@ (8007b70 <prvHeapInit+0xb0>)
 8007b00:	2200      	movs	r2, #0
 8007b02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	4413      	add	r3, r2
 8007b0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b0c:	2208      	movs	r2, #8
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	1a9b      	subs	r3, r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0307 	bic.w	r3, r3, #7
 8007b1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	4a15      	ldr	r2, [pc, #84]	@ (8007b74 <prvHeapInit+0xb4>)
 8007b20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b22:	4b14      	ldr	r3, [pc, #80]	@ (8007b74 <prvHeapInit+0xb4>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2200      	movs	r2, #0
 8007b28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b2a:	4b12      	ldr	r3, [pc, #72]	@ (8007b74 <prvHeapInit+0xb4>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	1ad2      	subs	r2, r2, r3
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b40:	4b0c      	ldr	r3, [pc, #48]	@ (8007b74 <prvHeapInit+0xb4>)
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8007b78 <prvHeapInit+0xb8>)
 8007b4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	4a09      	ldr	r2, [pc, #36]	@ (8007b7c <prvHeapInit+0xbc>)
 8007b56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b58:	4b09      	ldr	r3, [pc, #36]	@ (8007b80 <prvHeapInit+0xc0>)
 8007b5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007b5e:	601a      	str	r2, [r3, #0]
}
 8007b60:	bf00      	nop
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	20001038 	.word	0x20001038
 8007b70:	20004c38 	.word	0x20004c38
 8007b74:	20004c40 	.word	0x20004c40
 8007b78:	20004c48 	.word	0x20004c48
 8007b7c:	20004c44 	.word	0x20004c44
 8007b80:	20004c54 	.word	0x20004c54

08007b84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b8c:	4b28      	ldr	r3, [pc, #160]	@ (8007c30 <prvInsertBlockIntoFreeList+0xac>)
 8007b8e:	60fb      	str	r3, [r7, #12]
 8007b90:	e002      	b.n	8007b98 <prvInsertBlockIntoFreeList+0x14>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	60fb      	str	r3, [r7, #12]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d8f7      	bhi.n	8007b92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	4413      	add	r3, r2
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d108      	bne.n	8007bc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	685a      	ldr	r2, [r3, #4]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	441a      	add	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	441a      	add	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d118      	bne.n	8007c0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	4b15      	ldr	r3, [pc, #84]	@ (8007c34 <prvInsertBlockIntoFreeList+0xb0>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d00d      	beq.n	8007c02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685a      	ldr	r2, [r3, #4]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	441a      	add	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	601a      	str	r2, [r3, #0]
 8007c00:	e008      	b.n	8007c14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c02:	4b0c      	ldr	r3, [pc, #48]	@ (8007c34 <prvInsertBlockIntoFreeList+0xb0>)
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	601a      	str	r2, [r3, #0]
 8007c0a:	e003      	b.n	8007c14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d002      	beq.n	8007c22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c22:	bf00      	nop
 8007c24:	3714      	adds	r7, #20
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	20004c38 	.word	0x20004c38
 8007c34:	20004c40 	.word	0x20004c40

08007c38 <std>:
 8007c38:	2300      	movs	r3, #0
 8007c3a:	b510      	push	{r4, lr}
 8007c3c:	4604      	mov	r4, r0
 8007c3e:	e9c0 3300 	strd	r3, r3, [r0]
 8007c42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c46:	6083      	str	r3, [r0, #8]
 8007c48:	8181      	strh	r1, [r0, #12]
 8007c4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007c4c:	81c2      	strh	r2, [r0, #14]
 8007c4e:	6183      	str	r3, [r0, #24]
 8007c50:	4619      	mov	r1, r3
 8007c52:	2208      	movs	r2, #8
 8007c54:	305c      	adds	r0, #92	@ 0x5c
 8007c56:	f000 f906 	bl	8007e66 <memset>
 8007c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c90 <std+0x58>)
 8007c5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c94 <std+0x5c>)
 8007c60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007c62:	4b0d      	ldr	r3, [pc, #52]	@ (8007c98 <std+0x60>)
 8007c64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007c66:	4b0d      	ldr	r3, [pc, #52]	@ (8007c9c <std+0x64>)
 8007c68:	6323      	str	r3, [r4, #48]	@ 0x30
 8007c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ca0 <std+0x68>)
 8007c6c:	6224      	str	r4, [r4, #32]
 8007c6e:	429c      	cmp	r4, r3
 8007c70:	d006      	beq.n	8007c80 <std+0x48>
 8007c72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007c76:	4294      	cmp	r4, r2
 8007c78:	d002      	beq.n	8007c80 <std+0x48>
 8007c7a:	33d0      	adds	r3, #208	@ 0xd0
 8007c7c:	429c      	cmp	r4, r3
 8007c7e:	d105      	bne.n	8007c8c <std+0x54>
 8007c80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c88:	f000 b9c4 	b.w	8008014 <__retarget_lock_init_recursive>
 8007c8c:	bd10      	pop	{r4, pc}
 8007c8e:	bf00      	nop
 8007c90:	08007de1 	.word	0x08007de1
 8007c94:	08007e03 	.word	0x08007e03
 8007c98:	08007e3b 	.word	0x08007e3b
 8007c9c:	08007e5f 	.word	0x08007e5f
 8007ca0:	20004c58 	.word	0x20004c58

08007ca4 <stdio_exit_handler>:
 8007ca4:	4a02      	ldr	r2, [pc, #8]	@ (8007cb0 <stdio_exit_handler+0xc>)
 8007ca6:	4903      	ldr	r1, [pc, #12]	@ (8007cb4 <stdio_exit_handler+0x10>)
 8007ca8:	4803      	ldr	r0, [pc, #12]	@ (8007cb8 <stdio_exit_handler+0x14>)
 8007caa:	f000 b869 	b.w	8007d80 <_fwalk_sglue>
 8007cae:	bf00      	nop
 8007cb0:	20000010 	.word	0x20000010
 8007cb4:	080088cd 	.word	0x080088cd
 8007cb8:	20000020 	.word	0x20000020

08007cbc <cleanup_stdio>:
 8007cbc:	6841      	ldr	r1, [r0, #4]
 8007cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8007cf0 <cleanup_stdio+0x34>)
 8007cc0:	4299      	cmp	r1, r3
 8007cc2:	b510      	push	{r4, lr}
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	d001      	beq.n	8007ccc <cleanup_stdio+0x10>
 8007cc8:	f000 fe00 	bl	80088cc <_fflush_r>
 8007ccc:	68a1      	ldr	r1, [r4, #8]
 8007cce:	4b09      	ldr	r3, [pc, #36]	@ (8007cf4 <cleanup_stdio+0x38>)
 8007cd0:	4299      	cmp	r1, r3
 8007cd2:	d002      	beq.n	8007cda <cleanup_stdio+0x1e>
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f000 fdf9 	bl	80088cc <_fflush_r>
 8007cda:	68e1      	ldr	r1, [r4, #12]
 8007cdc:	4b06      	ldr	r3, [pc, #24]	@ (8007cf8 <cleanup_stdio+0x3c>)
 8007cde:	4299      	cmp	r1, r3
 8007ce0:	d004      	beq.n	8007cec <cleanup_stdio+0x30>
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ce8:	f000 bdf0 	b.w	80088cc <_fflush_r>
 8007cec:	bd10      	pop	{r4, pc}
 8007cee:	bf00      	nop
 8007cf0:	20004c58 	.word	0x20004c58
 8007cf4:	20004cc0 	.word	0x20004cc0
 8007cf8:	20004d28 	.word	0x20004d28

08007cfc <global_stdio_init.part.0>:
 8007cfc:	b510      	push	{r4, lr}
 8007cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8007d2c <global_stdio_init.part.0+0x30>)
 8007d00:	4c0b      	ldr	r4, [pc, #44]	@ (8007d30 <global_stdio_init.part.0+0x34>)
 8007d02:	4a0c      	ldr	r2, [pc, #48]	@ (8007d34 <global_stdio_init.part.0+0x38>)
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	4620      	mov	r0, r4
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2104      	movs	r1, #4
 8007d0c:	f7ff ff94 	bl	8007c38 <std>
 8007d10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d14:	2201      	movs	r2, #1
 8007d16:	2109      	movs	r1, #9
 8007d18:	f7ff ff8e 	bl	8007c38 <std>
 8007d1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d20:	2202      	movs	r2, #2
 8007d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d26:	2112      	movs	r1, #18
 8007d28:	f7ff bf86 	b.w	8007c38 <std>
 8007d2c:	20004d90 	.word	0x20004d90
 8007d30:	20004c58 	.word	0x20004c58
 8007d34:	08007ca5 	.word	0x08007ca5

08007d38 <__sfp_lock_acquire>:
 8007d38:	4801      	ldr	r0, [pc, #4]	@ (8007d40 <__sfp_lock_acquire+0x8>)
 8007d3a:	f000 b96c 	b.w	8008016 <__retarget_lock_acquire_recursive>
 8007d3e:	bf00      	nop
 8007d40:	20004d99 	.word	0x20004d99

08007d44 <__sfp_lock_release>:
 8007d44:	4801      	ldr	r0, [pc, #4]	@ (8007d4c <__sfp_lock_release+0x8>)
 8007d46:	f000 b967 	b.w	8008018 <__retarget_lock_release_recursive>
 8007d4a:	bf00      	nop
 8007d4c:	20004d99 	.word	0x20004d99

08007d50 <__sinit>:
 8007d50:	b510      	push	{r4, lr}
 8007d52:	4604      	mov	r4, r0
 8007d54:	f7ff fff0 	bl	8007d38 <__sfp_lock_acquire>
 8007d58:	6a23      	ldr	r3, [r4, #32]
 8007d5a:	b11b      	cbz	r3, 8007d64 <__sinit+0x14>
 8007d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d60:	f7ff bff0 	b.w	8007d44 <__sfp_lock_release>
 8007d64:	4b04      	ldr	r3, [pc, #16]	@ (8007d78 <__sinit+0x28>)
 8007d66:	6223      	str	r3, [r4, #32]
 8007d68:	4b04      	ldr	r3, [pc, #16]	@ (8007d7c <__sinit+0x2c>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1f5      	bne.n	8007d5c <__sinit+0xc>
 8007d70:	f7ff ffc4 	bl	8007cfc <global_stdio_init.part.0>
 8007d74:	e7f2      	b.n	8007d5c <__sinit+0xc>
 8007d76:	bf00      	nop
 8007d78:	08007cbd 	.word	0x08007cbd
 8007d7c:	20004d90 	.word	0x20004d90

08007d80 <_fwalk_sglue>:
 8007d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d84:	4607      	mov	r7, r0
 8007d86:	4688      	mov	r8, r1
 8007d88:	4614      	mov	r4, r2
 8007d8a:	2600      	movs	r6, #0
 8007d8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d90:	f1b9 0901 	subs.w	r9, r9, #1
 8007d94:	d505      	bpl.n	8007da2 <_fwalk_sglue+0x22>
 8007d96:	6824      	ldr	r4, [r4, #0]
 8007d98:	2c00      	cmp	r4, #0
 8007d9a:	d1f7      	bne.n	8007d8c <_fwalk_sglue+0xc>
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007da2:	89ab      	ldrh	r3, [r5, #12]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d907      	bls.n	8007db8 <_fwalk_sglue+0x38>
 8007da8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007dac:	3301      	adds	r3, #1
 8007dae:	d003      	beq.n	8007db8 <_fwalk_sglue+0x38>
 8007db0:	4629      	mov	r1, r5
 8007db2:	4638      	mov	r0, r7
 8007db4:	47c0      	blx	r8
 8007db6:	4306      	orrs	r6, r0
 8007db8:	3568      	adds	r5, #104	@ 0x68
 8007dba:	e7e9      	b.n	8007d90 <_fwalk_sglue+0x10>

08007dbc <iprintf>:
 8007dbc:	b40f      	push	{r0, r1, r2, r3}
 8007dbe:	b507      	push	{r0, r1, r2, lr}
 8007dc0:	4906      	ldr	r1, [pc, #24]	@ (8007ddc <iprintf+0x20>)
 8007dc2:	ab04      	add	r3, sp, #16
 8007dc4:	6808      	ldr	r0, [r1, #0]
 8007dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dca:	6881      	ldr	r1, [r0, #8]
 8007dcc:	9301      	str	r3, [sp, #4]
 8007dce:	f000 fa55 	bl	800827c <_vfiprintf_r>
 8007dd2:	b003      	add	sp, #12
 8007dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dd8:	b004      	add	sp, #16
 8007dda:	4770      	bx	lr
 8007ddc:	2000001c 	.word	0x2000001c

08007de0 <__sread>:
 8007de0:	b510      	push	{r4, lr}
 8007de2:	460c      	mov	r4, r1
 8007de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de8:	f000 f8c6 	bl	8007f78 <_read_r>
 8007dec:	2800      	cmp	r0, #0
 8007dee:	bfab      	itete	ge
 8007df0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007df2:	89a3      	ldrhlt	r3, [r4, #12]
 8007df4:	181b      	addge	r3, r3, r0
 8007df6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007dfa:	bfac      	ite	ge
 8007dfc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007dfe:	81a3      	strhlt	r3, [r4, #12]
 8007e00:	bd10      	pop	{r4, pc}

08007e02 <__swrite>:
 8007e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e06:	461f      	mov	r7, r3
 8007e08:	898b      	ldrh	r3, [r1, #12]
 8007e0a:	05db      	lsls	r3, r3, #23
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	460c      	mov	r4, r1
 8007e10:	4616      	mov	r6, r2
 8007e12:	d505      	bpl.n	8007e20 <__swrite+0x1e>
 8007e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e18:	2302      	movs	r3, #2
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f000 f89a 	bl	8007f54 <_lseek_r>
 8007e20:	89a3      	ldrh	r3, [r4, #12]
 8007e22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e2a:	81a3      	strh	r3, [r4, #12]
 8007e2c:	4632      	mov	r2, r6
 8007e2e:	463b      	mov	r3, r7
 8007e30:	4628      	mov	r0, r5
 8007e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e36:	f000 b8b1 	b.w	8007f9c <_write_r>

08007e3a <__sseek>:
 8007e3a:	b510      	push	{r4, lr}
 8007e3c:	460c      	mov	r4, r1
 8007e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e42:	f000 f887 	bl	8007f54 <_lseek_r>
 8007e46:	1c43      	adds	r3, r0, #1
 8007e48:	89a3      	ldrh	r3, [r4, #12]
 8007e4a:	bf15      	itete	ne
 8007e4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007e4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007e52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007e56:	81a3      	strheq	r3, [r4, #12]
 8007e58:	bf18      	it	ne
 8007e5a:	81a3      	strhne	r3, [r4, #12]
 8007e5c:	bd10      	pop	{r4, pc}

08007e5e <__sclose>:
 8007e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e62:	f000 b809 	b.w	8007e78 <_close_r>

08007e66 <memset>:
 8007e66:	4402      	add	r2, r0
 8007e68:	4603      	mov	r3, r0
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d100      	bne.n	8007e70 <memset+0xa>
 8007e6e:	4770      	bx	lr
 8007e70:	f803 1b01 	strb.w	r1, [r3], #1
 8007e74:	e7f9      	b.n	8007e6a <memset+0x4>
	...

08007e78 <_close_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4d06      	ldr	r5, [pc, #24]	@ (8007e94 <_close_r+0x1c>)
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	4604      	mov	r4, r0
 8007e80:	4608      	mov	r0, r1
 8007e82:	602b      	str	r3, [r5, #0]
 8007e84:	f7f9 f975 	bl	8001172 <_close>
 8007e88:	1c43      	adds	r3, r0, #1
 8007e8a:	d102      	bne.n	8007e92 <_close_r+0x1a>
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	b103      	cbz	r3, 8007e92 <_close_r+0x1a>
 8007e90:	6023      	str	r3, [r4, #0]
 8007e92:	bd38      	pop	{r3, r4, r5, pc}
 8007e94:	20004d94 	.word	0x20004d94

08007e98 <_reclaim_reent>:
 8007e98:	4b2d      	ldr	r3, [pc, #180]	@ (8007f50 <_reclaim_reent+0xb8>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4283      	cmp	r3, r0
 8007e9e:	b570      	push	{r4, r5, r6, lr}
 8007ea0:	4604      	mov	r4, r0
 8007ea2:	d053      	beq.n	8007f4c <_reclaim_reent+0xb4>
 8007ea4:	69c3      	ldr	r3, [r0, #28]
 8007ea6:	b31b      	cbz	r3, 8007ef0 <_reclaim_reent+0x58>
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	b163      	cbz	r3, 8007ec6 <_reclaim_reent+0x2e>
 8007eac:	2500      	movs	r5, #0
 8007eae:	69e3      	ldr	r3, [r4, #28]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	5959      	ldr	r1, [r3, r5]
 8007eb4:	b9b1      	cbnz	r1, 8007ee4 <_reclaim_reent+0x4c>
 8007eb6:	3504      	adds	r5, #4
 8007eb8:	2d80      	cmp	r5, #128	@ 0x80
 8007eba:	d1f8      	bne.n	8007eae <_reclaim_reent+0x16>
 8007ebc:	69e3      	ldr	r3, [r4, #28]
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	68d9      	ldr	r1, [r3, #12]
 8007ec2:	f000 f8b9 	bl	8008038 <_free_r>
 8007ec6:	69e3      	ldr	r3, [r4, #28]
 8007ec8:	6819      	ldr	r1, [r3, #0]
 8007eca:	b111      	cbz	r1, 8007ed2 <_reclaim_reent+0x3a>
 8007ecc:	4620      	mov	r0, r4
 8007ece:	f000 f8b3 	bl	8008038 <_free_r>
 8007ed2:	69e3      	ldr	r3, [r4, #28]
 8007ed4:	689d      	ldr	r5, [r3, #8]
 8007ed6:	b15d      	cbz	r5, 8007ef0 <_reclaim_reent+0x58>
 8007ed8:	4629      	mov	r1, r5
 8007eda:	4620      	mov	r0, r4
 8007edc:	682d      	ldr	r5, [r5, #0]
 8007ede:	f000 f8ab 	bl	8008038 <_free_r>
 8007ee2:	e7f8      	b.n	8007ed6 <_reclaim_reent+0x3e>
 8007ee4:	680e      	ldr	r6, [r1, #0]
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f000 f8a6 	bl	8008038 <_free_r>
 8007eec:	4631      	mov	r1, r6
 8007eee:	e7e1      	b.n	8007eb4 <_reclaim_reent+0x1c>
 8007ef0:	6961      	ldr	r1, [r4, #20]
 8007ef2:	b111      	cbz	r1, 8007efa <_reclaim_reent+0x62>
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	f000 f89f 	bl	8008038 <_free_r>
 8007efa:	69e1      	ldr	r1, [r4, #28]
 8007efc:	b111      	cbz	r1, 8007f04 <_reclaim_reent+0x6c>
 8007efe:	4620      	mov	r0, r4
 8007f00:	f000 f89a 	bl	8008038 <_free_r>
 8007f04:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007f06:	b111      	cbz	r1, 8007f0e <_reclaim_reent+0x76>
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f000 f895 	bl	8008038 <_free_r>
 8007f0e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f10:	b111      	cbz	r1, 8007f18 <_reclaim_reent+0x80>
 8007f12:	4620      	mov	r0, r4
 8007f14:	f000 f890 	bl	8008038 <_free_r>
 8007f18:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007f1a:	b111      	cbz	r1, 8007f22 <_reclaim_reent+0x8a>
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	f000 f88b 	bl	8008038 <_free_r>
 8007f22:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007f24:	b111      	cbz	r1, 8007f2c <_reclaim_reent+0x94>
 8007f26:	4620      	mov	r0, r4
 8007f28:	f000 f886 	bl	8008038 <_free_r>
 8007f2c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007f2e:	b111      	cbz	r1, 8007f36 <_reclaim_reent+0x9e>
 8007f30:	4620      	mov	r0, r4
 8007f32:	f000 f881 	bl	8008038 <_free_r>
 8007f36:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007f38:	b111      	cbz	r1, 8007f40 <_reclaim_reent+0xa8>
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	f000 f87c 	bl	8008038 <_free_r>
 8007f40:	6a23      	ldr	r3, [r4, #32]
 8007f42:	b11b      	cbz	r3, 8007f4c <_reclaim_reent+0xb4>
 8007f44:	4620      	mov	r0, r4
 8007f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f4a:	4718      	bx	r3
 8007f4c:	bd70      	pop	{r4, r5, r6, pc}
 8007f4e:	bf00      	nop
 8007f50:	2000001c 	.word	0x2000001c

08007f54 <_lseek_r>:
 8007f54:	b538      	push	{r3, r4, r5, lr}
 8007f56:	4d07      	ldr	r5, [pc, #28]	@ (8007f74 <_lseek_r+0x20>)
 8007f58:	4604      	mov	r4, r0
 8007f5a:	4608      	mov	r0, r1
 8007f5c:	4611      	mov	r1, r2
 8007f5e:	2200      	movs	r2, #0
 8007f60:	602a      	str	r2, [r5, #0]
 8007f62:	461a      	mov	r2, r3
 8007f64:	f7f9 f92c 	bl	80011c0 <_lseek>
 8007f68:	1c43      	adds	r3, r0, #1
 8007f6a:	d102      	bne.n	8007f72 <_lseek_r+0x1e>
 8007f6c:	682b      	ldr	r3, [r5, #0]
 8007f6e:	b103      	cbz	r3, 8007f72 <_lseek_r+0x1e>
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	bd38      	pop	{r3, r4, r5, pc}
 8007f74:	20004d94 	.word	0x20004d94

08007f78 <_read_r>:
 8007f78:	b538      	push	{r3, r4, r5, lr}
 8007f7a:	4d07      	ldr	r5, [pc, #28]	@ (8007f98 <_read_r+0x20>)
 8007f7c:	4604      	mov	r4, r0
 8007f7e:	4608      	mov	r0, r1
 8007f80:	4611      	mov	r1, r2
 8007f82:	2200      	movs	r2, #0
 8007f84:	602a      	str	r2, [r5, #0]
 8007f86:	461a      	mov	r2, r3
 8007f88:	f7f9 f8ba 	bl	8001100 <_read>
 8007f8c:	1c43      	adds	r3, r0, #1
 8007f8e:	d102      	bne.n	8007f96 <_read_r+0x1e>
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	b103      	cbz	r3, 8007f96 <_read_r+0x1e>
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	bd38      	pop	{r3, r4, r5, pc}
 8007f98:	20004d94 	.word	0x20004d94

08007f9c <_write_r>:
 8007f9c:	b538      	push	{r3, r4, r5, lr}
 8007f9e:	4d07      	ldr	r5, [pc, #28]	@ (8007fbc <_write_r+0x20>)
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	4608      	mov	r0, r1
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	602a      	str	r2, [r5, #0]
 8007faa:	461a      	mov	r2, r3
 8007fac:	f7f9 f8c5 	bl	800113a <_write>
 8007fb0:	1c43      	adds	r3, r0, #1
 8007fb2:	d102      	bne.n	8007fba <_write_r+0x1e>
 8007fb4:	682b      	ldr	r3, [r5, #0]
 8007fb6:	b103      	cbz	r3, 8007fba <_write_r+0x1e>
 8007fb8:	6023      	str	r3, [r4, #0]
 8007fba:	bd38      	pop	{r3, r4, r5, pc}
 8007fbc:	20004d94 	.word	0x20004d94

08007fc0 <__errno>:
 8007fc0:	4b01      	ldr	r3, [pc, #4]	@ (8007fc8 <__errno+0x8>)
 8007fc2:	6818      	ldr	r0, [r3, #0]
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	2000001c 	.word	0x2000001c

08007fcc <__libc_init_array>:
 8007fcc:	b570      	push	{r4, r5, r6, lr}
 8007fce:	4d0d      	ldr	r5, [pc, #52]	@ (8008004 <__libc_init_array+0x38>)
 8007fd0:	4c0d      	ldr	r4, [pc, #52]	@ (8008008 <__libc_init_array+0x3c>)
 8007fd2:	1b64      	subs	r4, r4, r5
 8007fd4:	10a4      	asrs	r4, r4, #2
 8007fd6:	2600      	movs	r6, #0
 8007fd8:	42a6      	cmp	r6, r4
 8007fda:	d109      	bne.n	8007ff0 <__libc_init_array+0x24>
 8007fdc:	4d0b      	ldr	r5, [pc, #44]	@ (800800c <__libc_init_array+0x40>)
 8007fde:	4c0c      	ldr	r4, [pc, #48]	@ (8008010 <__libc_init_array+0x44>)
 8007fe0:	f000 fdc4 	bl	8008b6c <_init>
 8007fe4:	1b64      	subs	r4, r4, r5
 8007fe6:	10a4      	asrs	r4, r4, #2
 8007fe8:	2600      	movs	r6, #0
 8007fea:	42a6      	cmp	r6, r4
 8007fec:	d105      	bne.n	8007ffa <__libc_init_array+0x2e>
 8007fee:	bd70      	pop	{r4, r5, r6, pc}
 8007ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ff4:	4798      	blx	r3
 8007ff6:	3601      	adds	r6, #1
 8007ff8:	e7ee      	b.n	8007fd8 <__libc_init_array+0xc>
 8007ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ffe:	4798      	blx	r3
 8008000:	3601      	adds	r6, #1
 8008002:	e7f2      	b.n	8007fea <__libc_init_array+0x1e>
 8008004:	08008cfc 	.word	0x08008cfc
 8008008:	08008cfc 	.word	0x08008cfc
 800800c:	08008cfc 	.word	0x08008cfc
 8008010:	08008d00 	.word	0x08008d00

08008014 <__retarget_lock_init_recursive>:
 8008014:	4770      	bx	lr

08008016 <__retarget_lock_acquire_recursive>:
 8008016:	4770      	bx	lr

08008018 <__retarget_lock_release_recursive>:
 8008018:	4770      	bx	lr

0800801a <memcpy>:
 800801a:	440a      	add	r2, r1
 800801c:	4291      	cmp	r1, r2
 800801e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008022:	d100      	bne.n	8008026 <memcpy+0xc>
 8008024:	4770      	bx	lr
 8008026:	b510      	push	{r4, lr}
 8008028:	f811 4b01 	ldrb.w	r4, [r1], #1
 800802c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008030:	4291      	cmp	r1, r2
 8008032:	d1f9      	bne.n	8008028 <memcpy+0xe>
 8008034:	bd10      	pop	{r4, pc}
	...

08008038 <_free_r>:
 8008038:	b538      	push	{r3, r4, r5, lr}
 800803a:	4605      	mov	r5, r0
 800803c:	2900      	cmp	r1, #0
 800803e:	d041      	beq.n	80080c4 <_free_r+0x8c>
 8008040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008044:	1f0c      	subs	r4, r1, #4
 8008046:	2b00      	cmp	r3, #0
 8008048:	bfb8      	it	lt
 800804a:	18e4      	addlt	r4, r4, r3
 800804c:	f000 f8e0 	bl	8008210 <__malloc_lock>
 8008050:	4a1d      	ldr	r2, [pc, #116]	@ (80080c8 <_free_r+0x90>)
 8008052:	6813      	ldr	r3, [r2, #0]
 8008054:	b933      	cbnz	r3, 8008064 <_free_r+0x2c>
 8008056:	6063      	str	r3, [r4, #4]
 8008058:	6014      	str	r4, [r2, #0]
 800805a:	4628      	mov	r0, r5
 800805c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008060:	f000 b8dc 	b.w	800821c <__malloc_unlock>
 8008064:	42a3      	cmp	r3, r4
 8008066:	d908      	bls.n	800807a <_free_r+0x42>
 8008068:	6820      	ldr	r0, [r4, #0]
 800806a:	1821      	adds	r1, r4, r0
 800806c:	428b      	cmp	r3, r1
 800806e:	bf01      	itttt	eq
 8008070:	6819      	ldreq	r1, [r3, #0]
 8008072:	685b      	ldreq	r3, [r3, #4]
 8008074:	1809      	addeq	r1, r1, r0
 8008076:	6021      	streq	r1, [r4, #0]
 8008078:	e7ed      	b.n	8008056 <_free_r+0x1e>
 800807a:	461a      	mov	r2, r3
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	b10b      	cbz	r3, 8008084 <_free_r+0x4c>
 8008080:	42a3      	cmp	r3, r4
 8008082:	d9fa      	bls.n	800807a <_free_r+0x42>
 8008084:	6811      	ldr	r1, [r2, #0]
 8008086:	1850      	adds	r0, r2, r1
 8008088:	42a0      	cmp	r0, r4
 800808a:	d10b      	bne.n	80080a4 <_free_r+0x6c>
 800808c:	6820      	ldr	r0, [r4, #0]
 800808e:	4401      	add	r1, r0
 8008090:	1850      	adds	r0, r2, r1
 8008092:	4283      	cmp	r3, r0
 8008094:	6011      	str	r1, [r2, #0]
 8008096:	d1e0      	bne.n	800805a <_free_r+0x22>
 8008098:	6818      	ldr	r0, [r3, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	6053      	str	r3, [r2, #4]
 800809e:	4408      	add	r0, r1
 80080a0:	6010      	str	r0, [r2, #0]
 80080a2:	e7da      	b.n	800805a <_free_r+0x22>
 80080a4:	d902      	bls.n	80080ac <_free_r+0x74>
 80080a6:	230c      	movs	r3, #12
 80080a8:	602b      	str	r3, [r5, #0]
 80080aa:	e7d6      	b.n	800805a <_free_r+0x22>
 80080ac:	6820      	ldr	r0, [r4, #0]
 80080ae:	1821      	adds	r1, r4, r0
 80080b0:	428b      	cmp	r3, r1
 80080b2:	bf04      	itt	eq
 80080b4:	6819      	ldreq	r1, [r3, #0]
 80080b6:	685b      	ldreq	r3, [r3, #4]
 80080b8:	6063      	str	r3, [r4, #4]
 80080ba:	bf04      	itt	eq
 80080bc:	1809      	addeq	r1, r1, r0
 80080be:	6021      	streq	r1, [r4, #0]
 80080c0:	6054      	str	r4, [r2, #4]
 80080c2:	e7ca      	b.n	800805a <_free_r+0x22>
 80080c4:	bd38      	pop	{r3, r4, r5, pc}
 80080c6:	bf00      	nop
 80080c8:	20004da0 	.word	0x20004da0

080080cc <sbrk_aligned>:
 80080cc:	b570      	push	{r4, r5, r6, lr}
 80080ce:	4e0f      	ldr	r6, [pc, #60]	@ (800810c <sbrk_aligned+0x40>)
 80080d0:	460c      	mov	r4, r1
 80080d2:	6831      	ldr	r1, [r6, #0]
 80080d4:	4605      	mov	r5, r0
 80080d6:	b911      	cbnz	r1, 80080de <sbrk_aligned+0x12>
 80080d8:	f000 fcb4 	bl	8008a44 <_sbrk_r>
 80080dc:	6030      	str	r0, [r6, #0]
 80080de:	4621      	mov	r1, r4
 80080e0:	4628      	mov	r0, r5
 80080e2:	f000 fcaf 	bl	8008a44 <_sbrk_r>
 80080e6:	1c43      	adds	r3, r0, #1
 80080e8:	d103      	bne.n	80080f2 <sbrk_aligned+0x26>
 80080ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80080ee:	4620      	mov	r0, r4
 80080f0:	bd70      	pop	{r4, r5, r6, pc}
 80080f2:	1cc4      	adds	r4, r0, #3
 80080f4:	f024 0403 	bic.w	r4, r4, #3
 80080f8:	42a0      	cmp	r0, r4
 80080fa:	d0f8      	beq.n	80080ee <sbrk_aligned+0x22>
 80080fc:	1a21      	subs	r1, r4, r0
 80080fe:	4628      	mov	r0, r5
 8008100:	f000 fca0 	bl	8008a44 <_sbrk_r>
 8008104:	3001      	adds	r0, #1
 8008106:	d1f2      	bne.n	80080ee <sbrk_aligned+0x22>
 8008108:	e7ef      	b.n	80080ea <sbrk_aligned+0x1e>
 800810a:	bf00      	nop
 800810c:	20004d9c 	.word	0x20004d9c

08008110 <_malloc_r>:
 8008110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008114:	1ccd      	adds	r5, r1, #3
 8008116:	f025 0503 	bic.w	r5, r5, #3
 800811a:	3508      	adds	r5, #8
 800811c:	2d0c      	cmp	r5, #12
 800811e:	bf38      	it	cc
 8008120:	250c      	movcc	r5, #12
 8008122:	2d00      	cmp	r5, #0
 8008124:	4606      	mov	r6, r0
 8008126:	db01      	blt.n	800812c <_malloc_r+0x1c>
 8008128:	42a9      	cmp	r1, r5
 800812a:	d904      	bls.n	8008136 <_malloc_r+0x26>
 800812c:	230c      	movs	r3, #12
 800812e:	6033      	str	r3, [r6, #0]
 8008130:	2000      	movs	r0, #0
 8008132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008136:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800820c <_malloc_r+0xfc>
 800813a:	f000 f869 	bl	8008210 <__malloc_lock>
 800813e:	f8d8 3000 	ldr.w	r3, [r8]
 8008142:	461c      	mov	r4, r3
 8008144:	bb44      	cbnz	r4, 8008198 <_malloc_r+0x88>
 8008146:	4629      	mov	r1, r5
 8008148:	4630      	mov	r0, r6
 800814a:	f7ff ffbf 	bl	80080cc <sbrk_aligned>
 800814e:	1c43      	adds	r3, r0, #1
 8008150:	4604      	mov	r4, r0
 8008152:	d158      	bne.n	8008206 <_malloc_r+0xf6>
 8008154:	f8d8 4000 	ldr.w	r4, [r8]
 8008158:	4627      	mov	r7, r4
 800815a:	2f00      	cmp	r7, #0
 800815c:	d143      	bne.n	80081e6 <_malloc_r+0xd6>
 800815e:	2c00      	cmp	r4, #0
 8008160:	d04b      	beq.n	80081fa <_malloc_r+0xea>
 8008162:	6823      	ldr	r3, [r4, #0]
 8008164:	4639      	mov	r1, r7
 8008166:	4630      	mov	r0, r6
 8008168:	eb04 0903 	add.w	r9, r4, r3
 800816c:	f000 fc6a 	bl	8008a44 <_sbrk_r>
 8008170:	4581      	cmp	r9, r0
 8008172:	d142      	bne.n	80081fa <_malloc_r+0xea>
 8008174:	6821      	ldr	r1, [r4, #0]
 8008176:	1a6d      	subs	r5, r5, r1
 8008178:	4629      	mov	r1, r5
 800817a:	4630      	mov	r0, r6
 800817c:	f7ff ffa6 	bl	80080cc <sbrk_aligned>
 8008180:	3001      	adds	r0, #1
 8008182:	d03a      	beq.n	80081fa <_malloc_r+0xea>
 8008184:	6823      	ldr	r3, [r4, #0]
 8008186:	442b      	add	r3, r5
 8008188:	6023      	str	r3, [r4, #0]
 800818a:	f8d8 3000 	ldr.w	r3, [r8]
 800818e:	685a      	ldr	r2, [r3, #4]
 8008190:	bb62      	cbnz	r2, 80081ec <_malloc_r+0xdc>
 8008192:	f8c8 7000 	str.w	r7, [r8]
 8008196:	e00f      	b.n	80081b8 <_malloc_r+0xa8>
 8008198:	6822      	ldr	r2, [r4, #0]
 800819a:	1b52      	subs	r2, r2, r5
 800819c:	d420      	bmi.n	80081e0 <_malloc_r+0xd0>
 800819e:	2a0b      	cmp	r2, #11
 80081a0:	d917      	bls.n	80081d2 <_malloc_r+0xc2>
 80081a2:	1961      	adds	r1, r4, r5
 80081a4:	42a3      	cmp	r3, r4
 80081a6:	6025      	str	r5, [r4, #0]
 80081a8:	bf18      	it	ne
 80081aa:	6059      	strne	r1, [r3, #4]
 80081ac:	6863      	ldr	r3, [r4, #4]
 80081ae:	bf08      	it	eq
 80081b0:	f8c8 1000 	streq.w	r1, [r8]
 80081b4:	5162      	str	r2, [r4, r5]
 80081b6:	604b      	str	r3, [r1, #4]
 80081b8:	4630      	mov	r0, r6
 80081ba:	f000 f82f 	bl	800821c <__malloc_unlock>
 80081be:	f104 000b 	add.w	r0, r4, #11
 80081c2:	1d23      	adds	r3, r4, #4
 80081c4:	f020 0007 	bic.w	r0, r0, #7
 80081c8:	1ac2      	subs	r2, r0, r3
 80081ca:	bf1c      	itt	ne
 80081cc:	1a1b      	subne	r3, r3, r0
 80081ce:	50a3      	strne	r3, [r4, r2]
 80081d0:	e7af      	b.n	8008132 <_malloc_r+0x22>
 80081d2:	6862      	ldr	r2, [r4, #4]
 80081d4:	42a3      	cmp	r3, r4
 80081d6:	bf0c      	ite	eq
 80081d8:	f8c8 2000 	streq.w	r2, [r8]
 80081dc:	605a      	strne	r2, [r3, #4]
 80081de:	e7eb      	b.n	80081b8 <_malloc_r+0xa8>
 80081e0:	4623      	mov	r3, r4
 80081e2:	6864      	ldr	r4, [r4, #4]
 80081e4:	e7ae      	b.n	8008144 <_malloc_r+0x34>
 80081e6:	463c      	mov	r4, r7
 80081e8:	687f      	ldr	r7, [r7, #4]
 80081ea:	e7b6      	b.n	800815a <_malloc_r+0x4a>
 80081ec:	461a      	mov	r2, r3
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	42a3      	cmp	r3, r4
 80081f2:	d1fb      	bne.n	80081ec <_malloc_r+0xdc>
 80081f4:	2300      	movs	r3, #0
 80081f6:	6053      	str	r3, [r2, #4]
 80081f8:	e7de      	b.n	80081b8 <_malloc_r+0xa8>
 80081fa:	230c      	movs	r3, #12
 80081fc:	6033      	str	r3, [r6, #0]
 80081fe:	4630      	mov	r0, r6
 8008200:	f000 f80c 	bl	800821c <__malloc_unlock>
 8008204:	e794      	b.n	8008130 <_malloc_r+0x20>
 8008206:	6005      	str	r5, [r0, #0]
 8008208:	e7d6      	b.n	80081b8 <_malloc_r+0xa8>
 800820a:	bf00      	nop
 800820c:	20004da0 	.word	0x20004da0

08008210 <__malloc_lock>:
 8008210:	4801      	ldr	r0, [pc, #4]	@ (8008218 <__malloc_lock+0x8>)
 8008212:	f7ff bf00 	b.w	8008016 <__retarget_lock_acquire_recursive>
 8008216:	bf00      	nop
 8008218:	20004d98 	.word	0x20004d98

0800821c <__malloc_unlock>:
 800821c:	4801      	ldr	r0, [pc, #4]	@ (8008224 <__malloc_unlock+0x8>)
 800821e:	f7ff befb 	b.w	8008018 <__retarget_lock_release_recursive>
 8008222:	bf00      	nop
 8008224:	20004d98 	.word	0x20004d98

08008228 <__sfputc_r>:
 8008228:	6893      	ldr	r3, [r2, #8]
 800822a:	3b01      	subs	r3, #1
 800822c:	2b00      	cmp	r3, #0
 800822e:	b410      	push	{r4}
 8008230:	6093      	str	r3, [r2, #8]
 8008232:	da08      	bge.n	8008246 <__sfputc_r+0x1e>
 8008234:	6994      	ldr	r4, [r2, #24]
 8008236:	42a3      	cmp	r3, r4
 8008238:	db01      	blt.n	800823e <__sfputc_r+0x16>
 800823a:	290a      	cmp	r1, #10
 800823c:	d103      	bne.n	8008246 <__sfputc_r+0x1e>
 800823e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008242:	f000 bb6b 	b.w	800891c <__swbuf_r>
 8008246:	6813      	ldr	r3, [r2, #0]
 8008248:	1c58      	adds	r0, r3, #1
 800824a:	6010      	str	r0, [r2, #0]
 800824c:	7019      	strb	r1, [r3, #0]
 800824e:	4608      	mov	r0, r1
 8008250:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008254:	4770      	bx	lr

08008256 <__sfputs_r>:
 8008256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008258:	4606      	mov	r6, r0
 800825a:	460f      	mov	r7, r1
 800825c:	4614      	mov	r4, r2
 800825e:	18d5      	adds	r5, r2, r3
 8008260:	42ac      	cmp	r4, r5
 8008262:	d101      	bne.n	8008268 <__sfputs_r+0x12>
 8008264:	2000      	movs	r0, #0
 8008266:	e007      	b.n	8008278 <__sfputs_r+0x22>
 8008268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800826c:	463a      	mov	r2, r7
 800826e:	4630      	mov	r0, r6
 8008270:	f7ff ffda 	bl	8008228 <__sfputc_r>
 8008274:	1c43      	adds	r3, r0, #1
 8008276:	d1f3      	bne.n	8008260 <__sfputs_r+0xa>
 8008278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800827c <_vfiprintf_r>:
 800827c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008280:	460d      	mov	r5, r1
 8008282:	b09d      	sub	sp, #116	@ 0x74
 8008284:	4614      	mov	r4, r2
 8008286:	4698      	mov	r8, r3
 8008288:	4606      	mov	r6, r0
 800828a:	b118      	cbz	r0, 8008294 <_vfiprintf_r+0x18>
 800828c:	6a03      	ldr	r3, [r0, #32]
 800828e:	b90b      	cbnz	r3, 8008294 <_vfiprintf_r+0x18>
 8008290:	f7ff fd5e 	bl	8007d50 <__sinit>
 8008294:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008296:	07d9      	lsls	r1, r3, #31
 8008298:	d405      	bmi.n	80082a6 <_vfiprintf_r+0x2a>
 800829a:	89ab      	ldrh	r3, [r5, #12]
 800829c:	059a      	lsls	r2, r3, #22
 800829e:	d402      	bmi.n	80082a6 <_vfiprintf_r+0x2a>
 80082a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082a2:	f7ff feb8 	bl	8008016 <__retarget_lock_acquire_recursive>
 80082a6:	89ab      	ldrh	r3, [r5, #12]
 80082a8:	071b      	lsls	r3, r3, #28
 80082aa:	d501      	bpl.n	80082b0 <_vfiprintf_r+0x34>
 80082ac:	692b      	ldr	r3, [r5, #16]
 80082ae:	b99b      	cbnz	r3, 80082d8 <_vfiprintf_r+0x5c>
 80082b0:	4629      	mov	r1, r5
 80082b2:	4630      	mov	r0, r6
 80082b4:	f000 fb70 	bl	8008998 <__swsetup_r>
 80082b8:	b170      	cbz	r0, 80082d8 <_vfiprintf_r+0x5c>
 80082ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082bc:	07dc      	lsls	r4, r3, #31
 80082be:	d504      	bpl.n	80082ca <_vfiprintf_r+0x4e>
 80082c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082c4:	b01d      	add	sp, #116	@ 0x74
 80082c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ca:	89ab      	ldrh	r3, [r5, #12]
 80082cc:	0598      	lsls	r0, r3, #22
 80082ce:	d4f7      	bmi.n	80082c0 <_vfiprintf_r+0x44>
 80082d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082d2:	f7ff fea1 	bl	8008018 <__retarget_lock_release_recursive>
 80082d6:	e7f3      	b.n	80082c0 <_vfiprintf_r+0x44>
 80082d8:	2300      	movs	r3, #0
 80082da:	9309      	str	r3, [sp, #36]	@ 0x24
 80082dc:	2320      	movs	r3, #32
 80082de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80082e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80082e6:	2330      	movs	r3, #48	@ 0x30
 80082e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008498 <_vfiprintf_r+0x21c>
 80082ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80082f0:	f04f 0901 	mov.w	r9, #1
 80082f4:	4623      	mov	r3, r4
 80082f6:	469a      	mov	sl, r3
 80082f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082fc:	b10a      	cbz	r2, 8008302 <_vfiprintf_r+0x86>
 80082fe:	2a25      	cmp	r2, #37	@ 0x25
 8008300:	d1f9      	bne.n	80082f6 <_vfiprintf_r+0x7a>
 8008302:	ebba 0b04 	subs.w	fp, sl, r4
 8008306:	d00b      	beq.n	8008320 <_vfiprintf_r+0xa4>
 8008308:	465b      	mov	r3, fp
 800830a:	4622      	mov	r2, r4
 800830c:	4629      	mov	r1, r5
 800830e:	4630      	mov	r0, r6
 8008310:	f7ff ffa1 	bl	8008256 <__sfputs_r>
 8008314:	3001      	adds	r0, #1
 8008316:	f000 80a7 	beq.w	8008468 <_vfiprintf_r+0x1ec>
 800831a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800831c:	445a      	add	r2, fp
 800831e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008320:	f89a 3000 	ldrb.w	r3, [sl]
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 809f 	beq.w	8008468 <_vfiprintf_r+0x1ec>
 800832a:	2300      	movs	r3, #0
 800832c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008330:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008334:	f10a 0a01 	add.w	sl, sl, #1
 8008338:	9304      	str	r3, [sp, #16]
 800833a:	9307      	str	r3, [sp, #28]
 800833c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008340:	931a      	str	r3, [sp, #104]	@ 0x68
 8008342:	4654      	mov	r4, sl
 8008344:	2205      	movs	r2, #5
 8008346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800834a:	4853      	ldr	r0, [pc, #332]	@ (8008498 <_vfiprintf_r+0x21c>)
 800834c:	f7f7 ff48 	bl	80001e0 <memchr>
 8008350:	9a04      	ldr	r2, [sp, #16]
 8008352:	b9d8      	cbnz	r0, 800838c <_vfiprintf_r+0x110>
 8008354:	06d1      	lsls	r1, r2, #27
 8008356:	bf44      	itt	mi
 8008358:	2320      	movmi	r3, #32
 800835a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800835e:	0713      	lsls	r3, r2, #28
 8008360:	bf44      	itt	mi
 8008362:	232b      	movmi	r3, #43	@ 0x2b
 8008364:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008368:	f89a 3000 	ldrb.w	r3, [sl]
 800836c:	2b2a      	cmp	r3, #42	@ 0x2a
 800836e:	d015      	beq.n	800839c <_vfiprintf_r+0x120>
 8008370:	9a07      	ldr	r2, [sp, #28]
 8008372:	4654      	mov	r4, sl
 8008374:	2000      	movs	r0, #0
 8008376:	f04f 0c0a 	mov.w	ip, #10
 800837a:	4621      	mov	r1, r4
 800837c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008380:	3b30      	subs	r3, #48	@ 0x30
 8008382:	2b09      	cmp	r3, #9
 8008384:	d94b      	bls.n	800841e <_vfiprintf_r+0x1a2>
 8008386:	b1b0      	cbz	r0, 80083b6 <_vfiprintf_r+0x13a>
 8008388:	9207      	str	r2, [sp, #28]
 800838a:	e014      	b.n	80083b6 <_vfiprintf_r+0x13a>
 800838c:	eba0 0308 	sub.w	r3, r0, r8
 8008390:	fa09 f303 	lsl.w	r3, r9, r3
 8008394:	4313      	orrs	r3, r2
 8008396:	9304      	str	r3, [sp, #16]
 8008398:	46a2      	mov	sl, r4
 800839a:	e7d2      	b.n	8008342 <_vfiprintf_r+0xc6>
 800839c:	9b03      	ldr	r3, [sp, #12]
 800839e:	1d19      	adds	r1, r3, #4
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	9103      	str	r1, [sp, #12]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	bfbb      	ittet	lt
 80083a8:	425b      	neglt	r3, r3
 80083aa:	f042 0202 	orrlt.w	r2, r2, #2
 80083ae:	9307      	strge	r3, [sp, #28]
 80083b0:	9307      	strlt	r3, [sp, #28]
 80083b2:	bfb8      	it	lt
 80083b4:	9204      	strlt	r2, [sp, #16]
 80083b6:	7823      	ldrb	r3, [r4, #0]
 80083b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80083ba:	d10a      	bne.n	80083d2 <_vfiprintf_r+0x156>
 80083bc:	7863      	ldrb	r3, [r4, #1]
 80083be:	2b2a      	cmp	r3, #42	@ 0x2a
 80083c0:	d132      	bne.n	8008428 <_vfiprintf_r+0x1ac>
 80083c2:	9b03      	ldr	r3, [sp, #12]
 80083c4:	1d1a      	adds	r2, r3, #4
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	9203      	str	r2, [sp, #12]
 80083ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083ce:	3402      	adds	r4, #2
 80083d0:	9305      	str	r3, [sp, #20]
 80083d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80084a8 <_vfiprintf_r+0x22c>
 80083d6:	7821      	ldrb	r1, [r4, #0]
 80083d8:	2203      	movs	r2, #3
 80083da:	4650      	mov	r0, sl
 80083dc:	f7f7 ff00 	bl	80001e0 <memchr>
 80083e0:	b138      	cbz	r0, 80083f2 <_vfiprintf_r+0x176>
 80083e2:	9b04      	ldr	r3, [sp, #16]
 80083e4:	eba0 000a 	sub.w	r0, r0, sl
 80083e8:	2240      	movs	r2, #64	@ 0x40
 80083ea:	4082      	lsls	r2, r0
 80083ec:	4313      	orrs	r3, r2
 80083ee:	3401      	adds	r4, #1
 80083f0:	9304      	str	r3, [sp, #16]
 80083f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083f6:	4829      	ldr	r0, [pc, #164]	@ (800849c <_vfiprintf_r+0x220>)
 80083f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80083fc:	2206      	movs	r2, #6
 80083fe:	f7f7 feef 	bl	80001e0 <memchr>
 8008402:	2800      	cmp	r0, #0
 8008404:	d03f      	beq.n	8008486 <_vfiprintf_r+0x20a>
 8008406:	4b26      	ldr	r3, [pc, #152]	@ (80084a0 <_vfiprintf_r+0x224>)
 8008408:	bb1b      	cbnz	r3, 8008452 <_vfiprintf_r+0x1d6>
 800840a:	9b03      	ldr	r3, [sp, #12]
 800840c:	3307      	adds	r3, #7
 800840e:	f023 0307 	bic.w	r3, r3, #7
 8008412:	3308      	adds	r3, #8
 8008414:	9303      	str	r3, [sp, #12]
 8008416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008418:	443b      	add	r3, r7
 800841a:	9309      	str	r3, [sp, #36]	@ 0x24
 800841c:	e76a      	b.n	80082f4 <_vfiprintf_r+0x78>
 800841e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008422:	460c      	mov	r4, r1
 8008424:	2001      	movs	r0, #1
 8008426:	e7a8      	b.n	800837a <_vfiprintf_r+0xfe>
 8008428:	2300      	movs	r3, #0
 800842a:	3401      	adds	r4, #1
 800842c:	9305      	str	r3, [sp, #20]
 800842e:	4619      	mov	r1, r3
 8008430:	f04f 0c0a 	mov.w	ip, #10
 8008434:	4620      	mov	r0, r4
 8008436:	f810 2b01 	ldrb.w	r2, [r0], #1
 800843a:	3a30      	subs	r2, #48	@ 0x30
 800843c:	2a09      	cmp	r2, #9
 800843e:	d903      	bls.n	8008448 <_vfiprintf_r+0x1cc>
 8008440:	2b00      	cmp	r3, #0
 8008442:	d0c6      	beq.n	80083d2 <_vfiprintf_r+0x156>
 8008444:	9105      	str	r1, [sp, #20]
 8008446:	e7c4      	b.n	80083d2 <_vfiprintf_r+0x156>
 8008448:	fb0c 2101 	mla	r1, ip, r1, r2
 800844c:	4604      	mov	r4, r0
 800844e:	2301      	movs	r3, #1
 8008450:	e7f0      	b.n	8008434 <_vfiprintf_r+0x1b8>
 8008452:	ab03      	add	r3, sp, #12
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	462a      	mov	r2, r5
 8008458:	4b12      	ldr	r3, [pc, #72]	@ (80084a4 <_vfiprintf_r+0x228>)
 800845a:	a904      	add	r1, sp, #16
 800845c:	4630      	mov	r0, r6
 800845e:	f3af 8000 	nop.w
 8008462:	4607      	mov	r7, r0
 8008464:	1c78      	adds	r0, r7, #1
 8008466:	d1d6      	bne.n	8008416 <_vfiprintf_r+0x19a>
 8008468:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800846a:	07d9      	lsls	r1, r3, #31
 800846c:	d405      	bmi.n	800847a <_vfiprintf_r+0x1fe>
 800846e:	89ab      	ldrh	r3, [r5, #12]
 8008470:	059a      	lsls	r2, r3, #22
 8008472:	d402      	bmi.n	800847a <_vfiprintf_r+0x1fe>
 8008474:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008476:	f7ff fdcf 	bl	8008018 <__retarget_lock_release_recursive>
 800847a:	89ab      	ldrh	r3, [r5, #12]
 800847c:	065b      	lsls	r3, r3, #25
 800847e:	f53f af1f 	bmi.w	80082c0 <_vfiprintf_r+0x44>
 8008482:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008484:	e71e      	b.n	80082c4 <_vfiprintf_r+0x48>
 8008486:	ab03      	add	r3, sp, #12
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	462a      	mov	r2, r5
 800848c:	4b05      	ldr	r3, [pc, #20]	@ (80084a4 <_vfiprintf_r+0x228>)
 800848e:	a904      	add	r1, sp, #16
 8008490:	4630      	mov	r0, r6
 8008492:	f000 f879 	bl	8008588 <_printf_i>
 8008496:	e7e4      	b.n	8008462 <_vfiprintf_r+0x1e6>
 8008498:	08008cc0 	.word	0x08008cc0
 800849c:	08008cca 	.word	0x08008cca
 80084a0:	00000000 	.word	0x00000000
 80084a4:	08008257 	.word	0x08008257
 80084a8:	08008cc6 	.word	0x08008cc6

080084ac <_printf_common>:
 80084ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084b0:	4616      	mov	r6, r2
 80084b2:	4698      	mov	r8, r3
 80084b4:	688a      	ldr	r2, [r1, #8]
 80084b6:	690b      	ldr	r3, [r1, #16]
 80084b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084bc:	4293      	cmp	r3, r2
 80084be:	bfb8      	it	lt
 80084c0:	4613      	movlt	r3, r2
 80084c2:	6033      	str	r3, [r6, #0]
 80084c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80084c8:	4607      	mov	r7, r0
 80084ca:	460c      	mov	r4, r1
 80084cc:	b10a      	cbz	r2, 80084d2 <_printf_common+0x26>
 80084ce:	3301      	adds	r3, #1
 80084d0:	6033      	str	r3, [r6, #0]
 80084d2:	6823      	ldr	r3, [r4, #0]
 80084d4:	0699      	lsls	r1, r3, #26
 80084d6:	bf42      	ittt	mi
 80084d8:	6833      	ldrmi	r3, [r6, #0]
 80084da:	3302      	addmi	r3, #2
 80084dc:	6033      	strmi	r3, [r6, #0]
 80084de:	6825      	ldr	r5, [r4, #0]
 80084e0:	f015 0506 	ands.w	r5, r5, #6
 80084e4:	d106      	bne.n	80084f4 <_printf_common+0x48>
 80084e6:	f104 0a19 	add.w	sl, r4, #25
 80084ea:	68e3      	ldr	r3, [r4, #12]
 80084ec:	6832      	ldr	r2, [r6, #0]
 80084ee:	1a9b      	subs	r3, r3, r2
 80084f0:	42ab      	cmp	r3, r5
 80084f2:	dc26      	bgt.n	8008542 <_printf_common+0x96>
 80084f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80084f8:	6822      	ldr	r2, [r4, #0]
 80084fa:	3b00      	subs	r3, #0
 80084fc:	bf18      	it	ne
 80084fe:	2301      	movne	r3, #1
 8008500:	0692      	lsls	r2, r2, #26
 8008502:	d42b      	bmi.n	800855c <_printf_common+0xb0>
 8008504:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008508:	4641      	mov	r1, r8
 800850a:	4638      	mov	r0, r7
 800850c:	47c8      	blx	r9
 800850e:	3001      	adds	r0, #1
 8008510:	d01e      	beq.n	8008550 <_printf_common+0xa4>
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	6922      	ldr	r2, [r4, #16]
 8008516:	f003 0306 	and.w	r3, r3, #6
 800851a:	2b04      	cmp	r3, #4
 800851c:	bf02      	ittt	eq
 800851e:	68e5      	ldreq	r5, [r4, #12]
 8008520:	6833      	ldreq	r3, [r6, #0]
 8008522:	1aed      	subeq	r5, r5, r3
 8008524:	68a3      	ldr	r3, [r4, #8]
 8008526:	bf0c      	ite	eq
 8008528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800852c:	2500      	movne	r5, #0
 800852e:	4293      	cmp	r3, r2
 8008530:	bfc4      	itt	gt
 8008532:	1a9b      	subgt	r3, r3, r2
 8008534:	18ed      	addgt	r5, r5, r3
 8008536:	2600      	movs	r6, #0
 8008538:	341a      	adds	r4, #26
 800853a:	42b5      	cmp	r5, r6
 800853c:	d11a      	bne.n	8008574 <_printf_common+0xc8>
 800853e:	2000      	movs	r0, #0
 8008540:	e008      	b.n	8008554 <_printf_common+0xa8>
 8008542:	2301      	movs	r3, #1
 8008544:	4652      	mov	r2, sl
 8008546:	4641      	mov	r1, r8
 8008548:	4638      	mov	r0, r7
 800854a:	47c8      	blx	r9
 800854c:	3001      	adds	r0, #1
 800854e:	d103      	bne.n	8008558 <_printf_common+0xac>
 8008550:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008558:	3501      	adds	r5, #1
 800855a:	e7c6      	b.n	80084ea <_printf_common+0x3e>
 800855c:	18e1      	adds	r1, r4, r3
 800855e:	1c5a      	adds	r2, r3, #1
 8008560:	2030      	movs	r0, #48	@ 0x30
 8008562:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008566:	4422      	add	r2, r4
 8008568:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800856c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008570:	3302      	adds	r3, #2
 8008572:	e7c7      	b.n	8008504 <_printf_common+0x58>
 8008574:	2301      	movs	r3, #1
 8008576:	4622      	mov	r2, r4
 8008578:	4641      	mov	r1, r8
 800857a:	4638      	mov	r0, r7
 800857c:	47c8      	blx	r9
 800857e:	3001      	adds	r0, #1
 8008580:	d0e6      	beq.n	8008550 <_printf_common+0xa4>
 8008582:	3601      	adds	r6, #1
 8008584:	e7d9      	b.n	800853a <_printf_common+0x8e>
	...

08008588 <_printf_i>:
 8008588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800858c:	7e0f      	ldrb	r7, [r1, #24]
 800858e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008590:	2f78      	cmp	r7, #120	@ 0x78
 8008592:	4691      	mov	r9, r2
 8008594:	4680      	mov	r8, r0
 8008596:	460c      	mov	r4, r1
 8008598:	469a      	mov	sl, r3
 800859a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800859e:	d807      	bhi.n	80085b0 <_printf_i+0x28>
 80085a0:	2f62      	cmp	r7, #98	@ 0x62
 80085a2:	d80a      	bhi.n	80085ba <_printf_i+0x32>
 80085a4:	2f00      	cmp	r7, #0
 80085a6:	f000 80d1 	beq.w	800874c <_printf_i+0x1c4>
 80085aa:	2f58      	cmp	r7, #88	@ 0x58
 80085ac:	f000 80b8 	beq.w	8008720 <_printf_i+0x198>
 80085b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80085b8:	e03a      	b.n	8008630 <_printf_i+0xa8>
 80085ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80085be:	2b15      	cmp	r3, #21
 80085c0:	d8f6      	bhi.n	80085b0 <_printf_i+0x28>
 80085c2:	a101      	add	r1, pc, #4	@ (adr r1, 80085c8 <_printf_i+0x40>)
 80085c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085c8:	08008621 	.word	0x08008621
 80085cc:	08008635 	.word	0x08008635
 80085d0:	080085b1 	.word	0x080085b1
 80085d4:	080085b1 	.word	0x080085b1
 80085d8:	080085b1 	.word	0x080085b1
 80085dc:	080085b1 	.word	0x080085b1
 80085e0:	08008635 	.word	0x08008635
 80085e4:	080085b1 	.word	0x080085b1
 80085e8:	080085b1 	.word	0x080085b1
 80085ec:	080085b1 	.word	0x080085b1
 80085f0:	080085b1 	.word	0x080085b1
 80085f4:	08008733 	.word	0x08008733
 80085f8:	0800865f 	.word	0x0800865f
 80085fc:	080086ed 	.word	0x080086ed
 8008600:	080085b1 	.word	0x080085b1
 8008604:	080085b1 	.word	0x080085b1
 8008608:	08008755 	.word	0x08008755
 800860c:	080085b1 	.word	0x080085b1
 8008610:	0800865f 	.word	0x0800865f
 8008614:	080085b1 	.word	0x080085b1
 8008618:	080085b1 	.word	0x080085b1
 800861c:	080086f5 	.word	0x080086f5
 8008620:	6833      	ldr	r3, [r6, #0]
 8008622:	1d1a      	adds	r2, r3, #4
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6032      	str	r2, [r6, #0]
 8008628:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800862c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008630:	2301      	movs	r3, #1
 8008632:	e09c      	b.n	800876e <_printf_i+0x1e6>
 8008634:	6833      	ldr	r3, [r6, #0]
 8008636:	6820      	ldr	r0, [r4, #0]
 8008638:	1d19      	adds	r1, r3, #4
 800863a:	6031      	str	r1, [r6, #0]
 800863c:	0606      	lsls	r6, r0, #24
 800863e:	d501      	bpl.n	8008644 <_printf_i+0xbc>
 8008640:	681d      	ldr	r5, [r3, #0]
 8008642:	e003      	b.n	800864c <_printf_i+0xc4>
 8008644:	0645      	lsls	r5, r0, #25
 8008646:	d5fb      	bpl.n	8008640 <_printf_i+0xb8>
 8008648:	f9b3 5000 	ldrsh.w	r5, [r3]
 800864c:	2d00      	cmp	r5, #0
 800864e:	da03      	bge.n	8008658 <_printf_i+0xd0>
 8008650:	232d      	movs	r3, #45	@ 0x2d
 8008652:	426d      	negs	r5, r5
 8008654:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008658:	4858      	ldr	r0, [pc, #352]	@ (80087bc <_printf_i+0x234>)
 800865a:	230a      	movs	r3, #10
 800865c:	e011      	b.n	8008682 <_printf_i+0xfa>
 800865e:	6821      	ldr	r1, [r4, #0]
 8008660:	6833      	ldr	r3, [r6, #0]
 8008662:	0608      	lsls	r0, r1, #24
 8008664:	f853 5b04 	ldr.w	r5, [r3], #4
 8008668:	d402      	bmi.n	8008670 <_printf_i+0xe8>
 800866a:	0649      	lsls	r1, r1, #25
 800866c:	bf48      	it	mi
 800866e:	b2ad      	uxthmi	r5, r5
 8008670:	2f6f      	cmp	r7, #111	@ 0x6f
 8008672:	4852      	ldr	r0, [pc, #328]	@ (80087bc <_printf_i+0x234>)
 8008674:	6033      	str	r3, [r6, #0]
 8008676:	bf14      	ite	ne
 8008678:	230a      	movne	r3, #10
 800867a:	2308      	moveq	r3, #8
 800867c:	2100      	movs	r1, #0
 800867e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008682:	6866      	ldr	r6, [r4, #4]
 8008684:	60a6      	str	r6, [r4, #8]
 8008686:	2e00      	cmp	r6, #0
 8008688:	db05      	blt.n	8008696 <_printf_i+0x10e>
 800868a:	6821      	ldr	r1, [r4, #0]
 800868c:	432e      	orrs	r6, r5
 800868e:	f021 0104 	bic.w	r1, r1, #4
 8008692:	6021      	str	r1, [r4, #0]
 8008694:	d04b      	beq.n	800872e <_printf_i+0x1a6>
 8008696:	4616      	mov	r6, r2
 8008698:	fbb5 f1f3 	udiv	r1, r5, r3
 800869c:	fb03 5711 	mls	r7, r3, r1, r5
 80086a0:	5dc7      	ldrb	r7, [r0, r7]
 80086a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086a6:	462f      	mov	r7, r5
 80086a8:	42bb      	cmp	r3, r7
 80086aa:	460d      	mov	r5, r1
 80086ac:	d9f4      	bls.n	8008698 <_printf_i+0x110>
 80086ae:	2b08      	cmp	r3, #8
 80086b0:	d10b      	bne.n	80086ca <_printf_i+0x142>
 80086b2:	6823      	ldr	r3, [r4, #0]
 80086b4:	07df      	lsls	r7, r3, #31
 80086b6:	d508      	bpl.n	80086ca <_printf_i+0x142>
 80086b8:	6923      	ldr	r3, [r4, #16]
 80086ba:	6861      	ldr	r1, [r4, #4]
 80086bc:	4299      	cmp	r1, r3
 80086be:	bfde      	ittt	le
 80086c0:	2330      	movle	r3, #48	@ 0x30
 80086c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086c6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80086ca:	1b92      	subs	r2, r2, r6
 80086cc:	6122      	str	r2, [r4, #16]
 80086ce:	f8cd a000 	str.w	sl, [sp]
 80086d2:	464b      	mov	r3, r9
 80086d4:	aa03      	add	r2, sp, #12
 80086d6:	4621      	mov	r1, r4
 80086d8:	4640      	mov	r0, r8
 80086da:	f7ff fee7 	bl	80084ac <_printf_common>
 80086de:	3001      	adds	r0, #1
 80086e0:	d14a      	bne.n	8008778 <_printf_i+0x1f0>
 80086e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086e6:	b004      	add	sp, #16
 80086e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ec:	6823      	ldr	r3, [r4, #0]
 80086ee:	f043 0320 	orr.w	r3, r3, #32
 80086f2:	6023      	str	r3, [r4, #0]
 80086f4:	4832      	ldr	r0, [pc, #200]	@ (80087c0 <_printf_i+0x238>)
 80086f6:	2778      	movs	r7, #120	@ 0x78
 80086f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	6831      	ldr	r1, [r6, #0]
 8008700:	061f      	lsls	r7, r3, #24
 8008702:	f851 5b04 	ldr.w	r5, [r1], #4
 8008706:	d402      	bmi.n	800870e <_printf_i+0x186>
 8008708:	065f      	lsls	r7, r3, #25
 800870a:	bf48      	it	mi
 800870c:	b2ad      	uxthmi	r5, r5
 800870e:	6031      	str	r1, [r6, #0]
 8008710:	07d9      	lsls	r1, r3, #31
 8008712:	bf44      	itt	mi
 8008714:	f043 0320 	orrmi.w	r3, r3, #32
 8008718:	6023      	strmi	r3, [r4, #0]
 800871a:	b11d      	cbz	r5, 8008724 <_printf_i+0x19c>
 800871c:	2310      	movs	r3, #16
 800871e:	e7ad      	b.n	800867c <_printf_i+0xf4>
 8008720:	4826      	ldr	r0, [pc, #152]	@ (80087bc <_printf_i+0x234>)
 8008722:	e7e9      	b.n	80086f8 <_printf_i+0x170>
 8008724:	6823      	ldr	r3, [r4, #0]
 8008726:	f023 0320 	bic.w	r3, r3, #32
 800872a:	6023      	str	r3, [r4, #0]
 800872c:	e7f6      	b.n	800871c <_printf_i+0x194>
 800872e:	4616      	mov	r6, r2
 8008730:	e7bd      	b.n	80086ae <_printf_i+0x126>
 8008732:	6833      	ldr	r3, [r6, #0]
 8008734:	6825      	ldr	r5, [r4, #0]
 8008736:	6961      	ldr	r1, [r4, #20]
 8008738:	1d18      	adds	r0, r3, #4
 800873a:	6030      	str	r0, [r6, #0]
 800873c:	062e      	lsls	r6, r5, #24
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	d501      	bpl.n	8008746 <_printf_i+0x1be>
 8008742:	6019      	str	r1, [r3, #0]
 8008744:	e002      	b.n	800874c <_printf_i+0x1c4>
 8008746:	0668      	lsls	r0, r5, #25
 8008748:	d5fb      	bpl.n	8008742 <_printf_i+0x1ba>
 800874a:	8019      	strh	r1, [r3, #0]
 800874c:	2300      	movs	r3, #0
 800874e:	6123      	str	r3, [r4, #16]
 8008750:	4616      	mov	r6, r2
 8008752:	e7bc      	b.n	80086ce <_printf_i+0x146>
 8008754:	6833      	ldr	r3, [r6, #0]
 8008756:	1d1a      	adds	r2, r3, #4
 8008758:	6032      	str	r2, [r6, #0]
 800875a:	681e      	ldr	r6, [r3, #0]
 800875c:	6862      	ldr	r2, [r4, #4]
 800875e:	2100      	movs	r1, #0
 8008760:	4630      	mov	r0, r6
 8008762:	f7f7 fd3d 	bl	80001e0 <memchr>
 8008766:	b108      	cbz	r0, 800876c <_printf_i+0x1e4>
 8008768:	1b80      	subs	r0, r0, r6
 800876a:	6060      	str	r0, [r4, #4]
 800876c:	6863      	ldr	r3, [r4, #4]
 800876e:	6123      	str	r3, [r4, #16]
 8008770:	2300      	movs	r3, #0
 8008772:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008776:	e7aa      	b.n	80086ce <_printf_i+0x146>
 8008778:	6923      	ldr	r3, [r4, #16]
 800877a:	4632      	mov	r2, r6
 800877c:	4649      	mov	r1, r9
 800877e:	4640      	mov	r0, r8
 8008780:	47d0      	blx	sl
 8008782:	3001      	adds	r0, #1
 8008784:	d0ad      	beq.n	80086e2 <_printf_i+0x15a>
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	079b      	lsls	r3, r3, #30
 800878a:	d413      	bmi.n	80087b4 <_printf_i+0x22c>
 800878c:	68e0      	ldr	r0, [r4, #12]
 800878e:	9b03      	ldr	r3, [sp, #12]
 8008790:	4298      	cmp	r0, r3
 8008792:	bfb8      	it	lt
 8008794:	4618      	movlt	r0, r3
 8008796:	e7a6      	b.n	80086e6 <_printf_i+0x15e>
 8008798:	2301      	movs	r3, #1
 800879a:	4632      	mov	r2, r6
 800879c:	4649      	mov	r1, r9
 800879e:	4640      	mov	r0, r8
 80087a0:	47d0      	blx	sl
 80087a2:	3001      	adds	r0, #1
 80087a4:	d09d      	beq.n	80086e2 <_printf_i+0x15a>
 80087a6:	3501      	adds	r5, #1
 80087a8:	68e3      	ldr	r3, [r4, #12]
 80087aa:	9903      	ldr	r1, [sp, #12]
 80087ac:	1a5b      	subs	r3, r3, r1
 80087ae:	42ab      	cmp	r3, r5
 80087b0:	dcf2      	bgt.n	8008798 <_printf_i+0x210>
 80087b2:	e7eb      	b.n	800878c <_printf_i+0x204>
 80087b4:	2500      	movs	r5, #0
 80087b6:	f104 0619 	add.w	r6, r4, #25
 80087ba:	e7f5      	b.n	80087a8 <_printf_i+0x220>
 80087bc:	08008cd1 	.word	0x08008cd1
 80087c0:	08008ce2 	.word	0x08008ce2

080087c4 <__sflush_r>:
 80087c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087cc:	0716      	lsls	r6, r2, #28
 80087ce:	4605      	mov	r5, r0
 80087d0:	460c      	mov	r4, r1
 80087d2:	d454      	bmi.n	800887e <__sflush_r+0xba>
 80087d4:	684b      	ldr	r3, [r1, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	dc02      	bgt.n	80087e0 <__sflush_r+0x1c>
 80087da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80087dc:	2b00      	cmp	r3, #0
 80087de:	dd48      	ble.n	8008872 <__sflush_r+0xae>
 80087e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087e2:	2e00      	cmp	r6, #0
 80087e4:	d045      	beq.n	8008872 <__sflush_r+0xae>
 80087e6:	2300      	movs	r3, #0
 80087e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80087ec:	682f      	ldr	r7, [r5, #0]
 80087ee:	6a21      	ldr	r1, [r4, #32]
 80087f0:	602b      	str	r3, [r5, #0]
 80087f2:	d030      	beq.n	8008856 <__sflush_r+0x92>
 80087f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80087f6:	89a3      	ldrh	r3, [r4, #12]
 80087f8:	0759      	lsls	r1, r3, #29
 80087fa:	d505      	bpl.n	8008808 <__sflush_r+0x44>
 80087fc:	6863      	ldr	r3, [r4, #4]
 80087fe:	1ad2      	subs	r2, r2, r3
 8008800:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008802:	b10b      	cbz	r3, 8008808 <__sflush_r+0x44>
 8008804:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008806:	1ad2      	subs	r2, r2, r3
 8008808:	2300      	movs	r3, #0
 800880a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800880c:	6a21      	ldr	r1, [r4, #32]
 800880e:	4628      	mov	r0, r5
 8008810:	47b0      	blx	r6
 8008812:	1c43      	adds	r3, r0, #1
 8008814:	89a3      	ldrh	r3, [r4, #12]
 8008816:	d106      	bne.n	8008826 <__sflush_r+0x62>
 8008818:	6829      	ldr	r1, [r5, #0]
 800881a:	291d      	cmp	r1, #29
 800881c:	d82b      	bhi.n	8008876 <__sflush_r+0xb2>
 800881e:	4a2a      	ldr	r2, [pc, #168]	@ (80088c8 <__sflush_r+0x104>)
 8008820:	40ca      	lsrs	r2, r1
 8008822:	07d6      	lsls	r6, r2, #31
 8008824:	d527      	bpl.n	8008876 <__sflush_r+0xb2>
 8008826:	2200      	movs	r2, #0
 8008828:	6062      	str	r2, [r4, #4]
 800882a:	04d9      	lsls	r1, r3, #19
 800882c:	6922      	ldr	r2, [r4, #16]
 800882e:	6022      	str	r2, [r4, #0]
 8008830:	d504      	bpl.n	800883c <__sflush_r+0x78>
 8008832:	1c42      	adds	r2, r0, #1
 8008834:	d101      	bne.n	800883a <__sflush_r+0x76>
 8008836:	682b      	ldr	r3, [r5, #0]
 8008838:	b903      	cbnz	r3, 800883c <__sflush_r+0x78>
 800883a:	6560      	str	r0, [r4, #84]	@ 0x54
 800883c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800883e:	602f      	str	r7, [r5, #0]
 8008840:	b1b9      	cbz	r1, 8008872 <__sflush_r+0xae>
 8008842:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008846:	4299      	cmp	r1, r3
 8008848:	d002      	beq.n	8008850 <__sflush_r+0x8c>
 800884a:	4628      	mov	r0, r5
 800884c:	f7ff fbf4 	bl	8008038 <_free_r>
 8008850:	2300      	movs	r3, #0
 8008852:	6363      	str	r3, [r4, #52]	@ 0x34
 8008854:	e00d      	b.n	8008872 <__sflush_r+0xae>
 8008856:	2301      	movs	r3, #1
 8008858:	4628      	mov	r0, r5
 800885a:	47b0      	blx	r6
 800885c:	4602      	mov	r2, r0
 800885e:	1c50      	adds	r0, r2, #1
 8008860:	d1c9      	bne.n	80087f6 <__sflush_r+0x32>
 8008862:	682b      	ldr	r3, [r5, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d0c6      	beq.n	80087f6 <__sflush_r+0x32>
 8008868:	2b1d      	cmp	r3, #29
 800886a:	d001      	beq.n	8008870 <__sflush_r+0xac>
 800886c:	2b16      	cmp	r3, #22
 800886e:	d11e      	bne.n	80088ae <__sflush_r+0xea>
 8008870:	602f      	str	r7, [r5, #0]
 8008872:	2000      	movs	r0, #0
 8008874:	e022      	b.n	80088bc <__sflush_r+0xf8>
 8008876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800887a:	b21b      	sxth	r3, r3
 800887c:	e01b      	b.n	80088b6 <__sflush_r+0xf2>
 800887e:	690f      	ldr	r7, [r1, #16]
 8008880:	2f00      	cmp	r7, #0
 8008882:	d0f6      	beq.n	8008872 <__sflush_r+0xae>
 8008884:	0793      	lsls	r3, r2, #30
 8008886:	680e      	ldr	r6, [r1, #0]
 8008888:	bf08      	it	eq
 800888a:	694b      	ldreq	r3, [r1, #20]
 800888c:	600f      	str	r7, [r1, #0]
 800888e:	bf18      	it	ne
 8008890:	2300      	movne	r3, #0
 8008892:	eba6 0807 	sub.w	r8, r6, r7
 8008896:	608b      	str	r3, [r1, #8]
 8008898:	f1b8 0f00 	cmp.w	r8, #0
 800889c:	dde9      	ble.n	8008872 <__sflush_r+0xae>
 800889e:	6a21      	ldr	r1, [r4, #32]
 80088a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80088a2:	4643      	mov	r3, r8
 80088a4:	463a      	mov	r2, r7
 80088a6:	4628      	mov	r0, r5
 80088a8:	47b0      	blx	r6
 80088aa:	2800      	cmp	r0, #0
 80088ac:	dc08      	bgt.n	80088c0 <__sflush_r+0xfc>
 80088ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088b6:	81a3      	strh	r3, [r4, #12]
 80088b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088c0:	4407      	add	r7, r0
 80088c2:	eba8 0800 	sub.w	r8, r8, r0
 80088c6:	e7e7      	b.n	8008898 <__sflush_r+0xd4>
 80088c8:	20400001 	.word	0x20400001

080088cc <_fflush_r>:
 80088cc:	b538      	push	{r3, r4, r5, lr}
 80088ce:	690b      	ldr	r3, [r1, #16]
 80088d0:	4605      	mov	r5, r0
 80088d2:	460c      	mov	r4, r1
 80088d4:	b913      	cbnz	r3, 80088dc <_fflush_r+0x10>
 80088d6:	2500      	movs	r5, #0
 80088d8:	4628      	mov	r0, r5
 80088da:	bd38      	pop	{r3, r4, r5, pc}
 80088dc:	b118      	cbz	r0, 80088e6 <_fflush_r+0x1a>
 80088de:	6a03      	ldr	r3, [r0, #32]
 80088e0:	b90b      	cbnz	r3, 80088e6 <_fflush_r+0x1a>
 80088e2:	f7ff fa35 	bl	8007d50 <__sinit>
 80088e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d0f3      	beq.n	80088d6 <_fflush_r+0xa>
 80088ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80088f0:	07d0      	lsls	r0, r2, #31
 80088f2:	d404      	bmi.n	80088fe <_fflush_r+0x32>
 80088f4:	0599      	lsls	r1, r3, #22
 80088f6:	d402      	bmi.n	80088fe <_fflush_r+0x32>
 80088f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088fa:	f7ff fb8c 	bl	8008016 <__retarget_lock_acquire_recursive>
 80088fe:	4628      	mov	r0, r5
 8008900:	4621      	mov	r1, r4
 8008902:	f7ff ff5f 	bl	80087c4 <__sflush_r>
 8008906:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008908:	07da      	lsls	r2, r3, #31
 800890a:	4605      	mov	r5, r0
 800890c:	d4e4      	bmi.n	80088d8 <_fflush_r+0xc>
 800890e:	89a3      	ldrh	r3, [r4, #12]
 8008910:	059b      	lsls	r3, r3, #22
 8008912:	d4e1      	bmi.n	80088d8 <_fflush_r+0xc>
 8008914:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008916:	f7ff fb7f 	bl	8008018 <__retarget_lock_release_recursive>
 800891a:	e7dd      	b.n	80088d8 <_fflush_r+0xc>

0800891c <__swbuf_r>:
 800891c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891e:	460e      	mov	r6, r1
 8008920:	4614      	mov	r4, r2
 8008922:	4605      	mov	r5, r0
 8008924:	b118      	cbz	r0, 800892e <__swbuf_r+0x12>
 8008926:	6a03      	ldr	r3, [r0, #32]
 8008928:	b90b      	cbnz	r3, 800892e <__swbuf_r+0x12>
 800892a:	f7ff fa11 	bl	8007d50 <__sinit>
 800892e:	69a3      	ldr	r3, [r4, #24]
 8008930:	60a3      	str	r3, [r4, #8]
 8008932:	89a3      	ldrh	r3, [r4, #12]
 8008934:	071a      	lsls	r2, r3, #28
 8008936:	d501      	bpl.n	800893c <__swbuf_r+0x20>
 8008938:	6923      	ldr	r3, [r4, #16]
 800893a:	b943      	cbnz	r3, 800894e <__swbuf_r+0x32>
 800893c:	4621      	mov	r1, r4
 800893e:	4628      	mov	r0, r5
 8008940:	f000 f82a 	bl	8008998 <__swsetup_r>
 8008944:	b118      	cbz	r0, 800894e <__swbuf_r+0x32>
 8008946:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800894a:	4638      	mov	r0, r7
 800894c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	6922      	ldr	r2, [r4, #16]
 8008952:	1a98      	subs	r0, r3, r2
 8008954:	6963      	ldr	r3, [r4, #20]
 8008956:	b2f6      	uxtb	r6, r6
 8008958:	4283      	cmp	r3, r0
 800895a:	4637      	mov	r7, r6
 800895c:	dc05      	bgt.n	800896a <__swbuf_r+0x4e>
 800895e:	4621      	mov	r1, r4
 8008960:	4628      	mov	r0, r5
 8008962:	f7ff ffb3 	bl	80088cc <_fflush_r>
 8008966:	2800      	cmp	r0, #0
 8008968:	d1ed      	bne.n	8008946 <__swbuf_r+0x2a>
 800896a:	68a3      	ldr	r3, [r4, #8]
 800896c:	3b01      	subs	r3, #1
 800896e:	60a3      	str	r3, [r4, #8]
 8008970:	6823      	ldr	r3, [r4, #0]
 8008972:	1c5a      	adds	r2, r3, #1
 8008974:	6022      	str	r2, [r4, #0]
 8008976:	701e      	strb	r6, [r3, #0]
 8008978:	6962      	ldr	r2, [r4, #20]
 800897a:	1c43      	adds	r3, r0, #1
 800897c:	429a      	cmp	r2, r3
 800897e:	d004      	beq.n	800898a <__swbuf_r+0x6e>
 8008980:	89a3      	ldrh	r3, [r4, #12]
 8008982:	07db      	lsls	r3, r3, #31
 8008984:	d5e1      	bpl.n	800894a <__swbuf_r+0x2e>
 8008986:	2e0a      	cmp	r6, #10
 8008988:	d1df      	bne.n	800894a <__swbuf_r+0x2e>
 800898a:	4621      	mov	r1, r4
 800898c:	4628      	mov	r0, r5
 800898e:	f7ff ff9d 	bl	80088cc <_fflush_r>
 8008992:	2800      	cmp	r0, #0
 8008994:	d0d9      	beq.n	800894a <__swbuf_r+0x2e>
 8008996:	e7d6      	b.n	8008946 <__swbuf_r+0x2a>

08008998 <__swsetup_r>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4b29      	ldr	r3, [pc, #164]	@ (8008a40 <__swsetup_r+0xa8>)
 800899c:	4605      	mov	r5, r0
 800899e:	6818      	ldr	r0, [r3, #0]
 80089a0:	460c      	mov	r4, r1
 80089a2:	b118      	cbz	r0, 80089ac <__swsetup_r+0x14>
 80089a4:	6a03      	ldr	r3, [r0, #32]
 80089a6:	b90b      	cbnz	r3, 80089ac <__swsetup_r+0x14>
 80089a8:	f7ff f9d2 	bl	8007d50 <__sinit>
 80089ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089b0:	0719      	lsls	r1, r3, #28
 80089b2:	d422      	bmi.n	80089fa <__swsetup_r+0x62>
 80089b4:	06da      	lsls	r2, r3, #27
 80089b6:	d407      	bmi.n	80089c8 <__swsetup_r+0x30>
 80089b8:	2209      	movs	r2, #9
 80089ba:	602a      	str	r2, [r5, #0]
 80089bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089c0:	81a3      	strh	r3, [r4, #12]
 80089c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089c6:	e033      	b.n	8008a30 <__swsetup_r+0x98>
 80089c8:	0758      	lsls	r0, r3, #29
 80089ca:	d512      	bpl.n	80089f2 <__swsetup_r+0x5a>
 80089cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089ce:	b141      	cbz	r1, 80089e2 <__swsetup_r+0x4a>
 80089d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089d4:	4299      	cmp	r1, r3
 80089d6:	d002      	beq.n	80089de <__swsetup_r+0x46>
 80089d8:	4628      	mov	r0, r5
 80089da:	f7ff fb2d 	bl	8008038 <_free_r>
 80089de:	2300      	movs	r3, #0
 80089e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80089e2:	89a3      	ldrh	r3, [r4, #12]
 80089e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80089e8:	81a3      	strh	r3, [r4, #12]
 80089ea:	2300      	movs	r3, #0
 80089ec:	6063      	str	r3, [r4, #4]
 80089ee:	6923      	ldr	r3, [r4, #16]
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	89a3      	ldrh	r3, [r4, #12]
 80089f4:	f043 0308 	orr.w	r3, r3, #8
 80089f8:	81a3      	strh	r3, [r4, #12]
 80089fa:	6923      	ldr	r3, [r4, #16]
 80089fc:	b94b      	cbnz	r3, 8008a12 <__swsetup_r+0x7a>
 80089fe:	89a3      	ldrh	r3, [r4, #12]
 8008a00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a08:	d003      	beq.n	8008a12 <__swsetup_r+0x7a>
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	f000 f84f 	bl	8008ab0 <__smakebuf_r>
 8008a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a16:	f013 0201 	ands.w	r2, r3, #1
 8008a1a:	d00a      	beq.n	8008a32 <__swsetup_r+0x9a>
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	60a2      	str	r2, [r4, #8]
 8008a20:	6962      	ldr	r2, [r4, #20]
 8008a22:	4252      	negs	r2, r2
 8008a24:	61a2      	str	r2, [r4, #24]
 8008a26:	6922      	ldr	r2, [r4, #16]
 8008a28:	b942      	cbnz	r2, 8008a3c <__swsetup_r+0xa4>
 8008a2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a2e:	d1c5      	bne.n	80089bc <__swsetup_r+0x24>
 8008a30:	bd38      	pop	{r3, r4, r5, pc}
 8008a32:	0799      	lsls	r1, r3, #30
 8008a34:	bf58      	it	pl
 8008a36:	6962      	ldrpl	r2, [r4, #20]
 8008a38:	60a2      	str	r2, [r4, #8]
 8008a3a:	e7f4      	b.n	8008a26 <__swsetup_r+0x8e>
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	e7f7      	b.n	8008a30 <__swsetup_r+0x98>
 8008a40:	2000001c 	.word	0x2000001c

08008a44 <_sbrk_r>:
 8008a44:	b538      	push	{r3, r4, r5, lr}
 8008a46:	4d06      	ldr	r5, [pc, #24]	@ (8008a60 <_sbrk_r+0x1c>)
 8008a48:	2300      	movs	r3, #0
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	4608      	mov	r0, r1
 8008a4e:	602b      	str	r3, [r5, #0]
 8008a50:	f7f8 fbc4 	bl	80011dc <_sbrk>
 8008a54:	1c43      	adds	r3, r0, #1
 8008a56:	d102      	bne.n	8008a5e <_sbrk_r+0x1a>
 8008a58:	682b      	ldr	r3, [r5, #0]
 8008a5a:	b103      	cbz	r3, 8008a5e <_sbrk_r+0x1a>
 8008a5c:	6023      	str	r3, [r4, #0]
 8008a5e:	bd38      	pop	{r3, r4, r5, pc}
 8008a60:	20004d94 	.word	0x20004d94

08008a64 <__swhatbuf_r>:
 8008a64:	b570      	push	{r4, r5, r6, lr}
 8008a66:	460c      	mov	r4, r1
 8008a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a6c:	2900      	cmp	r1, #0
 8008a6e:	b096      	sub	sp, #88	@ 0x58
 8008a70:	4615      	mov	r5, r2
 8008a72:	461e      	mov	r6, r3
 8008a74:	da0d      	bge.n	8008a92 <__swhatbuf_r+0x2e>
 8008a76:	89a3      	ldrh	r3, [r4, #12]
 8008a78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a7c:	f04f 0100 	mov.w	r1, #0
 8008a80:	bf14      	ite	ne
 8008a82:	2340      	movne	r3, #64	@ 0x40
 8008a84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a88:	2000      	movs	r0, #0
 8008a8a:	6031      	str	r1, [r6, #0]
 8008a8c:	602b      	str	r3, [r5, #0]
 8008a8e:	b016      	add	sp, #88	@ 0x58
 8008a90:	bd70      	pop	{r4, r5, r6, pc}
 8008a92:	466a      	mov	r2, sp
 8008a94:	f000 f848 	bl	8008b28 <_fstat_r>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	dbec      	blt.n	8008a76 <__swhatbuf_r+0x12>
 8008a9c:	9901      	ldr	r1, [sp, #4]
 8008a9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008aa2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008aa6:	4259      	negs	r1, r3
 8008aa8:	4159      	adcs	r1, r3
 8008aaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008aae:	e7eb      	b.n	8008a88 <__swhatbuf_r+0x24>

08008ab0 <__smakebuf_r>:
 8008ab0:	898b      	ldrh	r3, [r1, #12]
 8008ab2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ab4:	079d      	lsls	r5, r3, #30
 8008ab6:	4606      	mov	r6, r0
 8008ab8:	460c      	mov	r4, r1
 8008aba:	d507      	bpl.n	8008acc <__smakebuf_r+0x1c>
 8008abc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ac0:	6023      	str	r3, [r4, #0]
 8008ac2:	6123      	str	r3, [r4, #16]
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	6163      	str	r3, [r4, #20]
 8008ac8:	b003      	add	sp, #12
 8008aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008acc:	ab01      	add	r3, sp, #4
 8008ace:	466a      	mov	r2, sp
 8008ad0:	f7ff ffc8 	bl	8008a64 <__swhatbuf_r>
 8008ad4:	9f00      	ldr	r7, [sp, #0]
 8008ad6:	4605      	mov	r5, r0
 8008ad8:	4639      	mov	r1, r7
 8008ada:	4630      	mov	r0, r6
 8008adc:	f7ff fb18 	bl	8008110 <_malloc_r>
 8008ae0:	b948      	cbnz	r0, 8008af6 <__smakebuf_r+0x46>
 8008ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ae6:	059a      	lsls	r2, r3, #22
 8008ae8:	d4ee      	bmi.n	8008ac8 <__smakebuf_r+0x18>
 8008aea:	f023 0303 	bic.w	r3, r3, #3
 8008aee:	f043 0302 	orr.w	r3, r3, #2
 8008af2:	81a3      	strh	r3, [r4, #12]
 8008af4:	e7e2      	b.n	8008abc <__smakebuf_r+0xc>
 8008af6:	89a3      	ldrh	r3, [r4, #12]
 8008af8:	6020      	str	r0, [r4, #0]
 8008afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008afe:	81a3      	strh	r3, [r4, #12]
 8008b00:	9b01      	ldr	r3, [sp, #4]
 8008b02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b06:	b15b      	cbz	r3, 8008b20 <__smakebuf_r+0x70>
 8008b08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	f000 f81d 	bl	8008b4c <_isatty_r>
 8008b12:	b128      	cbz	r0, 8008b20 <__smakebuf_r+0x70>
 8008b14:	89a3      	ldrh	r3, [r4, #12]
 8008b16:	f023 0303 	bic.w	r3, r3, #3
 8008b1a:	f043 0301 	orr.w	r3, r3, #1
 8008b1e:	81a3      	strh	r3, [r4, #12]
 8008b20:	89a3      	ldrh	r3, [r4, #12]
 8008b22:	431d      	orrs	r5, r3
 8008b24:	81a5      	strh	r5, [r4, #12]
 8008b26:	e7cf      	b.n	8008ac8 <__smakebuf_r+0x18>

08008b28 <_fstat_r>:
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	4d07      	ldr	r5, [pc, #28]	@ (8008b48 <_fstat_r+0x20>)
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4608      	mov	r0, r1
 8008b32:	4611      	mov	r1, r2
 8008b34:	602b      	str	r3, [r5, #0]
 8008b36:	f7f8 fb28 	bl	800118a <_fstat>
 8008b3a:	1c43      	adds	r3, r0, #1
 8008b3c:	d102      	bne.n	8008b44 <_fstat_r+0x1c>
 8008b3e:	682b      	ldr	r3, [r5, #0]
 8008b40:	b103      	cbz	r3, 8008b44 <_fstat_r+0x1c>
 8008b42:	6023      	str	r3, [r4, #0]
 8008b44:	bd38      	pop	{r3, r4, r5, pc}
 8008b46:	bf00      	nop
 8008b48:	20004d94 	.word	0x20004d94

08008b4c <_isatty_r>:
 8008b4c:	b538      	push	{r3, r4, r5, lr}
 8008b4e:	4d06      	ldr	r5, [pc, #24]	@ (8008b68 <_isatty_r+0x1c>)
 8008b50:	2300      	movs	r3, #0
 8008b52:	4604      	mov	r4, r0
 8008b54:	4608      	mov	r0, r1
 8008b56:	602b      	str	r3, [r5, #0]
 8008b58:	f7f8 fb27 	bl	80011aa <_isatty>
 8008b5c:	1c43      	adds	r3, r0, #1
 8008b5e:	d102      	bne.n	8008b66 <_isatty_r+0x1a>
 8008b60:	682b      	ldr	r3, [r5, #0]
 8008b62:	b103      	cbz	r3, 8008b66 <_isatty_r+0x1a>
 8008b64:	6023      	str	r3, [r4, #0]
 8008b66:	bd38      	pop	{r3, r4, r5, pc}
 8008b68:	20004d94 	.word	0x20004d94

08008b6c <_init>:
 8008b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6e:	bf00      	nop
 8008b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b72:	bc08      	pop	{r3}
 8008b74:	469e      	mov	lr, r3
 8008b76:	4770      	bx	lr

08008b78 <_fini>:
 8008b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7a:	bf00      	nop
 8008b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b7e:	bc08      	pop	{r3}
 8008b80:	469e      	mov	lr, r3
 8008b82:	4770      	bx	lr
