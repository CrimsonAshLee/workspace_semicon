
Project_Personal_VEHICLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a30  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006bd0  08006bd0  00007bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c68  08006c68  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006c68  08006c68  00007c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c70  08006c70  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c70  08006c70  00007c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c74  08006c74  00007c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006c78  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c74  20000060  08006cd8  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004cd4  08006cd8  00008cd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ea7  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b31  00000000  00000000  00021f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001540  00000000  00000000  00025a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000106e  00000000  00000000  00026fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019006  00000000  00000000  00028016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000176e8  00000000  00000000  0004101c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098862  00000000  00000000  00058704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0f66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b00  00000000  00000000  000f0fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f6aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006bb8 	.word	0x08006bb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08006bb8 	.word	0x08006bb8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <HAL_UART_RxCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
//  if (huart->Instance == USART2)
//  {
  HAL_UART_Receive_IT(&huart2, &rx_data, sizeof(rx_data));  // 다음 수신 준비 // 디버그용
 8000514:	2201      	movs	r2, #1
 8000516:	493f      	ldr	r1, [pc, #252]	@ (8000614 <HAL_UART_RxCpltCallback+0x108>)
 8000518:	483f      	ldr	r0, [pc, #252]	@ (8000618 <HAL_UART_RxCpltCallback+0x10c>)
 800051a:	f002 fd33 	bl	8002f84 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &rx_data, sizeof(rx_data));  // 블루투스
 800051e:	2201      	movs	r2, #1
 8000520:	493c      	ldr	r1, [pc, #240]	@ (8000614 <HAL_UART_RxCpltCallback+0x108>)
 8000522:	483e      	ldr	r0, [pc, #248]	@ (800061c <HAL_UART_RxCpltCallback+0x110>)
 8000524:	f002 fd2e 	bl	8002f84 <HAL_UART_Receive_IT>
    switch (rx_data)
 8000528:	4b3a      	ldr	r3, [pc, #232]	@ (8000614 <HAL_UART_RxCpltCallback+0x108>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	3b42      	subs	r3, #66	@ 0x42
 800052e:	2b16      	cmp	r3, #22
 8000530:	d86c      	bhi.n	800060c <HAL_UART_RxCpltCallback+0x100>
 8000532:	a201      	add	r2, pc, #4	@ (adr r2, 8000538 <HAL_UART_RxCpltCallback+0x2c>)
 8000534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000538:	080005af 	.word	0x080005af
 800053c:	0800060d 	.word	0x0800060d
 8000540:	0800060d 	.word	0x0800060d
 8000544:	0800060d 	.word	0x0800060d
 8000548:	08000595 	.word	0x08000595
 800054c:	0800060d 	.word	0x0800060d
 8000550:	0800060d 	.word	0x0800060d
 8000554:	0800060d 	.word	0x0800060d
 8000558:	0800060d 	.word	0x0800060d
 800055c:	0800060d 	.word	0x0800060d
 8000560:	080005c9 	.word	0x080005c9
 8000564:	0800060d 	.word	0x0800060d
 8000568:	0800060d 	.word	0x0800060d
 800056c:	0800060d 	.word	0x0800060d
 8000570:	0800060d 	.word	0x0800060d
 8000574:	0800060d 	.word	0x0800060d
 8000578:	080005e1 	.word	0x080005e1
 800057c:	08000603 	.word	0x08000603
 8000580:	0800060d 	.word	0x0800060d
 8000584:	0800060d 	.word	0x0800060d
 8000588:	0800060d 	.word	0x0800060d
 800058c:	0800060d 	.word	0x0800060d
 8000590:	080005f9 	.word	0x080005f9
    {
      case 'F':
        L_Motor_Forward();
 8000594:	f000 f978 	bl	8000888 <L_Motor_Forward>
        R_Motor_Forward();
 8000598:	f000 f996 	bl	80008c8 <R_Motor_Forward>
        Set_L_Motor_PWM(700);
 800059c:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80005a0:	f000 f9b6 	bl	8000910 <Set_L_Motor_PWM>
        Set_R_Motor_PWM(700);
 80005a4:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80005a8:	f000 f9c2 	bl	8000930 <Set_R_Motor_PWM>
        break;
 80005ac:	e02e      	b.n	800060c <HAL_UART_RxCpltCallback+0x100>
      case 'B':
        L_Motor_Backward();
 80005ae:	f000 f97b 	bl	80008a8 <L_Motor_Backward>
        R_Motor_Backward();
 80005b2:	f000 f99b 	bl	80008ec <R_Motor_Backward>
        Set_L_Motor_PWM(700);
 80005b6:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80005ba:	f000 f9a9 	bl	8000910 <Set_L_Motor_PWM>
        Set_R_Motor_PWM(700);
 80005be:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80005c2:	f000 f9b5 	bl	8000930 <Set_R_Motor_PWM>
        break;
 80005c6:	e021      	b.n	800060c <HAL_UART_RxCpltCallback+0x100>
      case 'L':
        L_Motor_Backward();
 80005c8:	f000 f96e 	bl	80008a8 <L_Motor_Backward>
        R_Motor_Forward();
 80005cc:	f000 f97c 	bl	80008c8 <R_Motor_Forward>
        Set_L_Motor_PWM(200);
 80005d0:	20c8      	movs	r0, #200	@ 0xc8
 80005d2:	f000 f99d 	bl	8000910 <Set_L_Motor_PWM>
        Set_R_Motor_PWM(600);
 80005d6:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80005da:	f000 f9a9 	bl	8000930 <Set_R_Motor_PWM>
        break;
 80005de:	e015      	b.n	800060c <HAL_UART_RxCpltCallback+0x100>
      case 'R':
        L_Motor_Forward();
 80005e0:	f000 f952 	bl	8000888 <L_Motor_Forward>
        R_Motor_Backward();
 80005e4:	f000 f982 	bl	80008ec <R_Motor_Backward>
        Set_L_Motor_PWM(600);
 80005e8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80005ec:	f000 f990 	bl	8000910 <Set_L_Motor_PWM>
        Set_R_Motor_PWM(200);
 80005f0:	20c8      	movs	r0, #200	@ 0xc8
 80005f2:	f000 f99d 	bl	8000930 <Set_R_Motor_PWM>
        break;
 80005f6:	e009      	b.n	800060c <HAL_UART_RxCpltCallback+0x100>
      case 'X':
        L_Motor_Stop();
 80005f8:	f000 f9aa 	bl	8000950 <L_Motor_Stop>
        R_Motor_Stop();
 80005fc:	f000 f9bc 	bl	8000978 <R_Motor_Stop>
        break;
 8000600:	e004      	b.n	800060c <HAL_UART_RxCpltCallback+0x100>
      case 'S':
        L_Motor_Stop();
 8000602:	f000 f9a5 	bl	8000950 <L_Motor_Stop>
        R_Motor_Stop();
 8000606:	f000 f9b7 	bl	8000978 <R_Motor_Stop>
        break;
 800060a:	bf00      	nop
    }


//  }
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	2000007c 	.word	0x2000007c
 8000618:	20000160 	.word	0x20000160
 800061c:	20000118 	.word	0x20000118

08000620 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  HAL_UART_Receive_IT(&huart2, &rx_data, sizeof(rx_data));
 8000624:	2201      	movs	r2, #1
 8000626:	490d      	ldr	r1, [pc, #52]	@ (800065c <MX_FREERTOS_Init+0x3c>)
 8000628:	480d      	ldr	r0, [pc, #52]	@ (8000660 <MX_FREERTOS_Init+0x40>)
 800062a:	f002 fcab 	bl	8002f84 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &rx_data, sizeof(rx_data));
 800062e:	2201      	movs	r2, #1
 8000630:	490a      	ldr	r1, [pc, #40]	@ (800065c <MX_FREERTOS_Init+0x3c>)
 8000632:	480c      	ldr	r0, [pc, #48]	@ (8000664 <MX_FREERTOS_Init+0x44>)
 8000634:	f002 fca6 	bl	8002f84 <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of L_MOTOR_TASK */
  L_MOTOR_TASKHandle = osThreadNew(L_MOTOR_TASK01, NULL, &L_MOTOR_TASK_attributes);
 8000638:	4a0b      	ldr	r2, [pc, #44]	@ (8000668 <MX_FREERTOS_Init+0x48>)
 800063a:	2100      	movs	r1, #0
 800063c:	480b      	ldr	r0, [pc, #44]	@ (800066c <MX_FREERTOS_Init+0x4c>)
 800063e:	f003 fc67 	bl	8003f10 <osThreadNew>
 8000642:	4603      	mov	r3, r0
 8000644:	4a0a      	ldr	r2, [pc, #40]	@ (8000670 <MX_FREERTOS_Init+0x50>)
 8000646:	6013      	str	r3, [r2, #0]

  /* creation of R_MOTOR_TASK */
  R_MOTOR_TASKHandle = osThreadNew(R_MOTOR_TASK01, NULL, &R_MOTOR_TASK_attributes);
 8000648:	4a0a      	ldr	r2, [pc, #40]	@ (8000674 <MX_FREERTOS_Init+0x54>)
 800064a:	2100      	movs	r1, #0
 800064c:	480a      	ldr	r0, [pc, #40]	@ (8000678 <MX_FREERTOS_Init+0x58>)
 800064e:	f003 fc5f 	bl	8003f10 <osThreadNew>
 8000652:	4603      	mov	r3, r0
 8000654:	4a09      	ldr	r2, [pc, #36]	@ (800067c <MX_FREERTOS_Init+0x5c>)
 8000656:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	2000007c 	.word	0x2000007c
 8000660:	20000160 	.word	0x20000160
 8000664:	20000118 	.word	0x20000118
 8000668:	08006c08 	.word	0x08006c08
 800066c:	08000681 	.word	0x08000681
 8000670:	20000080 	.word	0x20000080
 8000674:	08006c2c 	.word	0x08006c2c
 8000678:	0800069d 	.word	0x0800069d
 800067c:	20000084 	.word	0x20000084

08000680 <L_MOTOR_TASK01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_L_MOTOR_TASK01 */
void L_MOTOR_TASK01(void *argument)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN L_MOTOR_TASK01 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // 좌측 PWM 시작
 8000688:	2100      	movs	r1, #0
 800068a:	4803      	ldr	r0, [pc, #12]	@ (8000698 <L_MOTOR_TASK01+0x18>)
 800068c:	f001 fd84 	bl	8002198 <HAL_TIM_PWM_Start>
//  HAL_UART_Receive_IT(&huart2, &rx_data, sizeof(rx_data));  // UART 수신 시작
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);  // 아무것도 하지 않고 대기
 8000690:	2064      	movs	r0, #100	@ 0x64
 8000692:	f003 fccf 	bl	8004034 <osDelay>
 8000696:	e7fb      	b.n	8000690 <L_MOTOR_TASK01+0x10>
 8000698:	200000d0 	.word	0x200000d0

0800069c <R_MOTOR_TASK01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_R_MOTOR_TASK01 */
void R_MOTOR_TASK01(void *argument)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN R_MOTOR_TASK01 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // 우측 PWM 시작
 80006a4:	2104      	movs	r1, #4
 80006a6:	4803      	ldr	r0, [pc, #12]	@ (80006b4 <R_MOTOR_TASK01+0x18>)
 80006a8:	f001 fd76 	bl	8002198 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);  // 아무것도 하지 않고 대기
 80006ac:	2064      	movs	r0, #100	@ 0x64
 80006ae:	f003 fcc1 	bl	8004034 <osDelay>
 80006b2:	e7fb      	b.n	80006ac <R_MOTOR_TASK01+0x10>
 80006b4:	200000d0 	.word	0x200000d0

080006b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	4b20      	ldr	r3, [pc, #128]	@ (8000754 <MX_GPIO_Init+0x9c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	4a1f      	ldr	r2, [pc, #124]	@ (8000754 <MX_GPIO_Init+0x9c>)
 80006d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006de:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <MX_GPIO_Init+0x9c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	4b19      	ldr	r3, [pc, #100]	@ (8000754 <MX_GPIO_Init+0x9c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	4a18      	ldr	r2, [pc, #96]	@ (8000754 <MX_GPIO_Init+0x9c>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fa:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <MX_GPIO_Init+0x9c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <MX_GPIO_Init+0x9c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a11      	ldr	r2, [pc, #68]	@ (8000754 <MX_GPIO_Init+0x9c>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
 8000716:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_GPIO_Init+0x9c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f240 4107 	movw	r1, #1031	@ 0x407
 8000728:	480b      	ldr	r0, [pc, #44]	@ (8000758 <MX_GPIO_Init+0xa0>)
 800072a:	f000 ff45 	bl	80015b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10;
 800072e:	f240 4307 	movw	r3, #1031	@ 0x407
 8000732:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	2301      	movs	r3, #1
 8000736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2300      	movs	r3, #0
 800073e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	4619      	mov	r1, r3
 8000746:	4804      	ldr	r0, [pc, #16]	@ (8000758 <MX_GPIO_Init+0xa0>)
 8000748:	f000 fdb2 	bl	80012b0 <HAL_GPIO_Init>

}
 800074c:	bf00      	nop
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800
 8000758:	40020400 	.word	0x40020400

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000760:	f000 fbf0 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000764:	f000 f810 	bl	8000788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000768:	f7ff ffa6 	bl	80006b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800076c:	f000 fb0a 	bl	8000d84 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000770:	f000 fa00 	bl	8000b74 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000774:	f000 fadc 	bl	8000d30 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000778:	f003 fb80 	bl	8003e7c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800077c:	f7ff ff50 	bl	8000620 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000780:	f003 fba0 	bl	8003ec4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <main+0x28>

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b094      	sub	sp, #80	@ 0x50
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 0320 	add.w	r3, r7, #32
 8000792:	2230      	movs	r2, #48	@ 0x30
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f006 f91e 	bl	80069d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	4b27      	ldr	r3, [pc, #156]	@ (8000850 <SystemClock_Config+0xc8>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b4:	4a26      	ldr	r2, [pc, #152]	@ (8000850 <SystemClock_Config+0xc8>)
 80007b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80007bc:	4b24      	ldr	r3, [pc, #144]	@ (8000850 <SystemClock_Config+0xc8>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c8:	2300      	movs	r3, #0
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	4b21      	ldr	r3, [pc, #132]	@ (8000854 <SystemClock_Config+0xcc>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a20      	ldr	r2, [pc, #128]	@ (8000854 <SystemClock_Config+0xcc>)
 80007d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000854 <SystemClock_Config+0xcc>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e4:	2301      	movs	r3, #1
 80007e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ee:	2302      	movs	r3, #2
 80007f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007f8:	2304      	movs	r3, #4
 80007fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80007fc:	2364      	movs	r3, #100	@ 0x64
 80007fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000800:	2302      	movs	r3, #2
 8000802:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000804:	2304      	movs	r3, #4
 8000806:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000808:	f107 0320 	add.w	r3, r7, #32
 800080c:	4618      	mov	r0, r3
 800080e:	f000 feed 	bl	80015ec <HAL_RCC_OscConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000818:	f000 f830 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081c:	230f      	movs	r3, #15
 800081e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000820:	2302      	movs	r3, #2
 8000822:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000828:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800082c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	2103      	movs	r1, #3
 8000838:	4618      	mov	r0, r3
 800083a:	f001 f94f 	bl	8001adc <HAL_RCC_ClockConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000844:	f000 f81a 	bl	800087c <Error_Handler>
  }
}
 8000848:	bf00      	nop
 800084a:	3750      	adds	r7, #80	@ 0x50
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023800 	.word	0x40023800
 8000854:	40007000 	.word	0x40007000

08000858 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a04      	ldr	r2, [pc, #16]	@ (8000878 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d101      	bne.n	800086e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800086a:	f000 fb8d 	bl	8000f88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40014400 	.word	0x40014400

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <Error_Handler+0x8>

08000888 <L_Motor_Forward>:

#include "motor.h"

// 좌측 모터 방향제어 (IN = PB0, IN2 = PB1)
void L_Motor_Forward(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // IN1
 800088c:	2201      	movs	r2, #1
 800088e:	2101      	movs	r1, #1
 8000890:	4804      	ldr	r0, [pc, #16]	@ (80008a4 <L_Motor_Forward+0x1c>)
 8000892:	f000 fe91 	bl	80015b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // IN2
 8000896:	2200      	movs	r2, #0
 8000898:	2102      	movs	r1, #2
 800089a:	4802      	ldr	r0, [pc, #8]	@ (80008a4 <L_Motor_Forward+0x1c>)
 800089c:	f000 fe8c 	bl	80015b8 <HAL_GPIO_WritePin>
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40020400 	.word	0x40020400

080008a8 <L_Motor_Backward>:

void L_Motor_Backward(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2101      	movs	r1, #1
 80008b0:	4804      	ldr	r0, [pc, #16]	@ (80008c4 <L_Motor_Backward+0x1c>)
 80008b2:	f000 fe81 	bl	80015b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2102      	movs	r1, #2
 80008ba:	4802      	ldr	r0, [pc, #8]	@ (80008c4 <L_Motor_Backward+0x1c>)
 80008bc:	f000 fe7c 	bl	80015b8 <HAL_GPIO_WritePin>
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40020400 	.word	0x40020400

080008c8 <R_Motor_Forward>:

// 우측 모터 방향제어 (IN = PB2. IN4 = PB10)
void R_Motor_Forward(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); // IN3
 80008cc:	2201      	movs	r2, #1
 80008ce:	2104      	movs	r1, #4
 80008d0:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <R_Motor_Forward+0x20>)
 80008d2:	f000 fe71 	bl	80015b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // IN4
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008dc:	4802      	ldr	r0, [pc, #8]	@ (80008e8 <R_Motor_Forward+0x20>)
 80008de:	f000 fe6b 	bl	80015b8 <HAL_GPIO_WritePin>
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40020400 	.word	0x40020400

080008ec <R_Motor_Backward>:

void R_Motor_Backward(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2104      	movs	r1, #4
 80008f4:	4805      	ldr	r0, [pc, #20]	@ (800090c <R_Motor_Backward+0x20>)
 80008f6:	f000 fe5f 	bl	80015b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80008fa:	2201      	movs	r2, #1
 80008fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000900:	4802      	ldr	r0, [pc, #8]	@ (800090c <R_Motor_Backward+0x20>)
 8000902:	f000 fe59 	bl	80015b8 <HAL_GPIO_WritePin>
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40020400 	.word	0x40020400

08000910 <Set_L_Motor_PWM>:
//  uint32_t pwm = (speed_percent * (__HAL_TIM_GET_AUTORELOAD(&htim3))) / 100;
//  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2 , pwm); // 좌 :ch1
//}

void Set_L_Motor_PWM(uint32_t pwm_value)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  TIM3->CCR1 = pwm_value;
 8000918:	4a04      	ldr	r2, [pc, #16]	@ (800092c <Set_L_Motor_PWM+0x1c>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40000400 	.word	0x40000400

08000930 <Set_R_Motor_PWM>:

void Set_R_Motor_PWM(uint32_t pwm_value)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  TIM3->CCR2 = pwm_value;
 8000938:	4a04      	ldr	r2, [pc, #16]	@ (800094c <Set_R_Motor_PWM+0x1c>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40000400 	.word	0x40000400

08000950 <L_Motor_Stop>:

void L_Motor_Stop(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // IN1
 8000954:	2200      	movs	r2, #0
 8000956:	2101      	movs	r1, #1
 8000958:	4806      	ldr	r0, [pc, #24]	@ (8000974 <L_Motor_Stop+0x24>)
 800095a:	f000 fe2d 	bl	80015b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);  // IN2
 800095e:	2200      	movs	r2, #0
 8000960:	2102      	movs	r1, #2
 8000962:	4804      	ldr	r0, [pc, #16]	@ (8000974 <L_Motor_Stop+0x24>)
 8000964:	f000 fe28 	bl	80015b8 <HAL_GPIO_WritePin>
  Set_L_Motor_PWM(0);  // PWM도 0
 8000968:	2000      	movs	r0, #0
 800096a:	f7ff ffd1 	bl	8000910 <Set_L_Motor_PWM>
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40020400 	.word	0x40020400

08000978 <R_Motor_Stop>:

void R_Motor_Stop(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);  // IN3
 800097c:	2200      	movs	r2, #0
 800097e:	2104      	movs	r1, #4
 8000980:	4806      	ldr	r0, [pc, #24]	@ (800099c <R_Motor_Stop+0x24>)
 8000982:	f000 fe19 	bl	80015b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // IN4
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800098c:	4803      	ldr	r0, [pc, #12]	@ (800099c <R_Motor_Stop+0x24>)
 800098e:	f000 fe13 	bl	80015b8 <HAL_GPIO_WritePin>
  Set_R_Motor_PWM(0);
 8000992:	2000      	movs	r0, #0
 8000994:	f7ff ffcc 	bl	8000930 <Set_R_Motor_PWM>
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40020400 	.word	0x40020400

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <HAL_MspInit+0x54>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ae:	4a11      	ldr	r2, [pc, #68]	@ (80009f4 <HAL_MspInit+0x54>)
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009b6:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <HAL_MspInit+0x54>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	4b0b      	ldr	r3, [pc, #44]	@ (80009f4 <HAL_MspInit+0x54>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ca:	4a0a      	ldr	r2, [pc, #40]	@ (80009f4 <HAL_MspInit+0x54>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d2:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <HAL_MspInit+0x54>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	210f      	movs	r1, #15
 80009e2:	f06f 0001 	mvn.w	r0, #1
 80009e6:	f000 fba7 	bl	8001138 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800

080009f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	@ 0x30
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ac8 <HAL_InitTick+0xd0>)
 8000a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a10:	4a2d      	ldr	r2, [pc, #180]	@ (8000ac8 <HAL_InitTick+0xd0>)
 8000a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a16:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a18:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac8 <HAL_InitTick+0xd0>)
 8000a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a24:	f107 020c 	add.w	r2, r7, #12
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f001 fa74 	bl	8001f1c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a34:	f001 fa5e 	bl	8001ef4 <HAL_RCC_GetPCLK2Freq>
 8000a38:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a3c:	4a23      	ldr	r2, [pc, #140]	@ (8000acc <HAL_InitTick+0xd4>)
 8000a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a42:	0c9b      	lsrs	r3, r3, #18
 8000a44:	3b01      	subs	r3, #1
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000a48:	4b21      	ldr	r3, [pc, #132]	@ (8000ad0 <HAL_InitTick+0xd8>)
 8000a4a:	4a22      	ldr	r2, [pc, #136]	@ (8000ad4 <HAL_InitTick+0xdc>)
 8000a4c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000a4e:	4b20      	ldr	r3, [pc, #128]	@ (8000ad0 <HAL_InitTick+0xd8>)
 8000a50:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a54:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000a56:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad0 <HAL_InitTick+0xd8>)
 8000a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a5a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad0 <HAL_InitTick+0xd8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a62:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <HAL_InitTick+0xd8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a68:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <HAL_InitTick+0xd8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000a6e:	4818      	ldr	r0, [pc, #96]	@ (8000ad0 <HAL_InitTick+0xd8>)
 8000a70:	f001 fa86 	bl	8001f80 <HAL_TIM_Base_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d11b      	bne.n	8000aba <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000a82:	4813      	ldr	r0, [pc, #76]	@ (8000ad0 <HAL_InitTick+0xd8>)
 8000a84:	f001 facc 	bl	8002020 <HAL_TIM_Base_Start_IT>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d111      	bne.n	8000aba <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a96:	2019      	movs	r0, #25
 8000a98:	f000 fb6a 	bl	8001170 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b0f      	cmp	r3, #15
 8000aa0:	d808      	bhi.n	8000ab4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	6879      	ldr	r1, [r7, #4]
 8000aa6:	2019      	movs	r0, #25
 8000aa8:	f000 fb46 	bl	8001138 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aac:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad8 <HAL_InitTick+0xe0>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6013      	str	r3, [r2, #0]
 8000ab2:	e002      	b.n	8000aba <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000aba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3730      	adds	r7, #48	@ 0x30
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	431bde83 	.word	0x431bde83
 8000ad0:	20000088 	.word	0x20000088
 8000ad4:	40014400 	.word	0x40014400
 8000ad8:	20000004 	.word	0x20000004

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <NMI_Handler+0x4>

08000ae4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <HardFault_Handler+0x4>

08000aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <MemManage_Handler+0x4>

08000af4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000b18:	4802      	ldr	r0, [pc, #8]	@ (8000b24 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b1a:	f001 fbed 	bl	80022f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000088 	.word	0x20000088

08000b28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b2c:	4802      	ldr	r0, [pc, #8]	@ (8000b38 <USART1_IRQHandler+0x10>)
 8000b2e:	f002 fa4f 	bl	8002fd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000118 	.word	0x20000118

08000b3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b40:	4802      	ldr	r0, [pc, #8]	@ (8000b4c <USART2_IRQHandler+0x10>)
 8000b42:	f002 fa45 	bl	8002fd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000160 	.word	0x20000160

08000b50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <SystemInit+0x20>)
 8000b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b5a:	4a05      	ldr	r2, [pc, #20]	@ (8000b70 <SystemInit+0x20>)
 8000b5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08e      	sub	sp, #56	@ 0x38
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b88:	f107 0320 	add.w	r3, r7, #32
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
 8000ba0:	615a      	str	r2, [r3, #20]
 8000ba2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ba4:	4b32      	ldr	r3, [pc, #200]	@ (8000c70 <MX_TIM3_Init+0xfc>)
 8000ba6:	4a33      	ldr	r2, [pc, #204]	@ (8000c74 <MX_TIM3_Init+0x100>)
 8000ba8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8000baa:	4b31      	ldr	r3, [pc, #196]	@ (8000c70 <MX_TIM3_Init+0xfc>)
 8000bac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8000c70 <MX_TIM3_Init+0xfc>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8000c70 <MX_TIM3_Init+0xfc>)
 8000bba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8000c70 <MX_TIM3_Init+0xfc>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000c70 <MX_TIM3_Init+0xfc>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bcc:	4828      	ldr	r0, [pc, #160]	@ (8000c70 <MX_TIM3_Init+0xfc>)
 8000bce:	f001 f9d7 	bl	8001f80 <HAL_TIM_Base_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000bd8:	f7ff fe50 	bl	800087c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000be2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000be6:	4619      	mov	r1, r3
 8000be8:	4821      	ldr	r0, [pc, #132]	@ (8000c70 <MX_TIM3_Init+0xfc>)
 8000bea:	f001 fd37 	bl	800265c <HAL_TIM_ConfigClockSource>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000bf4:	f7ff fe42 	bl	800087c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bf8:	481d      	ldr	r0, [pc, #116]	@ (8000c70 <MX_TIM3_Init+0xfc>)
 8000bfa:	f001 fa73 	bl	80020e4 <HAL_TIM_PWM_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c04:	f7ff fe3a 	bl	800087c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c10:	f107 0320 	add.w	r3, r7, #32
 8000c14:	4619      	mov	r1, r3
 8000c16:	4816      	ldr	r0, [pc, #88]	@ (8000c70 <MX_TIM3_Init+0xfc>)
 8000c18:	f002 f8e2 	bl	8002de0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c22:	f7ff fe2b 	bl	800087c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c26:	2360      	movs	r3, #96	@ 0x60
 8000c28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480c      	ldr	r0, [pc, #48]	@ (8000c70 <MX_TIM3_Init+0xfc>)
 8000c3e:	f001 fc4b 	bl	80024d8 <HAL_TIM_PWM_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c48:	f7ff fe18 	bl	800087c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2204      	movs	r2, #4
 8000c50:	4619      	mov	r1, r3
 8000c52:	4807      	ldr	r0, [pc, #28]	@ (8000c70 <MX_TIM3_Init+0xfc>)
 8000c54:	f001 fc40 	bl	80024d8 <HAL_TIM_PWM_ConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000c5e:	f7ff fe0d 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c62:	4803      	ldr	r0, [pc, #12]	@ (8000c70 <MX_TIM3_Init+0xfc>)
 8000c64:	f000 f82a 	bl	8000cbc <HAL_TIM_MspPostInit>

}
 8000c68:	bf00      	nop
 8000c6a:	3738      	adds	r7, #56	@ 0x38
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	200000d0 	.word	0x200000d0
 8000c74:	40000400 	.word	0x40000400

08000c78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb4 <HAL_TIM_Base_MspInit+0x3c>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d10d      	bne.n	8000ca6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x40>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c92:	4a09      	ldr	r2, [pc, #36]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x40>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9a:	4b07      	ldr	r3, [pc, #28]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x40>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40000400 	.word	0x40000400
 8000cb8:	40023800 	.word	0x40023800

08000cbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a12      	ldr	r2, [pc, #72]	@ (8000d24 <HAL_TIM_MspPostInit+0x68>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d11d      	bne.n	8000d1a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <HAL_TIM_MspPostInit+0x6c>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a10      	ldr	r2, [pc, #64]	@ (8000d28 <HAL_TIM_MspPostInit+0x6c>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <HAL_TIM_MspPostInit+0x6c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cfa:	23c0      	movs	r3, #192	@ 0xc0
 8000cfc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	@ (8000d2c <HAL_TIM_MspPostInit+0x70>)
 8000d16:	f000 facb 	bl	80012b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3720      	adds	r7, #32
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40000400 	.word	0x40000400
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020000 	.word	0x40020000

08000d30 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d34:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <MX_USART1_UART_Init+0x4c>)
 8000d36:	4a12      	ldr	r2, [pc, #72]	@ (8000d80 <MX_USART1_UART_Init+0x50>)
 8000d38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d3a:	4b10      	ldr	r3, [pc, #64]	@ (8000d7c <MX_USART1_UART_Init+0x4c>)
 8000d3c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <MX_USART1_UART_Init+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <MX_USART1_UART_Init+0x4c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d7c <MX_USART1_UART_Init+0x4c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d54:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <MX_USART1_UART_Init+0x4c>)
 8000d56:	220c      	movs	r2, #12
 8000d58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <MX_USART1_UART_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <MX_USART1_UART_Init+0x4c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d66:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <MX_USART1_UART_Init+0x4c>)
 8000d68:	f002 f8bc 	bl	8002ee4 <HAL_UART_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d72:	f7ff fd83 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000118 	.word	0x20000118
 8000d80:	40011000 	.word	0x40011000

08000d84 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d88:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	@ (8000dd4 <MX_USART2_UART_Init+0x50>)
 8000d8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d90:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000da8:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000daa:	220c      	movs	r2, #12
 8000dac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dae:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dba:	4805      	ldr	r0, [pc, #20]	@ (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000dbc:	f002 f892 	bl	8002ee4 <HAL_UART_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dc6:	f7ff fd59 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000160 	.word	0x20000160
 8000dd4:	40004400 	.word	0x40004400

08000dd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08c      	sub	sp, #48	@ 0x30
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a3a      	ldr	r2, [pc, #232]	@ (8000ee0 <HAL_UART_MspInit+0x108>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d135      	bne.n	8000e66 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
 8000dfe:	4b39      	ldr	r3, [pc, #228]	@ (8000ee4 <HAL_UART_MspInit+0x10c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e02:	4a38      	ldr	r2, [pc, #224]	@ (8000ee4 <HAL_UART_MspInit+0x10c>)
 8000e04:	f043 0310 	orr.w	r3, r3, #16
 8000e08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e0a:	4b36      	ldr	r3, [pc, #216]	@ (8000ee4 <HAL_UART_MspInit+0x10c>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0e:	f003 0310 	and.w	r3, r3, #16
 8000e12:	61bb      	str	r3, [r7, #24]
 8000e14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	4b32      	ldr	r3, [pc, #200]	@ (8000ee4 <HAL_UART_MspInit+0x10c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a31      	ldr	r2, [pc, #196]	@ (8000ee4 <HAL_UART_MspInit+0x10c>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e26:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee4 <HAL_UART_MspInit+0x10c>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e32:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e44:	2307      	movs	r3, #7
 8000e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 031c 	add.w	r3, r7, #28
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4826      	ldr	r0, [pc, #152]	@ (8000ee8 <HAL_UART_MspInit+0x110>)
 8000e50:	f000 fa2e 	bl	80012b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2105      	movs	r1, #5
 8000e58:	2025      	movs	r0, #37	@ 0x25
 8000e5a:	f000 f96d 	bl	8001138 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e5e:	2025      	movs	r0, #37	@ 0x25
 8000e60:	f000 f986 	bl	8001170 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e64:	e038      	b.n	8000ed8 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a20      	ldr	r2, [pc, #128]	@ (8000eec <HAL_UART_MspInit+0x114>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d133      	bne.n	8000ed8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e70:	2300      	movs	r3, #0
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee4 <HAL_UART_MspInit+0x10c>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e78:	4a1a      	ldr	r2, [pc, #104]	@ (8000ee4 <HAL_UART_MspInit+0x10c>)
 8000e7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e80:	4b18      	ldr	r3, [pc, #96]	@ (8000ee4 <HAL_UART_MspInit+0x10c>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <HAL_UART_MspInit+0x10c>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e94:	4a13      	ldr	r2, [pc, #76]	@ (8000ee4 <HAL_UART_MspInit+0x10c>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <HAL_UART_MspInit+0x10c>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ea8:	230c      	movs	r3, #12
 8000eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eb8:	2307      	movs	r3, #7
 8000eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4809      	ldr	r0, [pc, #36]	@ (8000ee8 <HAL_UART_MspInit+0x110>)
 8000ec4:	f000 f9f4 	bl	80012b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2105      	movs	r1, #5
 8000ecc:	2026      	movs	r0, #38	@ 0x26
 8000ece:	f000 f933 	bl	8001138 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ed2:	2026      	movs	r0, #38	@ 0x26
 8000ed4:	f000 f94c 	bl	8001170 <HAL_NVIC_EnableIRQ>
}
 8000ed8:	bf00      	nop
 8000eda:	3730      	adds	r7, #48	@ 0x30
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40011000 	.word	0x40011000
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	40004400 	.word	0x40004400

08000ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ef0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ef4:	f7ff fe2c 	bl	8000b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef8:	480c      	ldr	r0, [pc, #48]	@ (8000f2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000efa:	490d      	ldr	r1, [pc, #52]	@ (8000f30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000efc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f00:	e002      	b.n	8000f08 <LoopCopyDataInit>

08000f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f06:	3304      	adds	r3, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f0c:	d3f9      	bcc.n	8000f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f10:	4c0a      	ldr	r4, [pc, #40]	@ (8000f3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f14:	e001      	b.n	8000f1a <LoopFillZerobss>

08000f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f18:	3204      	adds	r2, #4

08000f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f005 fdc1 	bl	8006aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f22:	f7ff fc1b 	bl	800075c <main>
  bx  lr    
 8000f26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f30:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000f34:	08006c78 	.word	0x08006c78
  ldr r2, =_sbss
 8000f38:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000f3c:	20004cd4 	.word	0x20004cd4

08000f40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC_IRQHandler>
	...

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f48:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f84 <HAL_Init+0x40>)
 8000f4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f54:	4b0b      	ldr	r3, [pc, #44]	@ (8000f84 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0a      	ldr	r2, [pc, #40]	@ (8000f84 <HAL_Init+0x40>)
 8000f5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f60:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a07      	ldr	r2, [pc, #28]	@ (8000f84 <HAL_Init+0x40>)
 8000f66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 f8d8 	bl	8001122 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f72:	200f      	movs	r0, #15
 8000f74:	f7ff fd40 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f78:	f7ff fd12 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023c00 	.word	0x40023c00

08000f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <HAL_IncTick+0x20>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <HAL_IncTick+0x24>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a04      	ldr	r2, [pc, #16]	@ (8000fac <HAL_IncTick+0x24>)
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	200001a8 	.word	0x200001a8

08000fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	@ (8000fc4 <HAL_GetTick+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	200001a8 	.word	0x200001a8

08000fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffa:	4a04      	ldr	r2, [pc, #16]	@ (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	60d3      	str	r3, [r2, #12]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001014:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <__NVIC_GetPriorityGrouping+0x18>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	f003 0307 	and.w	r3, r3, #7
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	2b00      	cmp	r3, #0
 800103c:	db0b      	blt.n	8001056 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f003 021f 	and.w	r2, r3, #31
 8001044:	4907      	ldr	r1, [pc, #28]	@ (8001064 <__NVIC_EnableIRQ+0x38>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	095b      	lsrs	r3, r3, #5
 800104c:	2001      	movs	r0, #1
 800104e:	fa00 f202 	lsl.w	r2, r0, r2
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000e100 	.word	0xe000e100

08001068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	db0a      	blt.n	8001092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	490c      	ldr	r1, [pc, #48]	@ (80010b4 <__NVIC_SetPriority+0x4c>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	0112      	lsls	r2, r2, #4
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	440b      	add	r3, r1
 800108c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001090:	e00a      	b.n	80010a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4908      	ldr	r1, [pc, #32]	@ (80010b8 <__NVIC_SetPriority+0x50>)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	3b04      	subs	r3, #4
 80010a0:	0112      	lsls	r2, r2, #4
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	440b      	add	r3, r1
 80010a6:	761a      	strb	r2, [r3, #24]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	@ 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	bf28      	it	cs
 80010da:	2304      	movcs	r3, #4
 80010dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3304      	adds	r3, #4
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	d902      	bls.n	80010ec <NVIC_EncodePriority+0x30>
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3b03      	subs	r3, #3
 80010ea:	e000      	b.n	80010ee <NVIC_EncodePriority+0x32>
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43da      	mvns	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001104:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	43d9      	mvns	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	4313      	orrs	r3, r2
         );
}
 8001116:	4618      	mov	r0, r3
 8001118:	3724      	adds	r7, #36	@ 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ff4c 	bl	8000fc8 <__NVIC_SetPriorityGrouping>
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800114a:	f7ff ff61 	bl	8001010 <__NVIC_GetPriorityGrouping>
 800114e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	68b9      	ldr	r1, [r7, #8]
 8001154:	6978      	ldr	r0, [r7, #20]
 8001156:	f7ff ffb1 	bl	80010bc <NVIC_EncodePriority>
 800115a:	4602      	mov	r2, r0
 800115c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001160:	4611      	mov	r1, r2
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff80 	bl	8001068 <__NVIC_SetPriority>
}
 8001168:	bf00      	nop
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff54 	bl	800102c <__NVIC_EnableIRQ>
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001198:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800119a:	f7ff ff09 	bl	8000fb0 <HAL_GetTick>
 800119e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d008      	beq.n	80011be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2280      	movs	r2, #128	@ 0x80
 80011b0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e052      	b.n	8001264 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 0216 	bic.w	r2, r2, #22
 80011cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	695a      	ldr	r2, [r3, #20]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d103      	bne.n	80011ee <HAL_DMA_Abort+0x62>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d007      	beq.n	80011fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0208 	bic.w	r2, r2, #8
 80011fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 0201 	bic.w	r2, r2, #1
 800120c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800120e:	e013      	b.n	8001238 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001210:	f7ff fece 	bl	8000fb0 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b05      	cmp	r3, #5
 800121c:	d90c      	bls.n	8001238 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2220      	movs	r2, #32
 8001222:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2203      	movs	r2, #3
 8001228:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e015      	b.n	8001264 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1e4      	bne.n	8001210 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800124a:	223f      	movs	r2, #63	@ 0x3f
 800124c:	409a      	lsls	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2201      	movs	r2, #1
 8001256:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d004      	beq.n	800128a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2280      	movs	r2, #128	@ 0x80
 8001284:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e00c      	b.n	80012a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2205      	movs	r2, #5
 800128e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0201 	bic.w	r2, r2, #1
 80012a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b089      	sub	sp, #36	@ 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
 80012ca:	e159      	b.n	8001580 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012cc:	2201      	movs	r2, #1
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	f040 8148 	bne.w	800157a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d005      	beq.n	8001302 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d130      	bne.n	8001364 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	2203      	movs	r2, #3
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001338:	2201      	movs	r2, #1
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	091b      	lsrs	r3, r3, #4
 800134e:	f003 0201 	and.w	r2, r3, #1
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	2b03      	cmp	r3, #3
 800136e:	d017      	beq.n	80013a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	2203      	movs	r2, #3
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d123      	bne.n	80013f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	08da      	lsrs	r2, r3, #3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3208      	adds	r2, #8
 80013b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	220f      	movs	r2, #15
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	691a      	ldr	r2, [r3, #16]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	08da      	lsrs	r2, r3, #3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3208      	adds	r2, #8
 80013ee:	69b9      	ldr	r1, [r7, #24]
 80013f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	2203      	movs	r2, #3
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0203 	and.w	r2, r3, #3
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80a2 	beq.w	800157a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b57      	ldr	r3, [pc, #348]	@ (8001598 <HAL_GPIO_Init+0x2e8>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143e:	4a56      	ldr	r2, [pc, #344]	@ (8001598 <HAL_GPIO_Init+0x2e8>)
 8001440:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001444:	6453      	str	r3, [r2, #68]	@ 0x44
 8001446:	4b54      	ldr	r3, [pc, #336]	@ (8001598 <HAL_GPIO_Init+0x2e8>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001452:	4a52      	ldr	r2, [pc, #328]	@ (800159c <HAL_GPIO_Init+0x2ec>)
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	089b      	lsrs	r3, r3, #2
 8001458:	3302      	adds	r3, #2
 800145a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	220f      	movs	r2, #15
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a49      	ldr	r2, [pc, #292]	@ (80015a0 <HAL_GPIO_Init+0x2f0>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d019      	beq.n	80014b2 <HAL_GPIO_Init+0x202>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a48      	ldr	r2, [pc, #288]	@ (80015a4 <HAL_GPIO_Init+0x2f4>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d013      	beq.n	80014ae <HAL_GPIO_Init+0x1fe>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a47      	ldr	r2, [pc, #284]	@ (80015a8 <HAL_GPIO_Init+0x2f8>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d00d      	beq.n	80014aa <HAL_GPIO_Init+0x1fa>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a46      	ldr	r2, [pc, #280]	@ (80015ac <HAL_GPIO_Init+0x2fc>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d007      	beq.n	80014a6 <HAL_GPIO_Init+0x1f6>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a45      	ldr	r2, [pc, #276]	@ (80015b0 <HAL_GPIO_Init+0x300>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d101      	bne.n	80014a2 <HAL_GPIO_Init+0x1f2>
 800149e:	2304      	movs	r3, #4
 80014a0:	e008      	b.n	80014b4 <HAL_GPIO_Init+0x204>
 80014a2:	2307      	movs	r3, #7
 80014a4:	e006      	b.n	80014b4 <HAL_GPIO_Init+0x204>
 80014a6:	2303      	movs	r3, #3
 80014a8:	e004      	b.n	80014b4 <HAL_GPIO_Init+0x204>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e002      	b.n	80014b4 <HAL_GPIO_Init+0x204>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <HAL_GPIO_Init+0x204>
 80014b2:	2300      	movs	r3, #0
 80014b4:	69fa      	ldr	r2, [r7, #28]
 80014b6:	f002 0203 	and.w	r2, r2, #3
 80014ba:	0092      	lsls	r2, r2, #2
 80014bc:	4093      	lsls	r3, r2
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014c4:	4935      	ldr	r1, [pc, #212]	@ (800159c <HAL_GPIO_Init+0x2ec>)
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	3302      	adds	r3, #2
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014d2:	4b38      	ldr	r3, [pc, #224]	@ (80015b4 <HAL_GPIO_Init+0x304>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	43db      	mvns	r3, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4013      	ands	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014f6:	4a2f      	ldr	r2, [pc, #188]	@ (80015b4 <HAL_GPIO_Init+0x304>)
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014fc:	4b2d      	ldr	r3, [pc, #180]	@ (80015b4 <HAL_GPIO_Init+0x304>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001520:	4a24      	ldr	r2, [pc, #144]	@ (80015b4 <HAL_GPIO_Init+0x304>)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001526:	4b23      	ldr	r3, [pc, #140]	@ (80015b4 <HAL_GPIO_Init+0x304>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	43db      	mvns	r3, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4013      	ands	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800154a:	4a1a      	ldr	r2, [pc, #104]	@ (80015b4 <HAL_GPIO_Init+0x304>)
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001550:	4b18      	ldr	r3, [pc, #96]	@ (80015b4 <HAL_GPIO_Init+0x304>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001574:	4a0f      	ldr	r2, [pc, #60]	@ (80015b4 <HAL_GPIO_Init+0x304>)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3301      	adds	r3, #1
 800157e:	61fb      	str	r3, [r7, #28]
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	2b0f      	cmp	r3, #15
 8001584:	f67f aea2 	bls.w	80012cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3724      	adds	r7, #36	@ 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800
 800159c:	40013800 	.word	0x40013800
 80015a0:	40020000 	.word	0x40020000
 80015a4:	40020400 	.word	0x40020400
 80015a8:	40020800 	.word	0x40020800
 80015ac:	40020c00 	.word	0x40020c00
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40013c00 	.word	0x40013c00

080015b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
 80015c4:	4613      	mov	r3, r2
 80015c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015c8:	787b      	ldrb	r3, [r7, #1]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ce:	887a      	ldrh	r2, [r7, #2]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015d4:	e003      	b.n	80015de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015d6:	887b      	ldrh	r3, [r7, #2]
 80015d8:	041a      	lsls	r2, r3, #16
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	619a      	str	r2, [r3, #24]
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e267      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d075      	beq.n	80016f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800160a:	4b88      	ldr	r3, [pc, #544]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b04      	cmp	r3, #4
 8001614:	d00c      	beq.n	8001630 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001616:	4b85      	ldr	r3, [pc, #532]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800161e:	2b08      	cmp	r3, #8
 8001620:	d112      	bne.n	8001648 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001622:	4b82      	ldr	r3, [pc, #520]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800162a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800162e:	d10b      	bne.n	8001648 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001630:	4b7e      	ldr	r3, [pc, #504]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d05b      	beq.n	80016f4 <HAL_RCC_OscConfig+0x108>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d157      	bne.n	80016f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e242      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001650:	d106      	bne.n	8001660 <HAL_RCC_OscConfig+0x74>
 8001652:	4b76      	ldr	r3, [pc, #472]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a75      	ldr	r2, [pc, #468]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	e01d      	b.n	800169c <HAL_RCC_OscConfig+0xb0>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001668:	d10c      	bne.n	8001684 <HAL_RCC_OscConfig+0x98>
 800166a:	4b70      	ldr	r3, [pc, #448]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a6f      	ldr	r2, [pc, #444]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	4b6d      	ldr	r3, [pc, #436]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a6c      	ldr	r2, [pc, #432]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 800167c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	e00b      	b.n	800169c <HAL_RCC_OscConfig+0xb0>
 8001684:	4b69      	ldr	r3, [pc, #420]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a68      	ldr	r2, [pc, #416]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 800168a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	4b66      	ldr	r3, [pc, #408]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a65      	ldr	r2, [pc, #404]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800169a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d013      	beq.n	80016cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fc84 	bl	8000fb0 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff fc80 	bl	8000fb0 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	@ 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e207      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016be:	4b5b      	ldr	r3, [pc, #364]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0xc0>
 80016ca:	e014      	b.n	80016f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff fc70 	bl	8000fb0 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff fc6c 	bl	8000fb0 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	@ 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e1f3      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e6:	4b51      	ldr	r3, [pc, #324]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0xe8>
 80016f2:	e000      	b.n	80016f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d063      	beq.n	80017ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001702:	4b4a      	ldr	r3, [pc, #296]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00b      	beq.n	8001726 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800170e:	4b47      	ldr	r3, [pc, #284]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001716:	2b08      	cmp	r3, #8
 8001718:	d11c      	bne.n	8001754 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800171a:	4b44      	ldr	r3, [pc, #272]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d116      	bne.n	8001754 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001726:	4b41      	ldr	r3, [pc, #260]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d005      	beq.n	800173e <HAL_RCC_OscConfig+0x152>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d001      	beq.n	800173e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e1c7      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173e:	4b3b      	ldr	r3, [pc, #236]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	4937      	ldr	r1, [pc, #220]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 800174e:	4313      	orrs	r3, r2
 8001750:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001752:	e03a      	b.n	80017ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d020      	beq.n	800179e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800175c:	4b34      	ldr	r3, [pc, #208]	@ (8001830 <HAL_RCC_OscConfig+0x244>)
 800175e:	2201      	movs	r2, #1
 8001760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001762:	f7ff fc25 	bl	8000fb0 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800176a:	f7ff fc21 	bl	8000fb0 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e1a8      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177c:	4b2b      	ldr	r3, [pc, #172]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001788:	4b28      	ldr	r3, [pc, #160]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	4925      	ldr	r1, [pc, #148]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001798:	4313      	orrs	r3, r2
 800179a:	600b      	str	r3, [r1, #0]
 800179c:	e015      	b.n	80017ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800179e:	4b24      	ldr	r3, [pc, #144]	@ (8001830 <HAL_RCC_OscConfig+0x244>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a4:	f7ff fc04 	bl	8000fb0 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ac:	f7ff fc00 	bl	8000fb0 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e187      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017be:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d036      	beq.n	8001844 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d016      	beq.n	800180c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017de:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <HAL_RCC_OscConfig+0x248>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e4:	f7ff fbe4 	bl	8000fb0 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ec:	f7ff fbe0 	bl	8000fb0 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e167      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fe:	4b0b      	ldr	r3, [pc, #44]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0x200>
 800180a:	e01b      	b.n	8001844 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800180c:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <HAL_RCC_OscConfig+0x248>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001812:	f7ff fbcd 	bl	8000fb0 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001818:	e00e      	b.n	8001838 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800181a:	f7ff fbc9 	bl	8000fb0 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d907      	bls.n	8001838 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e150      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
 800182c:	40023800 	.word	0x40023800
 8001830:	42470000 	.word	0x42470000
 8001834:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001838:	4b88      	ldr	r3, [pc, #544]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 800183a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1ea      	bne.n	800181a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 8097 	beq.w	8001980 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001852:	2300      	movs	r3, #0
 8001854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001856:	4b81      	ldr	r3, [pc, #516]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10f      	bne.n	8001882 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	4b7d      	ldr	r3, [pc, #500]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	4a7c      	ldr	r2, [pc, #496]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 800186c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001870:	6413      	str	r3, [r2, #64]	@ 0x40
 8001872:	4b7a      	ldr	r3, [pc, #488]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800187e:	2301      	movs	r3, #1
 8001880:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001882:	4b77      	ldr	r3, [pc, #476]	@ (8001a60 <HAL_RCC_OscConfig+0x474>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800188a:	2b00      	cmp	r3, #0
 800188c:	d118      	bne.n	80018c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800188e:	4b74      	ldr	r3, [pc, #464]	@ (8001a60 <HAL_RCC_OscConfig+0x474>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a73      	ldr	r2, [pc, #460]	@ (8001a60 <HAL_RCC_OscConfig+0x474>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189a:	f7ff fb89 	bl	8000fb0 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a2:	f7ff fb85 	bl	8000fb0 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e10c      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b4:	4b6a      	ldr	r3, [pc, #424]	@ (8001a60 <HAL_RCC_OscConfig+0x474>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d106      	bne.n	80018d6 <HAL_RCC_OscConfig+0x2ea>
 80018c8:	4b64      	ldr	r3, [pc, #400]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018cc:	4a63      	ldr	r2, [pc, #396]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80018d4:	e01c      	b.n	8001910 <HAL_RCC_OscConfig+0x324>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b05      	cmp	r3, #5
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x30c>
 80018de:	4b5f      	ldr	r3, [pc, #380]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e2:	4a5e      	ldr	r2, [pc, #376]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ea:	4b5c      	ldr	r3, [pc, #368]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ee:	4a5b      	ldr	r2, [pc, #364]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80018f6:	e00b      	b.n	8001910 <HAL_RCC_OscConfig+0x324>
 80018f8:	4b58      	ldr	r3, [pc, #352]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018fc:	4a57      	ldr	r2, [pc, #348]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018fe:	f023 0301 	bic.w	r3, r3, #1
 8001902:	6713      	str	r3, [r2, #112]	@ 0x70
 8001904:	4b55      	ldr	r3, [pc, #340]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001908:	4a54      	ldr	r2, [pc, #336]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 800190a:	f023 0304 	bic.w	r3, r3, #4
 800190e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d015      	beq.n	8001944 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001918:	f7ff fb4a 	bl	8000fb0 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191e:	e00a      	b.n	8001936 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001920:	f7ff fb46 	bl	8000fb0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800192e:	4293      	cmp	r3, r2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e0cb      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001936:	4b49      	ldr	r3, [pc, #292]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0ee      	beq.n	8001920 <HAL_RCC_OscConfig+0x334>
 8001942:	e014      	b.n	800196e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001944:	f7ff fb34 	bl	8000fb0 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194a:	e00a      	b.n	8001962 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194c:	f7ff fb30 	bl	8000fb0 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e0b5      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001962:	4b3e      	ldr	r3, [pc, #248]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1ee      	bne.n	800194c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800196e:	7dfb      	ldrb	r3, [r7, #23]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d105      	bne.n	8001980 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001974:	4b39      	ldr	r3, [pc, #228]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001978:	4a38      	ldr	r2, [pc, #224]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 800197a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800197e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80a1 	beq.w	8001acc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800198a:	4b34      	ldr	r3, [pc, #208]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b08      	cmp	r3, #8
 8001994:	d05c      	beq.n	8001a50 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d141      	bne.n	8001a22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199e:	4b31      	ldr	r3, [pc, #196]	@ (8001a64 <HAL_RCC_OscConfig+0x478>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7ff fb04 	bl	8000fb0 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ac:	f7ff fb00 	bl	8000fb0 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e087      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019be:	4b27      	ldr	r3, [pc, #156]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69da      	ldr	r2, [r3, #28]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d8:	019b      	lsls	r3, r3, #6
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e0:	085b      	lsrs	r3, r3, #1
 80019e2:	3b01      	subs	r3, #1
 80019e4:	041b      	lsls	r3, r3, #16
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ec:	061b      	lsls	r3, r3, #24
 80019ee:	491b      	ldr	r1, [pc, #108]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a64 <HAL_RCC_OscConfig+0x478>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7ff fad9 	bl	8000fb0 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a02:	f7ff fad5 	bl	8000fb0 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e05c      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a14:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x416>
 8001a20:	e054      	b.n	8001acc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <HAL_RCC_OscConfig+0x478>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7ff fac2 	bl	8000fb0 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a30:	f7ff fabe 	bl	8000fb0 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e045      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a42:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x444>
 8001a4e:	e03d      	b.n	8001acc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d107      	bne.n	8001a68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e038      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40007000 	.word	0x40007000
 8001a64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a68:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad8 <HAL_RCC_OscConfig+0x4ec>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d028      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d121      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d11a      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a98:	4013      	ands	r3, r2
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d111      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aae:	085b      	lsrs	r3, r3, #1
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d107      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800

08001adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0cc      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001af0:	4b68      	ldr	r3, [pc, #416]	@ (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d90c      	bls.n	8001b18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afe:	4b65      	ldr	r3, [pc, #404]	@ (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b06:	4b63      	ldr	r3, [pc, #396]	@ (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d001      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0b8      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d020      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b30:	4b59      	ldr	r3, [pc, #356]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4a58      	ldr	r2, [pc, #352]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b48:	4b53      	ldr	r3, [pc, #332]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	4a52      	ldr	r2, [pc, #328]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b54:	4b50      	ldr	r3, [pc, #320]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	494d      	ldr	r1, [pc, #308]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d044      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d107      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7a:	4b47      	ldr	r3, [pc, #284]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d119      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e07f      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d003      	beq.n	8001b9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d107      	bne.n	8001baa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d109      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e06f      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001baa:	4b3b      	ldr	r3, [pc, #236]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e067      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bba:	4b37      	ldr	r3, [pc, #220]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f023 0203 	bic.w	r2, r3, #3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	4934      	ldr	r1, [pc, #208]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bcc:	f7ff f9f0 	bl	8000fb0 <HAL_GetTick>
 8001bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd2:	e00a      	b.n	8001bea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd4:	f7ff f9ec 	bl	8000fb0 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e04f      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bea:	4b2b      	ldr	r3, [pc, #172]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 020c 	and.w	r2, r3, #12
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d1eb      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bfc:	4b25      	ldr	r3, [pc, #148]	@ (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d20c      	bcs.n	8001c24 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0a:	4b22      	ldr	r3, [pc, #136]	@ (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c12:	4b20      	ldr	r3, [pc, #128]	@ (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e032      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d008      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c30:	4b19      	ldr	r3, [pc, #100]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4916      	ldr	r1, [pc, #88]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d009      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c4e:	4b12      	ldr	r3, [pc, #72]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	490e      	ldr	r1, [pc, #56]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c62:	f000 f821 	bl	8001ca8 <HAL_RCC_GetSysClockFreq>
 8001c66:	4602      	mov	r2, r0
 8001c68:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	490a      	ldr	r1, [pc, #40]	@ (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001c74:	5ccb      	ldrb	r3, [r1, r3]
 8001c76:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7a:	4a09      	ldr	r2, [pc, #36]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe feb8 	bl	80009f8 <HAL_InitTick>

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023c00 	.word	0x40023c00
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	08006c50 	.word	0x08006c50
 8001ca0:	20000000 	.word	0x20000000
 8001ca4:	20000004 	.word	0x20000004

08001ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cac:	b094      	sub	sp, #80	@ 0x50
 8001cae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cc0:	4b79      	ldr	r3, [pc, #484]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 030c 	and.w	r3, r3, #12
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d00d      	beq.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	f200 80e1 	bhi.w	8001e94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0x34>
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d003      	beq.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cda:	e0db      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cdc:	4b73      	ldr	r3, [pc, #460]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x204>)
 8001cde:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ce0:	e0db      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ce2:	4b73      	ldr	r3, [pc, #460]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ce6:	e0d8      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ce8:	4b6f      	ldr	r3, [pc, #444]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cf0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cf2:	4b6d      	ldr	r3, [pc, #436]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d063      	beq.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cfe:	4b6a      	ldr	r3, [pc, #424]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	099b      	lsrs	r3, r3, #6
 8001d04:	2200      	movs	r2, #0
 8001d06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d10:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d12:	2300      	movs	r3, #0
 8001d14:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d1a:	4622      	mov	r2, r4
 8001d1c:	462b      	mov	r3, r5
 8001d1e:	f04f 0000 	mov.w	r0, #0
 8001d22:	f04f 0100 	mov.w	r1, #0
 8001d26:	0159      	lsls	r1, r3, #5
 8001d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d2c:	0150      	lsls	r0, r2, #5
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4621      	mov	r1, r4
 8001d34:	1a51      	subs	r1, r2, r1
 8001d36:	6139      	str	r1, [r7, #16]
 8001d38:	4629      	mov	r1, r5
 8001d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d4c:	4659      	mov	r1, fp
 8001d4e:	018b      	lsls	r3, r1, #6
 8001d50:	4651      	mov	r1, sl
 8001d52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d56:	4651      	mov	r1, sl
 8001d58:	018a      	lsls	r2, r1, #6
 8001d5a:	4651      	mov	r1, sl
 8001d5c:	ebb2 0801 	subs.w	r8, r2, r1
 8001d60:	4659      	mov	r1, fp
 8001d62:	eb63 0901 	sbc.w	r9, r3, r1
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d7a:	4690      	mov	r8, r2
 8001d7c:	4699      	mov	r9, r3
 8001d7e:	4623      	mov	r3, r4
 8001d80:	eb18 0303 	adds.w	r3, r8, r3
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	462b      	mov	r3, r5
 8001d88:	eb49 0303 	adc.w	r3, r9, r3
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d9a:	4629      	mov	r1, r5
 8001d9c:	024b      	lsls	r3, r1, #9
 8001d9e:	4621      	mov	r1, r4
 8001da0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001da4:	4621      	mov	r1, r4
 8001da6:	024a      	lsls	r2, r1, #9
 8001da8:	4610      	mov	r0, r2
 8001daa:	4619      	mov	r1, r3
 8001dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dae:	2200      	movs	r2, #0
 8001db0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001db2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001db4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001db8:	f7fe fa12 	bl	80001e0 <__aeabi_uldivmod>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001dc4:	e058      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc6:	4b38      	ldr	r3, [pc, #224]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	099b      	lsrs	r3, r3, #6
 8001dcc:	2200      	movs	r2, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dd6:	623b      	str	r3, [r7, #32]
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ddc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001de0:	4642      	mov	r2, r8
 8001de2:	464b      	mov	r3, r9
 8001de4:	f04f 0000 	mov.w	r0, #0
 8001de8:	f04f 0100 	mov.w	r1, #0
 8001dec:	0159      	lsls	r1, r3, #5
 8001dee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001df2:	0150      	lsls	r0, r2, #5
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4641      	mov	r1, r8
 8001dfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dfe:	4649      	mov	r1, r9
 8001e00:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e18:	ebb2 040a 	subs.w	r4, r2, sl
 8001e1c:	eb63 050b 	sbc.w	r5, r3, fp
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	00eb      	lsls	r3, r5, #3
 8001e2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e2e:	00e2      	lsls	r2, r4, #3
 8001e30:	4614      	mov	r4, r2
 8001e32:	461d      	mov	r5, r3
 8001e34:	4643      	mov	r3, r8
 8001e36:	18e3      	adds	r3, r4, r3
 8001e38:	603b      	str	r3, [r7, #0]
 8001e3a:	464b      	mov	r3, r9
 8001e3c:	eb45 0303 	adc.w	r3, r5, r3
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e4e:	4629      	mov	r1, r5
 8001e50:	028b      	lsls	r3, r1, #10
 8001e52:	4621      	mov	r1, r4
 8001e54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e58:	4621      	mov	r1, r4
 8001e5a:	028a      	lsls	r2, r1, #10
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4619      	mov	r1, r3
 8001e60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e62:	2200      	movs	r2, #0
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	61fa      	str	r2, [r7, #28]
 8001e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e6c:	f7fe f9b8 	bl	80001e0 <__aeabi_uldivmod>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4613      	mov	r3, r2
 8001e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	0c1b      	lsrs	r3, r3, #16
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	3301      	adds	r3, #1
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e92:	e002      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e94:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x204>)
 8001e96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3750      	adds	r7, #80	@ 0x50
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	00f42400 	.word	0x00f42400
 8001eb0:	007a1200 	.word	0x007a1200

08001eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	@ (8001ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000000 	.word	0x20000000

08001ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ed0:	f7ff fff0 	bl	8001eb4 <HAL_RCC_GetHCLKFreq>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	4b05      	ldr	r3, [pc, #20]	@ (8001eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	0a9b      	lsrs	r3, r3, #10
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	4903      	ldr	r1, [pc, #12]	@ (8001ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee2:	5ccb      	ldrb	r3, [r1, r3]
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	08006c60 	.word	0x08006c60

08001ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ef8:	f7ff ffdc 	bl	8001eb4 <HAL_RCC_GetHCLKFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b05      	ldr	r3, [pc, #20]	@ (8001f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	0b5b      	lsrs	r3, r3, #13
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	4903      	ldr	r1, [pc, #12]	@ (8001f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40023800 	.word	0x40023800
 8001f18:	08006c60 	.word	0x08006c60

08001f1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	220f      	movs	r2, #15
 8001f2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f2c:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <HAL_RCC_GetClockConfig+0x5c>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 0203 	and.w	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f38:	4b0f      	ldr	r3, [pc, #60]	@ (8001f78 <HAL_RCC_GetClockConfig+0x5c>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f44:	4b0c      	ldr	r3, [pc, #48]	@ (8001f78 <HAL_RCC_GetClockConfig+0x5c>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f50:	4b09      	ldr	r3, [pc, #36]	@ (8001f78 <HAL_RCC_GetClockConfig+0x5c>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	08db      	lsrs	r3, r3, #3
 8001f56:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f5e:	4b07      	ldr	r3, [pc, #28]	@ (8001f7c <HAL_RCC_GetClockConfig+0x60>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0207 	and.w	r2, r3, #7
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	601a      	str	r2, [r3, #0]
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40023c00 	.word	0x40023c00

08001f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e041      	b.n	8002016 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d106      	bne.n	8001fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7fe fe66 	bl	8000c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3304      	adds	r3, #4
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	f000 fc3c 	bl	800283c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b01      	cmp	r3, #1
 8002032:	d001      	beq.n	8002038 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e044      	b.n	80020c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a1e      	ldr	r2, [pc, #120]	@ (80020d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d018      	beq.n	800208c <HAL_TIM_Base_Start_IT+0x6c>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002062:	d013      	beq.n	800208c <HAL_TIM_Base_Start_IT+0x6c>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1a      	ldr	r2, [pc, #104]	@ (80020d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00e      	beq.n	800208c <HAL_TIM_Base_Start_IT+0x6c>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a19      	ldr	r2, [pc, #100]	@ (80020d8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d009      	beq.n	800208c <HAL_TIM_Base_Start_IT+0x6c>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a17      	ldr	r2, [pc, #92]	@ (80020dc <HAL_TIM_Base_Start_IT+0xbc>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d004      	beq.n	800208c <HAL_TIM_Base_Start_IT+0x6c>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a16      	ldr	r2, [pc, #88]	@ (80020e0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d111      	bne.n	80020b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b06      	cmp	r3, #6
 800209c:	d010      	beq.n	80020c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0201 	orr.w	r2, r2, #1
 80020ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ae:	e007      	b.n	80020c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40010000 	.word	0x40010000
 80020d4:	40000400 	.word	0x40000400
 80020d8:	40000800 	.word	0x40000800
 80020dc:	40000c00 	.word	0x40000c00
 80020e0:	40014000 	.word	0x40014000

080020e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e041      	b.n	800217a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d106      	bne.n	8002110 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f839 	bl	8002182 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2202      	movs	r2, #2
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3304      	adds	r3, #4
 8002120:	4619      	mov	r1, r3
 8002122:	4610      	mov	r0, r2
 8002124:	f000 fb8a 	bl	800283c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d109      	bne.n	80021bc <HAL_TIM_PWM_Start+0x24>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	bf14      	ite	ne
 80021b4:	2301      	movne	r3, #1
 80021b6:	2300      	moveq	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	e022      	b.n	8002202 <HAL_TIM_PWM_Start+0x6a>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d109      	bne.n	80021d6 <HAL_TIM_PWM_Start+0x3e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	bf14      	ite	ne
 80021ce:	2301      	movne	r3, #1
 80021d0:	2300      	moveq	r3, #0
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	e015      	b.n	8002202 <HAL_TIM_PWM_Start+0x6a>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d109      	bne.n	80021f0 <HAL_TIM_PWM_Start+0x58>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	bf14      	ite	ne
 80021e8:	2301      	movne	r3, #1
 80021ea:	2300      	moveq	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	e008      	b.n	8002202 <HAL_TIM_PWM_Start+0x6a>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	bf14      	ite	ne
 80021fc:	2301      	movne	r3, #1
 80021fe:	2300      	moveq	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e068      	b.n	80022dc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d104      	bne.n	800221a <HAL_TIM_PWM_Start+0x82>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002218:	e013      	b.n	8002242 <HAL_TIM_PWM_Start+0xaa>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2b04      	cmp	r3, #4
 800221e:	d104      	bne.n	800222a <HAL_TIM_PWM_Start+0x92>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2202      	movs	r2, #2
 8002224:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002228:	e00b      	b.n	8002242 <HAL_TIM_PWM_Start+0xaa>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b08      	cmp	r3, #8
 800222e:	d104      	bne.n	800223a <HAL_TIM_PWM_Start+0xa2>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2202      	movs	r2, #2
 8002234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002238:	e003      	b.n	8002242 <HAL_TIM_PWM_Start+0xaa>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2202      	movs	r2, #2
 800223e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2201      	movs	r2, #1
 8002248:	6839      	ldr	r1, [r7, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f000 fda2 	bl	8002d94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a23      	ldr	r2, [pc, #140]	@ (80022e4 <HAL_TIM_PWM_Start+0x14c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d107      	bne.n	800226a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002268:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a1d      	ldr	r2, [pc, #116]	@ (80022e4 <HAL_TIM_PWM_Start+0x14c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d018      	beq.n	80022a6 <HAL_TIM_PWM_Start+0x10e>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800227c:	d013      	beq.n	80022a6 <HAL_TIM_PWM_Start+0x10e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a19      	ldr	r2, [pc, #100]	@ (80022e8 <HAL_TIM_PWM_Start+0x150>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d00e      	beq.n	80022a6 <HAL_TIM_PWM_Start+0x10e>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a17      	ldr	r2, [pc, #92]	@ (80022ec <HAL_TIM_PWM_Start+0x154>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d009      	beq.n	80022a6 <HAL_TIM_PWM_Start+0x10e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a16      	ldr	r2, [pc, #88]	@ (80022f0 <HAL_TIM_PWM_Start+0x158>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d004      	beq.n	80022a6 <HAL_TIM_PWM_Start+0x10e>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a14      	ldr	r2, [pc, #80]	@ (80022f4 <HAL_TIM_PWM_Start+0x15c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d111      	bne.n	80022ca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2b06      	cmp	r3, #6
 80022b6:	d010      	beq.n	80022da <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0201 	orr.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c8:	e007      	b.n	80022da <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 0201 	orr.w	r2, r2, #1
 80022d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40010000 	.word	0x40010000
 80022e8:	40000400 	.word	0x40000400
 80022ec:	40000800 	.word	0x40000800
 80022f0:	40000c00 	.word	0x40000c00
 80022f4:	40014000 	.word	0x40014000

080022f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d020      	beq.n	800235c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d01b      	beq.n	800235c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f06f 0202 	mvn.w	r2, #2
 800232c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 fa5b 	bl	80027fe <HAL_TIM_IC_CaptureCallback>
 8002348:	e005      	b.n	8002356 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 fa4d 	bl	80027ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 fa5e 	bl	8002812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b00      	cmp	r3, #0
 8002364:	d020      	beq.n	80023a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01b      	beq.n	80023a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f06f 0204 	mvn.w	r2, #4
 8002378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2202      	movs	r2, #2
 800237e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 fa35 	bl	80027fe <HAL_TIM_IC_CaptureCallback>
 8002394:	e005      	b.n	80023a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fa27 	bl	80027ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 fa38 	bl	8002812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d020      	beq.n	80023f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d01b      	beq.n	80023f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f06f 0208 	mvn.w	r2, #8
 80023c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2204      	movs	r2, #4
 80023ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 fa0f 	bl	80027fe <HAL_TIM_IC_CaptureCallback>
 80023e0:	e005      	b.n	80023ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 fa01 	bl	80027ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 fa12 	bl	8002812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f003 0310 	and.w	r3, r3, #16
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d020      	beq.n	8002440 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	2b00      	cmp	r3, #0
 8002406:	d01b      	beq.n	8002440 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f06f 0210 	mvn.w	r2, #16
 8002410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2208      	movs	r2, #8
 8002416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f9e9 	bl	80027fe <HAL_TIM_IC_CaptureCallback>
 800242c:	e005      	b.n	800243a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f9db 	bl	80027ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f9ec 	bl	8002812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00c      	beq.n	8002464 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f06f 0201 	mvn.w	r2, #1
 800245c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7fe f9fa 	bl	8000858 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00c      	beq.n	8002488 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002474:	2b00      	cmp	r3, #0
 8002476:	d007      	beq.n	8002488 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 fd24 	bl	8002ed0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00c      	beq.n	80024ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002498:	2b00      	cmp	r3, #0
 800249a:	d007      	beq.n	80024ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80024a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f9bd 	bl	8002826 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00c      	beq.n	80024d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f003 0320 	and.w	r3, r3, #32
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d007      	beq.n	80024d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0220 	mvn.w	r2, #32
 80024c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 fcf6 	bl	8002ebc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024d0:	bf00      	nop
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d101      	bne.n	80024f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e0ae      	b.n	8002654 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b0c      	cmp	r3, #12
 8002502:	f200 809f 	bhi.w	8002644 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002506:	a201      	add	r2, pc, #4	@ (adr r2, 800250c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250c:	08002541 	.word	0x08002541
 8002510:	08002645 	.word	0x08002645
 8002514:	08002645 	.word	0x08002645
 8002518:	08002645 	.word	0x08002645
 800251c:	08002581 	.word	0x08002581
 8002520:	08002645 	.word	0x08002645
 8002524:	08002645 	.word	0x08002645
 8002528:	08002645 	.word	0x08002645
 800252c:	080025c3 	.word	0x080025c3
 8002530:	08002645 	.word	0x08002645
 8002534:	08002645 	.word	0x08002645
 8002538:	08002645 	.word	0x08002645
 800253c:	08002603 	.word	0x08002603
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68b9      	ldr	r1, [r7, #8]
 8002546:	4618      	mov	r0, r3
 8002548:	f000 f9fe 	bl	8002948 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699a      	ldr	r2, [r3, #24]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0208 	orr.w	r2, r2, #8
 800255a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699a      	ldr	r2, [r3, #24]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0204 	bic.w	r2, r2, #4
 800256a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6999      	ldr	r1, [r3, #24]
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	691a      	ldr	r2, [r3, #16]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	619a      	str	r2, [r3, #24]
      break;
 800257e:	e064      	b.n	800264a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	4618      	mov	r0, r3
 8002588:	f000 fa44 	bl	8002a14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699a      	ldr	r2, [r3, #24]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800259a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	699a      	ldr	r2, [r3, #24]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6999      	ldr	r1, [r3, #24]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	021a      	lsls	r2, r3, #8
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	619a      	str	r2, [r3, #24]
      break;
 80025c0:	e043      	b.n	800264a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68b9      	ldr	r1, [r7, #8]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 fa8f 	bl	8002aec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	69da      	ldr	r2, [r3, #28]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f042 0208 	orr.w	r2, r2, #8
 80025dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	69da      	ldr	r2, [r3, #28]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0204 	bic.w	r2, r2, #4
 80025ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	69d9      	ldr	r1, [r3, #28]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	61da      	str	r2, [r3, #28]
      break;
 8002600:	e023      	b.n	800264a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68b9      	ldr	r1, [r7, #8]
 8002608:	4618      	mov	r0, r3
 800260a:	f000 fad9 	bl	8002bc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	69da      	ldr	r2, [r3, #28]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800261c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	69da      	ldr	r2, [r3, #28]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800262c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	69d9      	ldr	r1, [r3, #28]
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	021a      	lsls	r2, r3, #8
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	61da      	str	r2, [r3, #28]
      break;
 8002642:	e002      	b.n	800264a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	75fb      	strb	r3, [r7, #23]
      break;
 8002648:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002652:	7dfb      	ldrb	r3, [r7, #23]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_TIM_ConfigClockSource+0x1c>
 8002674:	2302      	movs	r3, #2
 8002676:	e0b4      	b.n	80027e2 <HAL_TIM_ConfigClockSource+0x186>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800269e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026b0:	d03e      	beq.n	8002730 <HAL_TIM_ConfigClockSource+0xd4>
 80026b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026b6:	f200 8087 	bhi.w	80027c8 <HAL_TIM_ConfigClockSource+0x16c>
 80026ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026be:	f000 8086 	beq.w	80027ce <HAL_TIM_ConfigClockSource+0x172>
 80026c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026c6:	d87f      	bhi.n	80027c8 <HAL_TIM_ConfigClockSource+0x16c>
 80026c8:	2b70      	cmp	r3, #112	@ 0x70
 80026ca:	d01a      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0xa6>
 80026cc:	2b70      	cmp	r3, #112	@ 0x70
 80026ce:	d87b      	bhi.n	80027c8 <HAL_TIM_ConfigClockSource+0x16c>
 80026d0:	2b60      	cmp	r3, #96	@ 0x60
 80026d2:	d050      	beq.n	8002776 <HAL_TIM_ConfigClockSource+0x11a>
 80026d4:	2b60      	cmp	r3, #96	@ 0x60
 80026d6:	d877      	bhi.n	80027c8 <HAL_TIM_ConfigClockSource+0x16c>
 80026d8:	2b50      	cmp	r3, #80	@ 0x50
 80026da:	d03c      	beq.n	8002756 <HAL_TIM_ConfigClockSource+0xfa>
 80026dc:	2b50      	cmp	r3, #80	@ 0x50
 80026de:	d873      	bhi.n	80027c8 <HAL_TIM_ConfigClockSource+0x16c>
 80026e0:	2b40      	cmp	r3, #64	@ 0x40
 80026e2:	d058      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0x13a>
 80026e4:	2b40      	cmp	r3, #64	@ 0x40
 80026e6:	d86f      	bhi.n	80027c8 <HAL_TIM_ConfigClockSource+0x16c>
 80026e8:	2b30      	cmp	r3, #48	@ 0x30
 80026ea:	d064      	beq.n	80027b6 <HAL_TIM_ConfigClockSource+0x15a>
 80026ec:	2b30      	cmp	r3, #48	@ 0x30
 80026ee:	d86b      	bhi.n	80027c8 <HAL_TIM_ConfigClockSource+0x16c>
 80026f0:	2b20      	cmp	r3, #32
 80026f2:	d060      	beq.n	80027b6 <HAL_TIM_ConfigClockSource+0x15a>
 80026f4:	2b20      	cmp	r3, #32
 80026f6:	d867      	bhi.n	80027c8 <HAL_TIM_ConfigClockSource+0x16c>
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d05c      	beq.n	80027b6 <HAL_TIM_ConfigClockSource+0x15a>
 80026fc:	2b10      	cmp	r3, #16
 80026fe:	d05a      	beq.n	80027b6 <HAL_TIM_ConfigClockSource+0x15a>
 8002700:	e062      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002712:	f000 fb1f 	bl	8002d54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002724:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	609a      	str	r2, [r3, #8]
      break;
 800272e:	e04f      	b.n	80027d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002740:	f000 fb08 	bl	8002d54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002752:	609a      	str	r2, [r3, #8]
      break;
 8002754:	e03c      	b.n	80027d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002762:	461a      	mov	r2, r3
 8002764:	f000 fa7c 	bl	8002c60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2150      	movs	r1, #80	@ 0x50
 800276e:	4618      	mov	r0, r3
 8002770:	f000 fad5 	bl	8002d1e <TIM_ITRx_SetConfig>
      break;
 8002774:	e02c      	b.n	80027d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002782:	461a      	mov	r2, r3
 8002784:	f000 fa9b 	bl	8002cbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2160      	movs	r1, #96	@ 0x60
 800278e:	4618      	mov	r0, r3
 8002790:	f000 fac5 	bl	8002d1e <TIM_ITRx_SetConfig>
      break;
 8002794:	e01c      	b.n	80027d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027a2:	461a      	mov	r2, r3
 80027a4:	f000 fa5c 	bl	8002c60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2140      	movs	r1, #64	@ 0x40
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fab5 	bl	8002d1e <TIM_ITRx_SetConfig>
      break;
 80027b4:	e00c      	b.n	80027d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4619      	mov	r1, r3
 80027c0:	4610      	mov	r0, r2
 80027c2:	f000 faac 	bl	8002d1e <TIM_ITRx_SetConfig>
      break;
 80027c6:	e003      	b.n	80027d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	73fb      	strb	r3, [r7, #15]
      break;
 80027cc:	e000      	b.n	80027d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a37      	ldr	r2, [pc, #220]	@ (800292c <TIM_Base_SetConfig+0xf0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00f      	beq.n	8002874 <TIM_Base_SetConfig+0x38>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800285a:	d00b      	beq.n	8002874 <TIM_Base_SetConfig+0x38>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a34      	ldr	r2, [pc, #208]	@ (8002930 <TIM_Base_SetConfig+0xf4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d007      	beq.n	8002874 <TIM_Base_SetConfig+0x38>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a33      	ldr	r2, [pc, #204]	@ (8002934 <TIM_Base_SetConfig+0xf8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d003      	beq.n	8002874 <TIM_Base_SetConfig+0x38>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a32      	ldr	r2, [pc, #200]	@ (8002938 <TIM_Base_SetConfig+0xfc>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d108      	bne.n	8002886 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800287a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a28      	ldr	r2, [pc, #160]	@ (800292c <TIM_Base_SetConfig+0xf0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d01b      	beq.n	80028c6 <TIM_Base_SetConfig+0x8a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002894:	d017      	beq.n	80028c6 <TIM_Base_SetConfig+0x8a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a25      	ldr	r2, [pc, #148]	@ (8002930 <TIM_Base_SetConfig+0xf4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d013      	beq.n	80028c6 <TIM_Base_SetConfig+0x8a>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a24      	ldr	r2, [pc, #144]	@ (8002934 <TIM_Base_SetConfig+0xf8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d00f      	beq.n	80028c6 <TIM_Base_SetConfig+0x8a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a23      	ldr	r2, [pc, #140]	@ (8002938 <TIM_Base_SetConfig+0xfc>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00b      	beq.n	80028c6 <TIM_Base_SetConfig+0x8a>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a22      	ldr	r2, [pc, #136]	@ (800293c <TIM_Base_SetConfig+0x100>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d007      	beq.n	80028c6 <TIM_Base_SetConfig+0x8a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a21      	ldr	r2, [pc, #132]	@ (8002940 <TIM_Base_SetConfig+0x104>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d003      	beq.n	80028c6 <TIM_Base_SetConfig+0x8a>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a20      	ldr	r2, [pc, #128]	@ (8002944 <TIM_Base_SetConfig+0x108>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d108      	bne.n	80028d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a0c      	ldr	r2, [pc, #48]	@ (800292c <TIM_Base_SetConfig+0xf0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d103      	bne.n	8002906 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f043 0204 	orr.w	r2, r3, #4
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	601a      	str	r2, [r3, #0]
}
 800291e:	bf00      	nop
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40010000 	.word	0x40010000
 8002930:	40000400 	.word	0x40000400
 8002934:	40000800 	.word	0x40000800
 8002938:	40000c00 	.word	0x40000c00
 800293c:	40014000 	.word	0x40014000
 8002940:	40014400 	.word	0x40014400
 8002944:	40014800 	.word	0x40014800

08002948 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002948:	b480      	push	{r7}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	f023 0201 	bic.w	r2, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f023 0303 	bic.w	r3, r3, #3
 800297e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4313      	orrs	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f023 0302 	bic.w	r3, r3, #2
 8002990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	4313      	orrs	r3, r2
 800299a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a1c      	ldr	r2, [pc, #112]	@ (8002a10 <TIM_OC1_SetConfig+0xc8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d10c      	bne.n	80029be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f023 0308 	bic.w	r3, r3, #8
 80029aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f023 0304 	bic.w	r3, r3, #4
 80029bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a13      	ldr	r2, [pc, #76]	@ (8002a10 <TIM_OC1_SetConfig+0xc8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d111      	bne.n	80029ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80029d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	621a      	str	r2, [r3, #32]
}
 8002a04:	bf00      	nop
 8002a06:	371c      	adds	r7, #28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	40010000 	.word	0x40010000

08002a14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	f023 0210 	bic.w	r2, r3, #16
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	021b      	lsls	r3, r3, #8
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f023 0320 	bic.w	r3, r3, #32
 8002a5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ae8 <TIM_OC2_SetConfig+0xd4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d10d      	bne.n	8002a90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a15      	ldr	r2, [pc, #84]	@ (8002ae8 <TIM_OC2_SetConfig+0xd4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d113      	bne.n	8002ac0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	621a      	str	r2, [r3, #32]
}
 8002ada:	bf00      	nop
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40010000 	.word	0x40010000

08002aec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f023 0303 	bic.w	r3, r3, #3
 8002b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a1d      	ldr	r2, [pc, #116]	@ (8002bbc <TIM_OC3_SetConfig+0xd0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d10d      	bne.n	8002b66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	021b      	lsls	r3, r3, #8
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002b64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a14      	ldr	r2, [pc, #80]	@ (8002bbc <TIM_OC3_SetConfig+0xd0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d113      	bne.n	8002b96 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	621a      	str	r2, [r3, #32]
}
 8002bb0:	bf00      	nop
 8002bb2:	371c      	adds	r7, #28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	40010000 	.word	0x40010000

08002bc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	021b      	lsls	r3, r3, #8
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	031b      	lsls	r3, r3, #12
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a10      	ldr	r2, [pc, #64]	@ (8002c5c <TIM_OC4_SetConfig+0x9c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d109      	bne.n	8002c34 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	019b      	lsls	r3, r3, #6
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	621a      	str	r2, [r3, #32]
}
 8002c4e:	bf00      	nop
 8002c50:	371c      	adds	r7, #28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40010000 	.word	0x40010000

08002c60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	f023 0201 	bic.w	r2, r3, #1
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f023 030a 	bic.w	r3, r3, #10
 8002c9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	621a      	str	r2, [r3, #32]
}
 8002cb2:	bf00      	nop
 8002cb4:	371c      	adds	r7, #28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b087      	sub	sp, #28
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	60f8      	str	r0, [r7, #12]
 8002cc6:	60b9      	str	r1, [r7, #8]
 8002cc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	f023 0210 	bic.w	r2, r3, #16
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ce8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	031b      	lsls	r3, r3, #12
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002cfa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	621a      	str	r2, [r3, #32]
}
 8002d12:	bf00      	nop
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b085      	sub	sp, #20
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f043 0307 	orr.w	r3, r3, #7
 8002d40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	609a      	str	r2, [r3, #8]
}
 8002d48:	bf00      	nop
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b087      	sub	sp, #28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	021a      	lsls	r2, r3, #8
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	431a      	orrs	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	609a      	str	r2, [r3, #8]
}
 8002d88:	bf00      	nop
 8002d8a:	371c      	adds	r7, #28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f003 031f 	and.w	r3, r3, #31
 8002da6:	2201      	movs	r2, #1
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6a1a      	ldr	r2, [r3, #32]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	401a      	ands	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a1a      	ldr	r2, [r3, #32]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f003 031f 	and.w	r3, r3, #31
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	621a      	str	r2, [r3, #32]
}
 8002dd2:	bf00      	nop
 8002dd4:	371c      	adds	r7, #28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
	...

08002de0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e050      	b.n	8002e9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a1c      	ldr	r2, [pc, #112]	@ (8002ea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d018      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e44:	d013      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a18      	ldr	r2, [pc, #96]	@ (8002eac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00e      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a16      	ldr	r2, [pc, #88]	@ (8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d009      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a15      	ldr	r2, [pc, #84]	@ (8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d004      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a13      	ldr	r2, [pc, #76]	@ (8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d10c      	bne.n	8002e88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40010000 	.word	0x40010000
 8002eac:	40000400 	.word	0x40000400
 8002eb0:	40000800 	.word	0x40000800
 8002eb4:	40000c00 	.word	0x40000c00
 8002eb8:	40014000 	.word	0x40014000

08002ebc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e042      	b.n	8002f7c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d106      	bne.n	8002f10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7fd ff64 	bl	8000dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2224      	movs	r2, #36	@ 0x24
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fcef 	bl	800390c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	d112      	bne.n	8002fc4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <HAL_UART_Receive_IT+0x26>
 8002fa4:	88fb      	ldrh	r3, [r7, #6]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e00b      	b.n	8002fc6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002fb4:	88fb      	ldrh	r3, [r7, #6]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 fad2 	bl	8003564 <UART_Start_Receive_IT>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	e000      	b.n	8002fc6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002fc4:	2302      	movs	r3, #2
  }
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
	...

08002fd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b0ba      	sub	sp, #232	@ 0xe8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800300e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10f      	bne.n	8003036 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800301a:	f003 0320 	and.w	r3, r3, #32
 800301e:	2b00      	cmp	r3, #0
 8003020:	d009      	beq.n	8003036 <HAL_UART_IRQHandler+0x66>
 8003022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fbae 	bl	8003790 <UART_Receive_IT>
      return;
 8003034:	e273      	b.n	800351e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003036:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 80de 	beq.w	80031fc <HAL_UART_IRQHandler+0x22c>
 8003040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d106      	bne.n	800305a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800304c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003050:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 80d1 	beq.w	80031fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800305a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00b      	beq.n	800307e <HAL_UART_IRQHandler+0xae>
 8003066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800306a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003076:	f043 0201 	orr.w	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800307e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003082:	f003 0304 	and.w	r3, r3, #4
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00b      	beq.n	80030a2 <HAL_UART_IRQHandler+0xd2>
 800308a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309a:	f043 0202 	orr.w	r2, r3, #2
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00b      	beq.n	80030c6 <HAL_UART_IRQHandler+0xf6>
 80030ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030be:	f043 0204 	orr.w	r2, r3, #4
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80030c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d011      	beq.n	80030f6 <HAL_UART_IRQHandler+0x126>
 80030d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030d6:	f003 0320 	and.w	r3, r3, #32
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d105      	bne.n	80030ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80030de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d005      	beq.n	80030f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ee:	f043 0208 	orr.w	r2, r3, #8
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 820a 	beq.w	8003514 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003104:	f003 0320 	and.w	r3, r3, #32
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <HAL_UART_IRQHandler+0x14e>
 800310c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b00      	cmp	r3, #0
 8003116:	d002      	beq.n	800311e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 fb39 	bl	8003790 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003128:	2b40      	cmp	r3, #64	@ 0x40
 800312a:	bf0c      	ite	eq
 800312c:	2301      	moveq	r3, #1
 800312e:	2300      	movne	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d103      	bne.n	800314a <HAL_UART_IRQHandler+0x17a>
 8003142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003146:	2b00      	cmp	r3, #0
 8003148:	d04f      	beq.n	80031ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 fa44 	bl	80035d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800315a:	2b40      	cmp	r3, #64	@ 0x40
 800315c:	d141      	bne.n	80031e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	3314      	adds	r3, #20
 8003164:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003168:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800316c:	e853 3f00 	ldrex	r3, [r3]
 8003170:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003174:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003178:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800317c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	3314      	adds	r3, #20
 8003186:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800318a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800318e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003192:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003196:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800319a:	e841 2300 	strex	r3, r2, [r1]
 800319e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80031a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1d9      	bne.n	800315e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d013      	beq.n	80031da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b6:	4a8a      	ldr	r2, [pc, #552]	@ (80033e0 <HAL_UART_IRQHandler+0x410>)
 80031b8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fe f854 	bl	800126c <HAL_DMA_Abort_IT>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d016      	beq.n	80031f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80031d4:	4610      	mov	r0, r2
 80031d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d8:	e00e      	b.n	80031f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f9ac 	bl	8003538 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e0:	e00a      	b.n	80031f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f9a8 	bl	8003538 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e8:	e006      	b.n	80031f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f9a4 	bl	8003538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80031f6:	e18d      	b.n	8003514 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f8:	bf00      	nop
    return;
 80031fa:	e18b      	b.n	8003514 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003200:	2b01      	cmp	r3, #1
 8003202:	f040 8167 	bne.w	80034d4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 8160 	beq.w	80034d4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 8159 	beq.w	80034d4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003222:	2300      	movs	r3, #0
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003242:	2b40      	cmp	r3, #64	@ 0x40
 8003244:	f040 80ce 	bne.w	80033e4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003254:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 80a9 	beq.w	80033b0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003262:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003266:	429a      	cmp	r2, r3
 8003268:	f080 80a2 	bcs.w	80033b0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003272:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800327e:	f000 8088 	beq.w	8003392 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	330c      	adds	r3, #12
 8003288:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003290:	e853 3f00 	ldrex	r3, [r3]
 8003294:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003298:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800329c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	330c      	adds	r3, #12
 80032aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80032ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80032b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80032ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80032be:	e841 2300 	strex	r3, r2, [r1]
 80032c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80032c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1d9      	bne.n	8003282 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	3314      	adds	r3, #20
 80032d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032d8:	e853 3f00 	ldrex	r3, [r3]
 80032dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80032de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032e0:	f023 0301 	bic.w	r3, r3, #1
 80032e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	3314      	adds	r3, #20
 80032ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80032f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80032f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80032fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80032fe:	e841 2300 	strex	r3, r2, [r1]
 8003302:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003304:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1e1      	bne.n	80032ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	3314      	adds	r3, #20
 8003310:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003312:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003314:	e853 3f00 	ldrex	r3, [r3]
 8003318:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800331a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800331c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003320:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	3314      	adds	r3, #20
 800332a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800332e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003330:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003332:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003334:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003336:	e841 2300 	strex	r3, r2, [r1]
 800333a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800333c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1e3      	bne.n	800330a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2220      	movs	r2, #32
 8003346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	330c      	adds	r3, #12
 8003356:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003358:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800335a:	e853 3f00 	ldrex	r3, [r3]
 800335e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003360:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003362:	f023 0310 	bic.w	r3, r3, #16
 8003366:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	330c      	adds	r3, #12
 8003370:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003374:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003376:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003378:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800337a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800337c:	e841 2300 	strex	r3, r2, [r1]
 8003380:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003382:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e3      	bne.n	8003350 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800338c:	4618      	mov	r0, r3
 800338e:	f7fd fefd 	bl	800118c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2202      	movs	r2, #2
 8003396:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	4619      	mov	r1, r3
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f8cf 	bl	800354c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80033ae:	e0b3      	b.n	8003518 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80033b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033b8:	429a      	cmp	r2, r3
 80033ba:	f040 80ad 	bne.w	8003518 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033c8:	f040 80a6 	bne.w	8003518 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80033d6:	4619      	mov	r1, r3
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f8b7 	bl	800354c <HAL_UARTEx_RxEventCallback>
      return;
 80033de:	e09b      	b.n	8003518 <HAL_UART_IRQHandler+0x548>
 80033e0:	0800369f 	.word	0x0800369f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 808e 	beq.w	800351c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003400:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 8089 	beq.w	800351c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	330c      	adds	r3, #12
 8003410:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003414:	e853 3f00 	ldrex	r3, [r3]
 8003418:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800341a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800341c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003420:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	330c      	adds	r3, #12
 800342a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800342e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003430:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003432:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003434:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003436:	e841 2300 	strex	r3, r2, [r1]
 800343a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800343c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1e3      	bne.n	800340a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	3314      	adds	r3, #20
 8003448:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344c:	e853 3f00 	ldrex	r3, [r3]
 8003450:	623b      	str	r3, [r7, #32]
   return(result);
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	f023 0301 	bic.w	r3, r3, #1
 8003458:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3314      	adds	r3, #20
 8003462:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003466:	633a      	str	r2, [r7, #48]	@ 0x30
 8003468:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800346c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800346e:	e841 2300 	strex	r3, r2, [r1]
 8003472:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1e3      	bne.n	8003442 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	330c      	adds	r3, #12
 800348e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	e853 3f00 	ldrex	r3, [r3]
 8003496:	60fb      	str	r3, [r7, #12]
   return(result);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 0310 	bic.w	r3, r3, #16
 800349e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	330c      	adds	r3, #12
 80034a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80034ac:	61fa      	str	r2, [r7, #28]
 80034ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b0:	69b9      	ldr	r1, [r7, #24]
 80034b2:	69fa      	ldr	r2, [r7, #28]
 80034b4:	e841 2300 	strex	r3, r2, [r1]
 80034b8:	617b      	str	r3, [r7, #20]
   return(result);
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1e3      	bne.n	8003488 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034ca:	4619      	mov	r1, r3
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f83d 	bl	800354c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034d2:	e023      	b.n	800351c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d009      	beq.n	80034f4 <HAL_UART_IRQHandler+0x524>
 80034e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f8e7 	bl	80036c0 <UART_Transmit_IT>
    return;
 80034f2:	e014      	b.n	800351e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00e      	beq.n	800351e <HAL_UART_IRQHandler+0x54e>
 8003500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003508:	2b00      	cmp	r3, #0
 800350a:	d008      	beq.n	800351e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f927 	bl	8003760 <UART_EndTransmit_IT>
    return;
 8003512:	e004      	b.n	800351e <HAL_UART_IRQHandler+0x54e>
    return;
 8003514:	bf00      	nop
 8003516:	e002      	b.n	800351e <HAL_UART_IRQHandler+0x54e>
      return;
 8003518:	bf00      	nop
 800351a:	e000      	b.n	800351e <HAL_UART_IRQHandler+0x54e>
      return;
 800351c:	bf00      	nop
  }
}
 800351e:	37e8      	adds	r7, #232	@ 0xe8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	4613      	mov	r3, r2
 8003570:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	88fa      	ldrh	r2, [r7, #6]
 800357c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	88fa      	ldrh	r2, [r7, #6]
 8003582:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2222      	movs	r2, #34	@ 0x22
 800358e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d007      	beq.n	80035aa <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035a8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695a      	ldr	r2, [r3, #20]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0201 	orr.w	r2, r2, #1
 80035b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0220 	orr.w	r2, r2, #32
 80035c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035d8:	b480      	push	{r7}
 80035da:	b095      	sub	sp, #84	@ 0x54
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	330c      	adds	r3, #12
 80035e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ea:	e853 3f00 	ldrex	r3, [r3]
 80035ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	330c      	adds	r3, #12
 80035fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003600:	643a      	str	r2, [r7, #64]	@ 0x40
 8003602:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003604:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003606:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003608:	e841 2300 	strex	r3, r2, [r1]
 800360c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800360e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1e5      	bne.n	80035e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3314      	adds	r3, #20
 800361a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	e853 3f00 	ldrex	r3, [r3]
 8003622:	61fb      	str	r3, [r7, #28]
   return(result);
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f023 0301 	bic.w	r3, r3, #1
 800362a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3314      	adds	r3, #20
 8003632:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003634:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003636:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003638:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800363a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800363c:	e841 2300 	strex	r3, r2, [r1]
 8003640:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1e5      	bne.n	8003614 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364c:	2b01      	cmp	r3, #1
 800364e:	d119      	bne.n	8003684 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	330c      	adds	r3, #12
 8003656:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	e853 3f00 	ldrex	r3, [r3]
 800365e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f023 0310 	bic.w	r3, r3, #16
 8003666:	647b      	str	r3, [r7, #68]	@ 0x44
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	330c      	adds	r3, #12
 800366e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003670:	61ba      	str	r2, [r7, #24]
 8003672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003674:	6979      	ldr	r1, [r7, #20]
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	e841 2300 	strex	r3, r2, [r1]
 800367c:	613b      	str	r3, [r7, #16]
   return(result);
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e5      	bne.n	8003650 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003692:	bf00      	nop
 8003694:	3754      	adds	r7, #84	@ 0x54
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f7ff ff40 	bl	8003538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036b8:	bf00      	nop
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b21      	cmp	r3, #33	@ 0x21
 80036d2:	d13e      	bne.n	8003752 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036dc:	d114      	bne.n	8003708 <UART_Transmit_IT+0x48>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d110      	bne.n	8003708 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	1c9a      	adds	r2, r3, #2
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	621a      	str	r2, [r3, #32]
 8003706:	e008      	b.n	800371a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	1c59      	adds	r1, r3, #1
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6211      	str	r1, [r2, #32]
 8003712:	781a      	ldrb	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29b      	uxth	r3, r3
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	4619      	mov	r1, r3
 8003728:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10f      	bne.n	800374e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800373c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800374c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	e000      	b.n	8003754 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003752:	2302      	movs	r3, #2
  }
}
 8003754:	4618      	mov	r0, r3
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003776:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7ff fecf 	bl	8003524 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08c      	sub	sp, #48	@ 0x30
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003798:	2300      	movs	r3, #0
 800379a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800379c:	2300      	movs	r3, #0
 800379e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b22      	cmp	r3, #34	@ 0x22
 80037aa:	f040 80aa 	bne.w	8003902 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037b6:	d115      	bne.n	80037e4 <UART_Receive_IT+0x54>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d111      	bne.n	80037e4 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037dc:	1c9a      	adds	r2, r3, #2
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80037e2:	e024      	b.n	800382e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037f2:	d007      	beq.n	8003804 <UART_Receive_IT+0x74>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <UART_Receive_IT+0x82>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d106      	bne.n	8003812 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	b2da      	uxtb	r2, r3
 800380c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380e:	701a      	strb	r2, [r3, #0]
 8003810:	e008      	b.n	8003824 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800381e:	b2da      	uxtb	r2, r3
 8003820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003822:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003832:	b29b      	uxth	r3, r3
 8003834:	3b01      	subs	r3, #1
 8003836:	b29b      	uxth	r3, r3
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	4619      	mov	r1, r3
 800383c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800383e:	2b00      	cmp	r3, #0
 8003840:	d15d      	bne.n	80038fe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0220 	bic.w	r2, r2, #32
 8003850:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003860:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695a      	ldr	r2, [r3, #20]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0201 	bic.w	r2, r2, #1
 8003870:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003884:	2b01      	cmp	r3, #1
 8003886:	d135      	bne.n	80038f4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	330c      	adds	r3, #12
 8003894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	e853 3f00 	ldrex	r3, [r3]
 800389c:	613b      	str	r3, [r7, #16]
   return(result);
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f023 0310 	bic.w	r3, r3, #16
 80038a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	330c      	adds	r3, #12
 80038ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ae:	623a      	str	r2, [r7, #32]
 80038b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b2:	69f9      	ldr	r1, [r7, #28]
 80038b4:	6a3a      	ldr	r2, [r7, #32]
 80038b6:	e841 2300 	strex	r3, r2, [r1]
 80038ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1e5      	bne.n	800388e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	2b10      	cmp	r3, #16
 80038ce:	d10a      	bne.n	80038e6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038d0:	2300      	movs	r3, #0
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038ea:	4619      	mov	r1, r3
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff fe2d 	bl	800354c <HAL_UARTEx_RxEventCallback>
 80038f2:	e002      	b.n	80038fa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7fc fe09 	bl	800050c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	e002      	b.n	8003904 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	e000      	b.n	8003904 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003902:	2302      	movs	r3, #2
  }
}
 8003904:	4618      	mov	r0, r3
 8003906:	3730      	adds	r7, #48	@ 0x30
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800390c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003910:	b0c0      	sub	sp, #256	@ 0x100
 8003912:	af00      	add	r7, sp, #0
 8003914:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003928:	68d9      	ldr	r1, [r3, #12]
 800392a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	ea40 0301 	orr.w	r3, r0, r1
 8003934:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	431a      	orrs	r2, r3
 8003944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	431a      	orrs	r2, r3
 800394c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003964:	f021 010c 	bic.w	r1, r1, #12
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003972:	430b      	orrs	r3, r1
 8003974:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003986:	6999      	ldr	r1, [r3, #24]
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	ea40 0301 	orr.w	r3, r0, r1
 8003992:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	4b8f      	ldr	r3, [pc, #572]	@ (8003bd8 <UART_SetConfig+0x2cc>)
 800399c:	429a      	cmp	r2, r3
 800399e:	d005      	beq.n	80039ac <UART_SetConfig+0xa0>
 80039a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	4b8d      	ldr	r3, [pc, #564]	@ (8003bdc <UART_SetConfig+0x2d0>)
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d104      	bne.n	80039b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039ac:	f7fe faa2 	bl	8001ef4 <HAL_RCC_GetPCLK2Freq>
 80039b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80039b4:	e003      	b.n	80039be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039b6:	f7fe fa89 	bl	8001ecc <HAL_RCC_GetPCLK1Freq>
 80039ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039c8:	f040 810c 	bne.w	8003be4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039d0:	2200      	movs	r2, #0
 80039d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80039da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80039de:	4622      	mov	r2, r4
 80039e0:	462b      	mov	r3, r5
 80039e2:	1891      	adds	r1, r2, r2
 80039e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80039e6:	415b      	adcs	r3, r3
 80039e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80039ee:	4621      	mov	r1, r4
 80039f0:	eb12 0801 	adds.w	r8, r2, r1
 80039f4:	4629      	mov	r1, r5
 80039f6:	eb43 0901 	adc.w	r9, r3, r1
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a0e:	4690      	mov	r8, r2
 8003a10:	4699      	mov	r9, r3
 8003a12:	4623      	mov	r3, r4
 8003a14:	eb18 0303 	adds.w	r3, r8, r3
 8003a18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a1c:	462b      	mov	r3, r5
 8003a1e:	eb49 0303 	adc.w	r3, r9, r3
 8003a22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a32:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	18db      	adds	r3, r3, r3
 8003a3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a40:	4613      	mov	r3, r2
 8003a42:	eb42 0303 	adc.w	r3, r2, r3
 8003a46:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a50:	f7fc fbc6 	bl	80001e0 <__aeabi_uldivmod>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4b61      	ldr	r3, [pc, #388]	@ (8003be0 <UART_SetConfig+0x2d4>)
 8003a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	011c      	lsls	r4, r3, #4
 8003a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a66:	2200      	movs	r2, #0
 8003a68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a6c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a74:	4642      	mov	r2, r8
 8003a76:	464b      	mov	r3, r9
 8003a78:	1891      	adds	r1, r2, r2
 8003a7a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a7c:	415b      	adcs	r3, r3
 8003a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a84:	4641      	mov	r1, r8
 8003a86:	eb12 0a01 	adds.w	sl, r2, r1
 8003a8a:	4649      	mov	r1, r9
 8003a8c:	eb43 0b01 	adc.w	fp, r3, r1
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003aa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aa4:	4692      	mov	sl, r2
 8003aa6:	469b      	mov	fp, r3
 8003aa8:	4643      	mov	r3, r8
 8003aaa:	eb1a 0303 	adds.w	r3, sl, r3
 8003aae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ab2:	464b      	mov	r3, r9
 8003ab4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ab8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ac8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003acc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	18db      	adds	r3, r3, r3
 8003ad4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	eb42 0303 	adc.w	r3, r2, r3
 8003adc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ade:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ae2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ae6:	f7fc fb7b 	bl	80001e0 <__aeabi_uldivmod>
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	4611      	mov	r1, r2
 8003af0:	4b3b      	ldr	r3, [pc, #236]	@ (8003be0 <UART_SetConfig+0x2d4>)
 8003af2:	fba3 2301 	umull	r2, r3, r3, r1
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	2264      	movs	r2, #100	@ 0x64
 8003afa:	fb02 f303 	mul.w	r3, r2, r3
 8003afe:	1acb      	subs	r3, r1, r3
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b06:	4b36      	ldr	r3, [pc, #216]	@ (8003be0 <UART_SetConfig+0x2d4>)
 8003b08:	fba3 2302 	umull	r2, r3, r3, r2
 8003b0c:	095b      	lsrs	r3, r3, #5
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b14:	441c      	add	r4, r3
 8003b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b20:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b28:	4642      	mov	r2, r8
 8003b2a:	464b      	mov	r3, r9
 8003b2c:	1891      	adds	r1, r2, r2
 8003b2e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b30:	415b      	adcs	r3, r3
 8003b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b38:	4641      	mov	r1, r8
 8003b3a:	1851      	adds	r1, r2, r1
 8003b3c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b3e:	4649      	mov	r1, r9
 8003b40:	414b      	adcs	r3, r1
 8003b42:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b50:	4659      	mov	r1, fp
 8003b52:	00cb      	lsls	r3, r1, #3
 8003b54:	4651      	mov	r1, sl
 8003b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b5a:	4651      	mov	r1, sl
 8003b5c:	00ca      	lsls	r2, r1, #3
 8003b5e:	4610      	mov	r0, r2
 8003b60:	4619      	mov	r1, r3
 8003b62:	4603      	mov	r3, r0
 8003b64:	4642      	mov	r2, r8
 8003b66:	189b      	adds	r3, r3, r2
 8003b68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b6c:	464b      	mov	r3, r9
 8003b6e:	460a      	mov	r2, r1
 8003b70:	eb42 0303 	adc.w	r3, r2, r3
 8003b74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b84:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	18db      	adds	r3, r3, r3
 8003b90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b92:	4613      	mov	r3, r2
 8003b94:	eb42 0303 	adc.w	r3, r2, r3
 8003b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003ba2:	f7fc fb1d 	bl	80001e0 <__aeabi_uldivmod>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4b0d      	ldr	r3, [pc, #52]	@ (8003be0 <UART_SetConfig+0x2d4>)
 8003bac:	fba3 1302 	umull	r1, r3, r3, r2
 8003bb0:	095b      	lsrs	r3, r3, #5
 8003bb2:	2164      	movs	r1, #100	@ 0x64
 8003bb4:	fb01 f303 	mul.w	r3, r1, r3
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	3332      	adds	r3, #50	@ 0x32
 8003bbe:	4a08      	ldr	r2, [pc, #32]	@ (8003be0 <UART_SetConfig+0x2d4>)
 8003bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	f003 0207 	and.w	r2, r3, #7
 8003bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4422      	add	r2, r4
 8003bd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bd4:	e106      	b.n	8003de4 <UART_SetConfig+0x4d8>
 8003bd6:	bf00      	nop
 8003bd8:	40011000 	.word	0x40011000
 8003bdc:	40011400 	.word	0x40011400
 8003be0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003be4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003be8:	2200      	movs	r2, #0
 8003bea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003bee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003bf2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003bf6:	4642      	mov	r2, r8
 8003bf8:	464b      	mov	r3, r9
 8003bfa:	1891      	adds	r1, r2, r2
 8003bfc:	6239      	str	r1, [r7, #32]
 8003bfe:	415b      	adcs	r3, r3
 8003c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c06:	4641      	mov	r1, r8
 8003c08:	1854      	adds	r4, r2, r1
 8003c0a:	4649      	mov	r1, r9
 8003c0c:	eb43 0501 	adc.w	r5, r3, r1
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	00eb      	lsls	r3, r5, #3
 8003c1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c1e:	00e2      	lsls	r2, r4, #3
 8003c20:	4614      	mov	r4, r2
 8003c22:	461d      	mov	r5, r3
 8003c24:	4643      	mov	r3, r8
 8003c26:	18e3      	adds	r3, r4, r3
 8003c28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c2c:	464b      	mov	r3, r9
 8003c2e:	eb45 0303 	adc.w	r3, r5, r3
 8003c32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c52:	4629      	mov	r1, r5
 8003c54:	008b      	lsls	r3, r1, #2
 8003c56:	4621      	mov	r1, r4
 8003c58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c5c:	4621      	mov	r1, r4
 8003c5e:	008a      	lsls	r2, r1, #2
 8003c60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c64:	f7fc fabc 	bl	80001e0 <__aeabi_uldivmod>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4b60      	ldr	r3, [pc, #384]	@ (8003df0 <UART_SetConfig+0x4e4>)
 8003c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c72:	095b      	lsrs	r3, r3, #5
 8003c74:	011c      	lsls	r4, r3, #4
 8003c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c80:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c88:	4642      	mov	r2, r8
 8003c8a:	464b      	mov	r3, r9
 8003c8c:	1891      	adds	r1, r2, r2
 8003c8e:	61b9      	str	r1, [r7, #24]
 8003c90:	415b      	adcs	r3, r3
 8003c92:	61fb      	str	r3, [r7, #28]
 8003c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c98:	4641      	mov	r1, r8
 8003c9a:	1851      	adds	r1, r2, r1
 8003c9c:	6139      	str	r1, [r7, #16]
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	414b      	adcs	r3, r1
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cb0:	4659      	mov	r1, fp
 8003cb2:	00cb      	lsls	r3, r1, #3
 8003cb4:	4651      	mov	r1, sl
 8003cb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cba:	4651      	mov	r1, sl
 8003cbc:	00ca      	lsls	r2, r1, #3
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	4642      	mov	r2, r8
 8003cc6:	189b      	adds	r3, r3, r2
 8003cc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ccc:	464b      	mov	r3, r9
 8003cce:	460a      	mov	r2, r1
 8003cd0:	eb42 0303 	adc.w	r3, r2, r3
 8003cd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ce2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003cf0:	4649      	mov	r1, r9
 8003cf2:	008b      	lsls	r3, r1, #2
 8003cf4:	4641      	mov	r1, r8
 8003cf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cfa:	4641      	mov	r1, r8
 8003cfc:	008a      	lsls	r2, r1, #2
 8003cfe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d02:	f7fc fa6d 	bl	80001e0 <__aeabi_uldivmod>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	4b38      	ldr	r3, [pc, #224]	@ (8003df0 <UART_SetConfig+0x4e4>)
 8003d0e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d12:	095b      	lsrs	r3, r3, #5
 8003d14:	2264      	movs	r2, #100	@ 0x64
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	1acb      	subs	r3, r1, r3
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	3332      	adds	r3, #50	@ 0x32
 8003d20:	4a33      	ldr	r2, [pc, #204]	@ (8003df0 <UART_SetConfig+0x4e4>)
 8003d22:	fba2 2303 	umull	r2, r3, r2, r3
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d2c:	441c      	add	r4, r3
 8003d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d32:	2200      	movs	r2, #0
 8003d34:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d36:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d3c:	4642      	mov	r2, r8
 8003d3e:	464b      	mov	r3, r9
 8003d40:	1891      	adds	r1, r2, r2
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	415b      	adcs	r3, r3
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d4c:	4641      	mov	r1, r8
 8003d4e:	1851      	adds	r1, r2, r1
 8003d50:	6039      	str	r1, [r7, #0]
 8003d52:	4649      	mov	r1, r9
 8003d54:	414b      	adcs	r3, r1
 8003d56:	607b      	str	r3, [r7, #4]
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d64:	4659      	mov	r1, fp
 8003d66:	00cb      	lsls	r3, r1, #3
 8003d68:	4651      	mov	r1, sl
 8003d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d6e:	4651      	mov	r1, sl
 8003d70:	00ca      	lsls	r2, r1, #3
 8003d72:	4610      	mov	r0, r2
 8003d74:	4619      	mov	r1, r3
 8003d76:	4603      	mov	r3, r0
 8003d78:	4642      	mov	r2, r8
 8003d7a:	189b      	adds	r3, r3, r2
 8003d7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d7e:	464b      	mov	r3, r9
 8003d80:	460a      	mov	r2, r1
 8003d82:	eb42 0303 	adc.w	r3, r2, r3
 8003d86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d92:	667a      	str	r2, [r7, #100]	@ 0x64
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003da0:	4649      	mov	r1, r9
 8003da2:	008b      	lsls	r3, r1, #2
 8003da4:	4641      	mov	r1, r8
 8003da6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003daa:	4641      	mov	r1, r8
 8003dac:	008a      	lsls	r2, r1, #2
 8003dae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003db2:	f7fc fa15 	bl	80001e0 <__aeabi_uldivmod>
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	4b0d      	ldr	r3, [pc, #52]	@ (8003df0 <UART_SetConfig+0x4e4>)
 8003dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8003dc0:	095b      	lsrs	r3, r3, #5
 8003dc2:	2164      	movs	r1, #100	@ 0x64
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	3332      	adds	r3, #50	@ 0x32
 8003dce:	4a08      	ldr	r2, [pc, #32]	@ (8003df0 <UART_SetConfig+0x4e4>)
 8003dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd4:	095b      	lsrs	r3, r3, #5
 8003dd6:	f003 020f 	and.w	r2, r3, #15
 8003dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4422      	add	r2, r4
 8003de2:	609a      	str	r2, [r3, #8]
}
 8003de4:	bf00      	nop
 8003de6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003dea:	46bd      	mov	sp, r7
 8003dec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003df0:	51eb851f 	.word	0x51eb851f

08003df4 <__NVIC_SetPriority>:
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	6039      	str	r1, [r7, #0]
 8003dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	db0a      	blt.n	8003e1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	490c      	ldr	r1, [pc, #48]	@ (8003e40 <__NVIC_SetPriority+0x4c>)
 8003e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e12:	0112      	lsls	r2, r2, #4
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	440b      	add	r3, r1
 8003e18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003e1c:	e00a      	b.n	8003e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	4908      	ldr	r1, [pc, #32]	@ (8003e44 <__NVIC_SetPriority+0x50>)
 8003e24:	79fb      	ldrb	r3, [r7, #7]
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	3b04      	subs	r3, #4
 8003e2c:	0112      	lsls	r2, r2, #4
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	440b      	add	r3, r1
 8003e32:	761a      	strb	r2, [r3, #24]
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	e000e100 	.word	0xe000e100
 8003e44:	e000ed00 	.word	0xe000ed00

08003e48 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003e4c:	4b05      	ldr	r3, [pc, #20]	@ (8003e64 <SysTick_Handler+0x1c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003e50:	f001 fd46 	bl	80058e0 <xTaskGetSchedulerState>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d001      	beq.n	8003e5e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003e5a:	f002 fb3d 	bl	80064d8 <xPortSysTickHandler>
  }
}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	e000e010 	.word	0xe000e010

08003e68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	f06f 0004 	mvn.w	r0, #4
 8003e72:	f7ff ffbf 	bl	8003df4 <__NVIC_SetPriority>
#endif
}
 8003e76:	bf00      	nop
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e82:	f3ef 8305 	mrs	r3, IPSR
 8003e86:	603b      	str	r3, [r7, #0]
  return(result);
 8003e88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003e8e:	f06f 0305 	mvn.w	r3, #5
 8003e92:	607b      	str	r3, [r7, #4]
 8003e94:	e00c      	b.n	8003eb0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003e96:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec0 <osKernelInitialize+0x44>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d105      	bne.n	8003eaa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003e9e:	4b08      	ldr	r3, [pc, #32]	@ (8003ec0 <osKernelInitialize+0x44>)
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	607b      	str	r3, [r7, #4]
 8003ea8:	e002      	b.n	8003eb0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003eaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003eae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003eb0:	687b      	ldr	r3, [r7, #4]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	200001ac 	.word	0x200001ac

08003ec4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003eca:	f3ef 8305 	mrs	r3, IPSR
 8003ece:	603b      	str	r3, [r7, #0]
  return(result);
 8003ed0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <osKernelStart+0x1a>
    stat = osErrorISR;
 8003ed6:	f06f 0305 	mvn.w	r3, #5
 8003eda:	607b      	str	r3, [r7, #4]
 8003edc:	e010      	b.n	8003f00 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003ede:	4b0b      	ldr	r3, [pc, #44]	@ (8003f0c <osKernelStart+0x48>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d109      	bne.n	8003efa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003ee6:	f7ff ffbf 	bl	8003e68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003eea:	4b08      	ldr	r3, [pc, #32]	@ (8003f0c <osKernelStart+0x48>)
 8003eec:	2202      	movs	r2, #2
 8003eee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003ef0:	f001 f892 	bl	8005018 <vTaskStartScheduler>
      stat = osOK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	607b      	str	r3, [r7, #4]
 8003ef8:	e002      	b.n	8003f00 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003efa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003efe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f00:	687b      	ldr	r3, [r7, #4]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	200001ac 	.word	0x200001ac

08003f10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08e      	sub	sp, #56	@ 0x38
 8003f14:	af04      	add	r7, sp, #16
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f20:	f3ef 8305 	mrs	r3, IPSR
 8003f24:	617b      	str	r3, [r7, #20]
  return(result);
 8003f26:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d17e      	bne.n	800402a <osThreadNew+0x11a>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d07b      	beq.n	800402a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003f32:	2380      	movs	r3, #128	@ 0x80
 8003f34:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003f36:	2318      	movs	r3, #24
 8003f38:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003f3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f42:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d045      	beq.n	8003fd6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <osThreadNew+0x48>
        name = attr->name;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <osThreadNew+0x6e>
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	2b38      	cmp	r3, #56	@ 0x38
 8003f70:	d805      	bhi.n	8003f7e <osThreadNew+0x6e>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <osThreadNew+0x72>
        return (NULL);
 8003f7e:	2300      	movs	r3, #0
 8003f80:	e054      	b.n	800402c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	089b      	lsrs	r3, r3, #2
 8003f90:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00e      	beq.n	8003fb8 <osThreadNew+0xa8>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	2ba7      	cmp	r3, #167	@ 0xa7
 8003fa0:	d90a      	bls.n	8003fb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d006      	beq.n	8003fb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <osThreadNew+0xa8>
        mem = 1;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	61bb      	str	r3, [r7, #24]
 8003fb6:	e010      	b.n	8003fda <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10c      	bne.n	8003fda <osThreadNew+0xca>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d108      	bne.n	8003fda <osThreadNew+0xca>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d104      	bne.n	8003fda <osThreadNew+0xca>
          mem = 0;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	61bb      	str	r3, [r7, #24]
 8003fd4:	e001      	b.n	8003fda <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d110      	bne.n	8004002 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003fe8:	9202      	str	r2, [sp, #8]
 8003fea:	9301      	str	r3, [sp, #4]
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	6a3a      	ldr	r2, [r7, #32]
 8003ff4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 fe1a 	bl	8004c30 <xTaskCreateStatic>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	e013      	b.n	800402a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d110      	bne.n	800402a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	b29a      	uxth	r2, r3
 800400c:	f107 0310 	add.w	r3, r7, #16
 8004010:	9301      	str	r3, [sp, #4]
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 fe68 	bl	8004cf0 <xTaskCreate>
 8004020:	4603      	mov	r3, r0
 8004022:	2b01      	cmp	r3, #1
 8004024:	d001      	beq.n	800402a <osThreadNew+0x11a>
            hTask = NULL;
 8004026:	2300      	movs	r3, #0
 8004028:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800402a:	693b      	ldr	r3, [r7, #16]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3728      	adds	r7, #40	@ 0x28
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800403c:	f3ef 8305 	mrs	r3, IPSR
 8004040:	60bb      	str	r3, [r7, #8]
  return(result);
 8004042:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <osDelay+0x1c>
    stat = osErrorISR;
 8004048:	f06f 0305 	mvn.w	r3, #5
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	e007      	b.n	8004060 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <osDelay+0x2c>
      vTaskDelay(ticks);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 ffa6 	bl	8004fac <vTaskDelay>
    }
  }

  return (stat);
 8004060:	68fb      	ldr	r3, [r7, #12]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4a07      	ldr	r2, [pc, #28]	@ (8004098 <vApplicationGetIdleTaskMemory+0x2c>)
 800407c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	4a06      	ldr	r2, [pc, #24]	@ (800409c <vApplicationGetIdleTaskMemory+0x30>)
 8004082:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2280      	movs	r2, #128	@ 0x80
 8004088:	601a      	str	r2, [r3, #0]
}
 800408a:	bf00      	nop
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	200001b0 	.word	0x200001b0
 800409c:	20000258 	.word	0x20000258

080040a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4a07      	ldr	r2, [pc, #28]	@ (80040cc <vApplicationGetTimerTaskMemory+0x2c>)
 80040b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	4a06      	ldr	r2, [pc, #24]	@ (80040d0 <vApplicationGetTimerTaskMemory+0x30>)
 80040b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040be:	601a      	str	r2, [r3, #0]
}
 80040c0:	bf00      	nop
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	20000458 	.word	0x20000458
 80040d0:	20000500 	.word	0x20000500

080040d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f103 0208 	add.w	r2, r3, #8
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80040ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f103 0208 	add.w	r2, r3, #8
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f103 0208 	add.w	r2, r3, #8
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800412e:	b480      	push	{r7}
 8004130:	b085      	sub	sp, #20
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	601a      	str	r2, [r3, #0]
}
 800416a:	bf00      	nop
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004176:	b480      	push	{r7}
 8004178:	b085      	sub	sp, #20
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800418c:	d103      	bne.n	8004196 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e00c      	b.n	80041b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3308      	adds	r3, #8
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	e002      	b.n	80041a4 <vListInsert+0x2e>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d2f6      	bcs.n	800419e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	601a      	str	r2, [r3, #0]
}
 80041dc:	bf00      	nop
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6892      	ldr	r2, [r2, #8]
 80041fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6852      	ldr	r2, [r2, #4]
 8004208:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	429a      	cmp	r2, r3
 8004212:	d103      	bne.n	800421c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	1e5a      	subs	r2, r3, #1
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10b      	bne.n	8004268 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004262:	bf00      	nop
 8004264:	bf00      	nop
 8004266:	e7fd      	b.n	8004264 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004268:	f002 f8a6 	bl	80063b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004274:	68f9      	ldr	r1, [r7, #12]
 8004276:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004278:	fb01 f303 	mul.w	r3, r1, r3
 800427c:	441a      	add	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004298:	3b01      	subs	r3, #1
 800429a:	68f9      	ldr	r1, [r7, #12]
 800429c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800429e:	fb01 f303 	mul.w	r3, r1, r3
 80042a2:	441a      	add	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	22ff      	movs	r2, #255	@ 0xff
 80042ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	22ff      	movs	r2, #255	@ 0xff
 80042b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d114      	bne.n	80042e8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d01a      	beq.n	80042fc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3310      	adds	r3, #16
 80042ca:	4618      	mov	r0, r3
 80042cc:	f001 f942 	bl	8005554 <xTaskRemoveFromEventList>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d012      	beq.n	80042fc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80042d6:	4b0d      	ldr	r3, [pc, #52]	@ (800430c <xQueueGenericReset+0xd0>)
 80042d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	e009      	b.n	80042fc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	3310      	adds	r3, #16
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff fef1 	bl	80040d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3324      	adds	r3, #36	@ 0x24
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff feec 	bl	80040d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80042fc:	f002 f88e 	bl	800641c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004300:	2301      	movs	r3, #1
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	e000ed04 	.word	0xe000ed04

08004310 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08e      	sub	sp, #56	@ 0x38
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10b      	bne.n	800433c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004336:	bf00      	nop
 8004338:	bf00      	nop
 800433a:	e7fd      	b.n	8004338 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10b      	bne.n	800435a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop
 8004358:	e7fd      	b.n	8004356 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <xQueueGenericCreateStatic+0x56>
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <xQueueGenericCreateStatic+0x5a>
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <xQueueGenericCreateStatic+0x5c>
 800436a:	2300      	movs	r3, #0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10b      	bne.n	8004388 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	623b      	str	r3, [r7, #32]
}
 8004382:	bf00      	nop
 8004384:	bf00      	nop
 8004386:	e7fd      	b.n	8004384 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d102      	bne.n	8004394 <xQueueGenericCreateStatic+0x84>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <xQueueGenericCreateStatic+0x88>
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <xQueueGenericCreateStatic+0x8a>
 8004398:	2300      	movs	r3, #0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10b      	bne.n	80043b6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800439e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	61fb      	str	r3, [r7, #28]
}
 80043b0:	bf00      	nop
 80043b2:	bf00      	nop
 80043b4:	e7fd      	b.n	80043b2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80043b6:	2350      	movs	r3, #80	@ 0x50
 80043b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2b50      	cmp	r3, #80	@ 0x50
 80043be:	d00b      	beq.n	80043d8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80043c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	61bb      	str	r3, [r7, #24]
}
 80043d2:	bf00      	nop
 80043d4:	bf00      	nop
 80043d6:	e7fd      	b.n	80043d4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80043d8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80043de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00d      	beq.n	8004400 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80043e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043ec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80043f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	4613      	mov	r3, r2
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 f805 	bl	800440a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004402:	4618      	mov	r0, r3
 8004404:	3730      	adds	r7, #48	@ 0x30
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b084      	sub	sp, #16
 800440e:	af00      	add	r7, sp, #0
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	607a      	str	r2, [r7, #4]
 8004416:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d103      	bne.n	8004426 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	e002      	b.n	800442c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004438:	2101      	movs	r1, #1
 800443a:	69b8      	ldr	r0, [r7, #24]
 800443c:	f7ff fefe 	bl	800423c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004448:	bf00      	nop
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08e      	sub	sp, #56	@ 0x38
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800445e:	2300      	movs	r3, #0
 8004460:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10b      	bne.n	8004484 <xQueueGenericSend+0x34>
	__asm volatile
 800446c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004470:	f383 8811 	msr	BASEPRI, r3
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800447e:	bf00      	nop
 8004480:	bf00      	nop
 8004482:	e7fd      	b.n	8004480 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d103      	bne.n	8004492 <xQueueGenericSend+0x42>
 800448a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <xQueueGenericSend+0x46>
 8004492:	2301      	movs	r3, #1
 8004494:	e000      	b.n	8004498 <xQueueGenericSend+0x48>
 8004496:	2300      	movs	r3, #0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10b      	bne.n	80044b4 <xQueueGenericSend+0x64>
	__asm volatile
 800449c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a0:	f383 8811 	msr	BASEPRI, r3
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80044ae:	bf00      	nop
 80044b0:	bf00      	nop
 80044b2:	e7fd      	b.n	80044b0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d103      	bne.n	80044c2 <xQueueGenericSend+0x72>
 80044ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <xQueueGenericSend+0x76>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <xQueueGenericSend+0x78>
 80044c6:	2300      	movs	r3, #0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10b      	bne.n	80044e4 <xQueueGenericSend+0x94>
	__asm volatile
 80044cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	623b      	str	r3, [r7, #32]
}
 80044de:	bf00      	nop
 80044e0:	bf00      	nop
 80044e2:	e7fd      	b.n	80044e0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044e4:	f001 f9fc 	bl	80058e0 <xTaskGetSchedulerState>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d102      	bne.n	80044f4 <xQueueGenericSend+0xa4>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <xQueueGenericSend+0xa8>
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <xQueueGenericSend+0xaa>
 80044f8:	2300      	movs	r3, #0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10b      	bne.n	8004516 <xQueueGenericSend+0xc6>
	__asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	61fb      	str	r3, [r7, #28]
}
 8004510:	bf00      	nop
 8004512:	bf00      	nop
 8004514:	e7fd      	b.n	8004512 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004516:	f001 ff4f 	bl	80063b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800451a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800451e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004522:	429a      	cmp	r2, r3
 8004524:	d302      	bcc.n	800452c <xQueueGenericSend+0xdc>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b02      	cmp	r3, #2
 800452a:	d129      	bne.n	8004580 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	68b9      	ldr	r1, [r7, #8]
 8004530:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004532:	f000 fa0f 	bl	8004954 <prvCopyDataToQueue>
 8004536:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453c:	2b00      	cmp	r3, #0
 800453e:	d010      	beq.n	8004562 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004542:	3324      	adds	r3, #36	@ 0x24
 8004544:	4618      	mov	r0, r3
 8004546:	f001 f805 	bl	8005554 <xTaskRemoveFromEventList>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d013      	beq.n	8004578 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004550:	4b3f      	ldr	r3, [pc, #252]	@ (8004650 <xQueueGenericSend+0x200>)
 8004552:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	e00a      	b.n	8004578 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004564:	2b00      	cmp	r3, #0
 8004566:	d007      	beq.n	8004578 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004568:	4b39      	ldr	r3, [pc, #228]	@ (8004650 <xQueueGenericSend+0x200>)
 800456a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004578:	f001 ff50 	bl	800641c <vPortExitCritical>
				return pdPASS;
 800457c:	2301      	movs	r3, #1
 800457e:	e063      	b.n	8004648 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d103      	bne.n	800458e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004586:	f001 ff49 	bl	800641c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800458a:	2300      	movs	r3, #0
 800458c:	e05c      	b.n	8004648 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800458e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004590:	2b00      	cmp	r3, #0
 8004592:	d106      	bne.n	80045a2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004594:	f107 0314 	add.w	r3, r7, #20
 8004598:	4618      	mov	r0, r3
 800459a:	f001 f83f 	bl	800561c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800459e:	2301      	movs	r3, #1
 80045a0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045a2:	f001 ff3b 	bl	800641c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045a6:	f000 fda7 	bl	80050f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045aa:	f001 ff05 	bl	80063b8 <vPortEnterCritical>
 80045ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045b4:	b25b      	sxtb	r3, r3
 80045b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045ba:	d103      	bne.n	80045c4 <xQueueGenericSend+0x174>
 80045bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045ca:	b25b      	sxtb	r3, r3
 80045cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045d0:	d103      	bne.n	80045da <xQueueGenericSend+0x18a>
 80045d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045da:	f001 ff1f 	bl	800641c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045de:	1d3a      	adds	r2, r7, #4
 80045e0:	f107 0314 	add.w	r3, r7, #20
 80045e4:	4611      	mov	r1, r2
 80045e6:	4618      	mov	r0, r3
 80045e8:	f001 f82e 	bl	8005648 <xTaskCheckForTimeOut>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d124      	bne.n	800463c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80045f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045f4:	f000 faa6 	bl	8004b44 <prvIsQueueFull>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d018      	beq.n	8004630 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80045fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004600:	3310      	adds	r3, #16
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	4611      	mov	r1, r2
 8004606:	4618      	mov	r0, r3
 8004608:	f000 ff52 	bl	80054b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800460c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800460e:	f000 fa31 	bl	8004a74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004612:	f000 fd7f 	bl	8005114 <xTaskResumeAll>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	f47f af7c 	bne.w	8004516 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800461e:	4b0c      	ldr	r3, [pc, #48]	@ (8004650 <xQueueGenericSend+0x200>)
 8004620:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	f3bf 8f6f 	isb	sy
 800462e:	e772      	b.n	8004516 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004630:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004632:	f000 fa1f 	bl	8004a74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004636:	f000 fd6d 	bl	8005114 <xTaskResumeAll>
 800463a:	e76c      	b.n	8004516 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800463c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800463e:	f000 fa19 	bl	8004a74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004642:	f000 fd67 	bl	8005114 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004646:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004648:	4618      	mov	r0, r3
 800464a:	3738      	adds	r7, #56	@ 0x38
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	e000ed04 	.word	0xe000ed04

08004654 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b090      	sub	sp, #64	@ 0x40
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
 8004660:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10b      	bne.n	8004684 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800466c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800467e:	bf00      	nop
 8004680:	bf00      	nop
 8004682:	e7fd      	b.n	8004680 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d103      	bne.n	8004692 <xQueueGenericSendFromISR+0x3e>
 800468a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <xQueueGenericSendFromISR+0x42>
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <xQueueGenericSendFromISR+0x44>
 8004696:	2300      	movs	r3, #0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10b      	bne.n	80046b4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80046ae:	bf00      	nop
 80046b0:	bf00      	nop
 80046b2:	e7fd      	b.n	80046b0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d103      	bne.n	80046c2 <xQueueGenericSendFromISR+0x6e>
 80046ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <xQueueGenericSendFromISR+0x72>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <xQueueGenericSendFromISR+0x74>
 80046c6:	2300      	movs	r3, #0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10b      	bne.n	80046e4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	623b      	str	r3, [r7, #32]
}
 80046de:	bf00      	nop
 80046e0:	bf00      	nop
 80046e2:	e7fd      	b.n	80046e0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046e4:	f001 ff48 	bl	8006578 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80046e8:	f3ef 8211 	mrs	r2, BASEPRI
 80046ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f0:	f383 8811 	msr	BASEPRI, r3
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	61fa      	str	r2, [r7, #28]
 80046fe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004700:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004702:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004706:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800470a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800470c:	429a      	cmp	r2, r3
 800470e:	d302      	bcc.n	8004716 <xQueueGenericSendFromISR+0xc2>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b02      	cmp	r3, #2
 8004714:	d12f      	bne.n	8004776 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004718:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800471c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004724:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800472c:	f000 f912 	bl	8004954 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004730:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004734:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004738:	d112      	bne.n	8004760 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800473a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800473c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473e:	2b00      	cmp	r3, #0
 8004740:	d016      	beq.n	8004770 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004744:	3324      	adds	r3, #36	@ 0x24
 8004746:	4618      	mov	r0, r3
 8004748:	f000 ff04 	bl	8005554 <xTaskRemoveFromEventList>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00e      	beq.n	8004770 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00b      	beq.n	8004770 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	e007      	b.n	8004770 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004760:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004764:	3301      	adds	r3, #1
 8004766:	b2db      	uxtb	r3, r3
 8004768:	b25a      	sxtb	r2, r3
 800476a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800476c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004770:	2301      	movs	r3, #1
 8004772:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004774:	e001      	b.n	800477a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004776:	2300      	movs	r3, #0
 8004778:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800477a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800477c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004784:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004788:	4618      	mov	r0, r3
 800478a:	3740      	adds	r7, #64	@ 0x40
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08c      	sub	sp, #48	@ 0x30
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800479c:	2300      	movs	r3, #0
 800479e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80047a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10b      	bne.n	80047c2 <xQueueReceive+0x32>
	__asm volatile
 80047aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	623b      	str	r3, [r7, #32]
}
 80047bc:	bf00      	nop
 80047be:	bf00      	nop
 80047c0:	e7fd      	b.n	80047be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d103      	bne.n	80047d0 <xQueueReceive+0x40>
 80047c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <xQueueReceive+0x44>
 80047d0:	2301      	movs	r3, #1
 80047d2:	e000      	b.n	80047d6 <xQueueReceive+0x46>
 80047d4:	2300      	movs	r3, #0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10b      	bne.n	80047f2 <xQueueReceive+0x62>
	__asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	61fb      	str	r3, [r7, #28]
}
 80047ec:	bf00      	nop
 80047ee:	bf00      	nop
 80047f0:	e7fd      	b.n	80047ee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047f2:	f001 f875 	bl	80058e0 <xTaskGetSchedulerState>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d102      	bne.n	8004802 <xQueueReceive+0x72>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <xQueueReceive+0x76>
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <xQueueReceive+0x78>
 8004806:	2300      	movs	r3, #0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10b      	bne.n	8004824 <xQueueReceive+0x94>
	__asm volatile
 800480c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	61bb      	str	r3, [r7, #24]
}
 800481e:	bf00      	nop
 8004820:	bf00      	nop
 8004822:	e7fd      	b.n	8004820 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004824:	f001 fdc8 	bl	80063b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01f      	beq.n	8004874 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004834:	68b9      	ldr	r1, [r7, #8]
 8004836:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004838:	f000 f8f6 	bl	8004a28 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800483c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483e:	1e5a      	subs	r2, r3, #1
 8004840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004842:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00f      	beq.n	800486c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800484c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484e:	3310      	adds	r3, #16
 8004850:	4618      	mov	r0, r3
 8004852:	f000 fe7f 	bl	8005554 <xTaskRemoveFromEventList>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d007      	beq.n	800486c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800485c:	4b3c      	ldr	r3, [pc, #240]	@ (8004950 <xQueueReceive+0x1c0>)
 800485e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800486c:	f001 fdd6 	bl	800641c <vPortExitCritical>
				return pdPASS;
 8004870:	2301      	movs	r3, #1
 8004872:	e069      	b.n	8004948 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d103      	bne.n	8004882 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800487a:	f001 fdcf 	bl	800641c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800487e:	2300      	movs	r3, #0
 8004880:	e062      	b.n	8004948 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004884:	2b00      	cmp	r3, #0
 8004886:	d106      	bne.n	8004896 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004888:	f107 0310 	add.w	r3, r7, #16
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fec5 	bl	800561c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004892:	2301      	movs	r3, #1
 8004894:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004896:	f001 fdc1 	bl	800641c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800489a:	f000 fc2d 	bl	80050f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800489e:	f001 fd8b 	bl	80063b8 <vPortEnterCritical>
 80048a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80048a8:	b25b      	sxtb	r3, r3
 80048aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048ae:	d103      	bne.n	80048b8 <xQueueReceive+0x128>
 80048b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048be:	b25b      	sxtb	r3, r3
 80048c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048c4:	d103      	bne.n	80048ce <xQueueReceive+0x13e>
 80048c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048ce:	f001 fda5 	bl	800641c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048d2:	1d3a      	adds	r2, r7, #4
 80048d4:	f107 0310 	add.w	r3, r7, #16
 80048d8:	4611      	mov	r1, r2
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 feb4 	bl	8005648 <xTaskCheckForTimeOut>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d123      	bne.n	800492e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048e8:	f000 f916 	bl	8004b18 <prvIsQueueEmpty>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d017      	beq.n	8004922 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80048f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f4:	3324      	adds	r3, #36	@ 0x24
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	4611      	mov	r1, r2
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fdd8 	bl	80054b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004900:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004902:	f000 f8b7 	bl	8004a74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004906:	f000 fc05 	bl	8005114 <xTaskResumeAll>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d189      	bne.n	8004824 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004910:	4b0f      	ldr	r3, [pc, #60]	@ (8004950 <xQueueReceive+0x1c0>)
 8004912:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	e780      	b.n	8004824 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004922:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004924:	f000 f8a6 	bl	8004a74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004928:	f000 fbf4 	bl	8005114 <xTaskResumeAll>
 800492c:	e77a      	b.n	8004824 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800492e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004930:	f000 f8a0 	bl	8004a74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004934:	f000 fbee 	bl	8005114 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004938:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800493a:	f000 f8ed 	bl	8004b18 <prvIsQueueEmpty>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	f43f af6f 	beq.w	8004824 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004946:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004948:	4618      	mov	r0, r3
 800494a:	3730      	adds	r7, #48	@ 0x30
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	e000ed04 	.word	0xe000ed04

08004954 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004968:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10d      	bne.n	800498e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d14d      	bne.n	8004a16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	4618      	mov	r0, r3
 8004980:	f000 ffcc 	bl	800591c <xTaskPriorityDisinherit>
 8004984:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	609a      	str	r2, [r3, #8]
 800498c:	e043      	b.n	8004a16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d119      	bne.n	80049c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6858      	ldr	r0, [r3, #4]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499c:	461a      	mov	r2, r3
 800499e:	68b9      	ldr	r1, [r7, #8]
 80049a0:	f002 f8a6 	bl	8006af0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ac:	441a      	add	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d32b      	bcc.n	8004a16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	605a      	str	r2, [r3, #4]
 80049c6:	e026      	b.n	8004a16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	68d8      	ldr	r0, [r3, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d0:	461a      	mov	r2, r3
 80049d2:	68b9      	ldr	r1, [r7, #8]
 80049d4:	f002 f88c 	bl	8006af0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	68da      	ldr	r2, [r3, #12]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e0:	425b      	negs	r3, r3
 80049e2:	441a      	add	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	68da      	ldr	r2, [r3, #12]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d207      	bcs.n	8004a04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fc:	425b      	negs	r3, r3
 80049fe:	441a      	add	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d105      	bne.n	8004a16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d002      	beq.n	8004a16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004a1e:	697b      	ldr	r3, [r7, #20]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d018      	beq.n	8004a6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a42:	441a      	add	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d303      	bcc.n	8004a5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68d9      	ldr	r1, [r3, #12]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a64:	461a      	mov	r2, r3
 8004a66:	6838      	ldr	r0, [r7, #0]
 8004a68:	f002 f842 	bl	8006af0 <memcpy>
	}
}
 8004a6c:	bf00      	nop
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004a7c:	f001 fc9c 	bl	80063b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a88:	e011      	b.n	8004aae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d012      	beq.n	8004ab8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	3324      	adds	r3, #36	@ 0x24
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fd5c 	bl	8005554 <xTaskRemoveFromEventList>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004aa2:	f000 fe35 	bl	8005710 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	dce9      	bgt.n	8004a8a <prvUnlockQueue+0x16>
 8004ab6:	e000      	b.n	8004aba <prvUnlockQueue+0x46>
					break;
 8004ab8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	22ff      	movs	r2, #255	@ 0xff
 8004abe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004ac2:	f001 fcab 	bl	800641c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ac6:	f001 fc77 	bl	80063b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ad0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ad2:	e011      	b.n	8004af8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d012      	beq.n	8004b02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3310      	adds	r3, #16
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 fd37 	bl	8005554 <xTaskRemoveFromEventList>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004aec:	f000 fe10 	bl	8005710 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004af0:	7bbb      	ldrb	r3, [r7, #14]
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004af8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	dce9      	bgt.n	8004ad4 <prvUnlockQueue+0x60>
 8004b00:	e000      	b.n	8004b04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	22ff      	movs	r2, #255	@ 0xff
 8004b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004b0c:	f001 fc86 	bl	800641c <vPortExitCritical>
}
 8004b10:	bf00      	nop
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b20:	f001 fc4a 	bl	80063b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d102      	bne.n	8004b32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	e001      	b.n	8004b36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b36:	f001 fc71 	bl	800641c <vPortExitCritical>

	return xReturn;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b4c:	f001 fc34 	bl	80063b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d102      	bne.n	8004b62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	e001      	b.n	8004b66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004b62:	2300      	movs	r3, #0
 8004b64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b66:	f001 fc59 	bl	800641c <vPortExitCritical>

	return xReturn;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	e014      	b.n	8004bae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004b84:	4a0f      	ldr	r2, [pc, #60]	@ (8004bc4 <vQueueAddToRegistry+0x50>)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10b      	bne.n	8004ba8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004b90:	490c      	ldr	r1, [pc, #48]	@ (8004bc4 <vQueueAddToRegistry+0x50>)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004bc4 <vQueueAddToRegistry+0x50>)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004ba6:	e006      	b.n	8004bb6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3301      	adds	r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b07      	cmp	r3, #7
 8004bb2:	d9e7      	bls.n	8004b84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004bb4:	bf00      	nop
 8004bb6:	bf00      	nop
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	20000900 	.word	0x20000900

08004bc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004bd8:	f001 fbee 	bl	80063b8 <vPortEnterCritical>
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004be2:	b25b      	sxtb	r3, r3
 8004be4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004be8:	d103      	bne.n	8004bf2 <vQueueWaitForMessageRestricted+0x2a>
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bf8:	b25b      	sxtb	r3, r3
 8004bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bfe:	d103      	bne.n	8004c08 <vQueueWaitForMessageRestricted+0x40>
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c08:	f001 fc08 	bl	800641c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d106      	bne.n	8004c22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	3324      	adds	r3, #36	@ 0x24
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	68b9      	ldr	r1, [r7, #8]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 fc6d 	bl	80054fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004c22:	6978      	ldr	r0, [r7, #20]
 8004c24:	f7ff ff26 	bl	8004a74 <prvUnlockQueue>
	}
 8004c28:	bf00      	nop
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b08e      	sub	sp, #56	@ 0x38
 8004c34:	af04      	add	r7, sp, #16
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10b      	bne.n	8004c5c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	623b      	str	r3, [r7, #32]
}
 8004c56:	bf00      	nop
 8004c58:	bf00      	nop
 8004c5a:	e7fd      	b.n	8004c58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10b      	bne.n	8004c7a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c66:	f383 8811 	msr	BASEPRI, r3
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	61fb      	str	r3, [r7, #28]
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop
 8004c78:	e7fd      	b.n	8004c76 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c7a:	23a8      	movs	r3, #168	@ 0xa8
 8004c7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	2ba8      	cmp	r3, #168	@ 0xa8
 8004c82:	d00b      	beq.n	8004c9c <xTaskCreateStatic+0x6c>
	__asm volatile
 8004c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	61bb      	str	r3, [r7, #24]
}
 8004c96:	bf00      	nop
 8004c98:	bf00      	nop
 8004c9a:	e7fd      	b.n	8004c98 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c9c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d01e      	beq.n	8004ce2 <xTaskCreateStatic+0xb2>
 8004ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d01b      	beq.n	8004ce2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004cb2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	9303      	str	r3, [sp, #12]
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc2:	9302      	str	r3, [sp, #8]
 8004cc4:	f107 0314 	add.w	r3, r7, #20
 8004cc8:	9301      	str	r3, [sp, #4]
 8004cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	68b9      	ldr	r1, [r7, #8]
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 f851 	bl	8004d7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cdc:	f000 f8f6 	bl	8004ecc <prvAddNewTaskToReadyList>
 8004ce0:	e001      	b.n	8004ce6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ce6:	697b      	ldr	r3, [r7, #20]
	}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3728      	adds	r7, #40	@ 0x28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08c      	sub	sp, #48	@ 0x30
 8004cf4:	af04      	add	r7, sp, #16
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	603b      	str	r3, [r7, #0]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d00:	88fb      	ldrh	r3, [r7, #6]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4618      	mov	r0, r3
 8004d06:	f001 fc79 	bl	80065fc <pvPortMalloc>
 8004d0a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00e      	beq.n	8004d30 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d12:	20a8      	movs	r0, #168	@ 0xa8
 8004d14:	f001 fc72 	bl	80065fc <pvPortMalloc>
 8004d18:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d26:	e005      	b.n	8004d34 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d28:	6978      	ldr	r0, [r7, #20]
 8004d2a:	f001 fd35 	bl	8006798 <vPortFree>
 8004d2e:	e001      	b.n	8004d34 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d30:	2300      	movs	r3, #0
 8004d32:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d017      	beq.n	8004d6a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d42:	88fa      	ldrh	r2, [r7, #6]
 8004d44:	2300      	movs	r3, #0
 8004d46:	9303      	str	r3, [sp, #12]
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	9302      	str	r3, [sp, #8]
 8004d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d4e:	9301      	str	r3, [sp, #4]
 8004d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	68b9      	ldr	r1, [r7, #8]
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 f80f 	bl	8004d7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d5e:	69f8      	ldr	r0, [r7, #28]
 8004d60:	f000 f8b4 	bl	8004ecc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d64:	2301      	movs	r3, #1
 8004d66:	61bb      	str	r3, [r7, #24]
 8004d68:	e002      	b.n	8004d70 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d70:	69bb      	ldr	r3, [r7, #24]
	}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3720      	adds	r7, #32
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
 8004d88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	461a      	mov	r2, r3
 8004d94:	21a5      	movs	r1, #165	@ 0xa5
 8004d96:	f001 fe1f 	bl	80069d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004da4:	3b01      	subs	r3, #1
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	f023 0307 	bic.w	r3, r3, #7
 8004db2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00b      	beq.n	8004dd6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	617b      	str	r3, [r7, #20]
}
 8004dd0:	bf00      	nop
 8004dd2:	bf00      	nop
 8004dd4:	e7fd      	b.n	8004dd2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01f      	beq.n	8004e1c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ddc:	2300      	movs	r3, #0
 8004dde:	61fb      	str	r3, [r7, #28]
 8004de0:	e012      	b.n	8004e08 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	4413      	add	r3, r2
 8004de8:	7819      	ldrb	r1, [r3, #0]
 8004dea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	4413      	add	r3, r2
 8004df0:	3334      	adds	r3, #52	@ 0x34
 8004df2:	460a      	mov	r2, r1
 8004df4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d006      	beq.n	8004e10 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	3301      	adds	r3, #1
 8004e06:	61fb      	str	r3, [r7, #28]
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	2b0f      	cmp	r3, #15
 8004e0c:	d9e9      	bls.n	8004de2 <prvInitialiseNewTask+0x66>
 8004e0e:	e000      	b.n	8004e12 <prvInitialiseNewTask+0x96>
			{
				break;
 8004e10:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e1a:	e003      	b.n	8004e24 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e26:	2b37      	cmp	r3, #55	@ 0x37
 8004e28:	d901      	bls.n	8004e2e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e2a:	2337      	movs	r3, #55	@ 0x37
 8004e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e32:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e38:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e42:	3304      	adds	r3, #4
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff f965 	bl	8004114 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4c:	3318      	adds	r3, #24
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7ff f960 	bl	8004114 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e68:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7c:	3354      	adds	r3, #84	@ 0x54
 8004e7e:	224c      	movs	r2, #76	@ 0x4c
 8004e80:	2100      	movs	r1, #0
 8004e82:	4618      	mov	r0, r3
 8004e84:	f001 fda8 	bl	80069d8 <memset>
 8004e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8a:	4a0d      	ldr	r2, [pc, #52]	@ (8004ec0 <prvInitialiseNewTask+0x144>)
 8004e8c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e90:	4a0c      	ldr	r2, [pc, #48]	@ (8004ec4 <prvInitialiseNewTask+0x148>)
 8004e92:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e96:	4a0c      	ldr	r2, [pc, #48]	@ (8004ec8 <prvInitialiseNewTask+0x14c>)
 8004e98:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	68f9      	ldr	r1, [r7, #12]
 8004e9e:	69b8      	ldr	r0, [r7, #24]
 8004ea0:	f001 f95a 	bl	8006158 <pxPortInitialiseStack>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eb6:	bf00      	nop
 8004eb8:	3720      	adds	r7, #32
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20004b94 	.word	0x20004b94
 8004ec4:	20004bfc 	.word	0x20004bfc
 8004ec8:	20004c64 	.word	0x20004c64

08004ecc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ed4:	f001 fa70 	bl	80063b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8004f90 <prvAddNewTaskToReadyList+0xc4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3301      	adds	r3, #1
 8004ede:	4a2c      	ldr	r2, [pc, #176]	@ (8004f90 <prvAddNewTaskToReadyList+0xc4>)
 8004ee0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ee2:	4b2c      	ldr	r3, [pc, #176]	@ (8004f94 <prvAddNewTaskToReadyList+0xc8>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d109      	bne.n	8004efe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004eea:	4a2a      	ldr	r2, [pc, #168]	@ (8004f94 <prvAddNewTaskToReadyList+0xc8>)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ef0:	4b27      	ldr	r3, [pc, #156]	@ (8004f90 <prvAddNewTaskToReadyList+0xc4>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d110      	bne.n	8004f1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ef8:	f000 fc2e 	bl	8005758 <prvInitialiseTaskLists>
 8004efc:	e00d      	b.n	8004f1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004efe:	4b26      	ldr	r3, [pc, #152]	@ (8004f98 <prvAddNewTaskToReadyList+0xcc>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d109      	bne.n	8004f1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f06:	4b23      	ldr	r3, [pc, #140]	@ (8004f94 <prvAddNewTaskToReadyList+0xc8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d802      	bhi.n	8004f1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f14:	4a1f      	ldr	r2, [pc, #124]	@ (8004f94 <prvAddNewTaskToReadyList+0xc8>)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f1a:	4b20      	ldr	r3, [pc, #128]	@ (8004f9c <prvAddNewTaskToReadyList+0xd0>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	4a1e      	ldr	r2, [pc, #120]	@ (8004f9c <prvAddNewTaskToReadyList+0xd0>)
 8004f22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004f24:	4b1d      	ldr	r3, [pc, #116]	@ (8004f9c <prvAddNewTaskToReadyList+0xd0>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f30:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa0 <prvAddNewTaskToReadyList+0xd4>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d903      	bls.n	8004f40 <prvAddNewTaskToReadyList+0x74>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3c:	4a18      	ldr	r2, [pc, #96]	@ (8004fa0 <prvAddNewTaskToReadyList+0xd4>)
 8004f3e:	6013      	str	r3, [r2, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4a15      	ldr	r2, [pc, #84]	@ (8004fa4 <prvAddNewTaskToReadyList+0xd8>)
 8004f4e:	441a      	add	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3304      	adds	r3, #4
 8004f54:	4619      	mov	r1, r3
 8004f56:	4610      	mov	r0, r2
 8004f58:	f7ff f8e9 	bl	800412e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f5c:	f001 fa5e 	bl	800641c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f60:	4b0d      	ldr	r3, [pc, #52]	@ (8004f98 <prvAddNewTaskToReadyList+0xcc>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00e      	beq.n	8004f86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f68:	4b0a      	ldr	r3, [pc, #40]	@ (8004f94 <prvAddNewTaskToReadyList+0xc8>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d207      	bcs.n	8004f86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f76:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa8 <prvAddNewTaskToReadyList+0xdc>)
 8004f78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f86:	bf00      	nop
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20000e14 	.word	0x20000e14
 8004f94:	20000940 	.word	0x20000940
 8004f98:	20000e20 	.word	0x20000e20
 8004f9c:	20000e30 	.word	0x20000e30
 8004fa0:	20000e1c 	.word	0x20000e1c
 8004fa4:	20000944 	.word	0x20000944
 8004fa8:	e000ed04 	.word	0xe000ed04

08004fac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d018      	beq.n	8004ff0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004fbe:	4b14      	ldr	r3, [pc, #80]	@ (8005010 <vTaskDelay+0x64>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00b      	beq.n	8004fde <vTaskDelay+0x32>
	__asm volatile
 8004fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	60bb      	str	r3, [r7, #8]
}
 8004fd8:	bf00      	nop
 8004fda:	bf00      	nop
 8004fdc:	e7fd      	b.n	8004fda <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004fde:	f000 f88b 	bl	80050f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 fd09 	bl	80059fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004fea:	f000 f893 	bl	8005114 <xTaskResumeAll>
 8004fee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d107      	bne.n	8005006 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004ff6:	4b07      	ldr	r3, [pc, #28]	@ (8005014 <vTaskDelay+0x68>)
 8004ff8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005006:	bf00      	nop
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20000e3c 	.word	0x20000e3c
 8005014:	e000ed04 	.word	0xe000ed04

08005018 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b08a      	sub	sp, #40	@ 0x28
 800501c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800501e:	2300      	movs	r3, #0
 8005020:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005022:	2300      	movs	r3, #0
 8005024:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005026:	463a      	mov	r2, r7
 8005028:	1d39      	adds	r1, r7, #4
 800502a:	f107 0308 	add.w	r3, r7, #8
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff f81c 	bl	800406c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005034:	6839      	ldr	r1, [r7, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	9202      	str	r2, [sp, #8]
 800503c:	9301      	str	r3, [sp, #4]
 800503e:	2300      	movs	r3, #0
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	2300      	movs	r3, #0
 8005044:	460a      	mov	r2, r1
 8005046:	4924      	ldr	r1, [pc, #144]	@ (80050d8 <vTaskStartScheduler+0xc0>)
 8005048:	4824      	ldr	r0, [pc, #144]	@ (80050dc <vTaskStartScheduler+0xc4>)
 800504a:	f7ff fdf1 	bl	8004c30 <xTaskCreateStatic>
 800504e:	4603      	mov	r3, r0
 8005050:	4a23      	ldr	r2, [pc, #140]	@ (80050e0 <vTaskStartScheduler+0xc8>)
 8005052:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005054:	4b22      	ldr	r3, [pc, #136]	@ (80050e0 <vTaskStartScheduler+0xc8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800505c:	2301      	movs	r3, #1
 800505e:	617b      	str	r3, [r7, #20]
 8005060:	e001      	b.n	8005066 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005062:	2300      	movs	r3, #0
 8005064:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d102      	bne.n	8005072 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800506c:	f000 fd1a 	bl	8005aa4 <xTimerCreateTimerTask>
 8005070:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d11b      	bne.n	80050b0 <vTaskStartScheduler+0x98>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	613b      	str	r3, [r7, #16]
}
 800508a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800508c:	4b15      	ldr	r3, [pc, #84]	@ (80050e4 <vTaskStartScheduler+0xcc>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3354      	adds	r3, #84	@ 0x54
 8005092:	4a15      	ldr	r2, [pc, #84]	@ (80050e8 <vTaskStartScheduler+0xd0>)
 8005094:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005096:	4b15      	ldr	r3, [pc, #84]	@ (80050ec <vTaskStartScheduler+0xd4>)
 8005098:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800509c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800509e:	4b14      	ldr	r3, [pc, #80]	@ (80050f0 <vTaskStartScheduler+0xd8>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80050a4:	4b13      	ldr	r3, [pc, #76]	@ (80050f4 <vTaskStartScheduler+0xdc>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80050aa:	f001 f8e1 	bl	8006270 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80050ae:	e00f      	b.n	80050d0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050b6:	d10b      	bne.n	80050d0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	60fb      	str	r3, [r7, #12]
}
 80050ca:	bf00      	nop
 80050cc:	bf00      	nop
 80050ce:	e7fd      	b.n	80050cc <vTaskStartScheduler+0xb4>
}
 80050d0:	bf00      	nop
 80050d2:	3718      	adds	r7, #24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	08006bf0 	.word	0x08006bf0
 80050dc:	08005729 	.word	0x08005729
 80050e0:	20000e38 	.word	0x20000e38
 80050e4:	20000940 	.word	0x20000940
 80050e8:	20000010 	.word	0x20000010
 80050ec:	20000e34 	.word	0x20000e34
 80050f0:	20000e20 	.word	0x20000e20
 80050f4:	20000e18 	.word	0x20000e18

080050f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80050fc:	4b04      	ldr	r3, [pc, #16]	@ (8005110 <vTaskSuspendAll+0x18>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3301      	adds	r3, #1
 8005102:	4a03      	ldr	r2, [pc, #12]	@ (8005110 <vTaskSuspendAll+0x18>)
 8005104:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005106:	bf00      	nop
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	20000e3c 	.word	0x20000e3c

08005114 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800511e:	2300      	movs	r3, #0
 8005120:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005122:	4b42      	ldr	r3, [pc, #264]	@ (800522c <xTaskResumeAll+0x118>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10b      	bne.n	8005142 <xTaskResumeAll+0x2e>
	__asm volatile
 800512a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800512e:	f383 8811 	msr	BASEPRI, r3
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	603b      	str	r3, [r7, #0]
}
 800513c:	bf00      	nop
 800513e:	bf00      	nop
 8005140:	e7fd      	b.n	800513e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005142:	f001 f939 	bl	80063b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005146:	4b39      	ldr	r3, [pc, #228]	@ (800522c <xTaskResumeAll+0x118>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3b01      	subs	r3, #1
 800514c:	4a37      	ldr	r2, [pc, #220]	@ (800522c <xTaskResumeAll+0x118>)
 800514e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005150:	4b36      	ldr	r3, [pc, #216]	@ (800522c <xTaskResumeAll+0x118>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d162      	bne.n	800521e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005158:	4b35      	ldr	r3, [pc, #212]	@ (8005230 <xTaskResumeAll+0x11c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d05e      	beq.n	800521e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005160:	e02f      	b.n	80051c2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005162:	4b34      	ldr	r3, [pc, #208]	@ (8005234 <xTaskResumeAll+0x120>)
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	3318      	adds	r3, #24
 800516e:	4618      	mov	r0, r3
 8005170:	f7ff f83a 	bl	80041e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	3304      	adds	r3, #4
 8005178:	4618      	mov	r0, r3
 800517a:	f7ff f835 	bl	80041e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005182:	4b2d      	ldr	r3, [pc, #180]	@ (8005238 <xTaskResumeAll+0x124>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d903      	bls.n	8005192 <xTaskResumeAll+0x7e>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518e:	4a2a      	ldr	r2, [pc, #168]	@ (8005238 <xTaskResumeAll+0x124>)
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4a27      	ldr	r2, [pc, #156]	@ (800523c <xTaskResumeAll+0x128>)
 80051a0:	441a      	add	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3304      	adds	r3, #4
 80051a6:	4619      	mov	r1, r3
 80051a8:	4610      	mov	r0, r2
 80051aa:	f7fe ffc0 	bl	800412e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051b2:	4b23      	ldr	r3, [pc, #140]	@ (8005240 <xTaskResumeAll+0x12c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d302      	bcc.n	80051c2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80051bc:	4b21      	ldr	r3, [pc, #132]	@ (8005244 <xTaskResumeAll+0x130>)
 80051be:	2201      	movs	r2, #1
 80051c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051c2:	4b1c      	ldr	r3, [pc, #112]	@ (8005234 <xTaskResumeAll+0x120>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1cb      	bne.n	8005162 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80051d0:	f000 fb66 	bl	80058a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80051d4:	4b1c      	ldr	r3, [pc, #112]	@ (8005248 <xTaskResumeAll+0x134>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d010      	beq.n	8005202 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80051e0:	f000 f846 	bl	8005270 <xTaskIncrementTick>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80051ea:	4b16      	ldr	r3, [pc, #88]	@ (8005244 <xTaskResumeAll+0x130>)
 80051ec:	2201      	movs	r2, #1
 80051ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3b01      	subs	r3, #1
 80051f4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1f1      	bne.n	80051e0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80051fc:	4b12      	ldr	r3, [pc, #72]	@ (8005248 <xTaskResumeAll+0x134>)
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005202:	4b10      	ldr	r3, [pc, #64]	@ (8005244 <xTaskResumeAll+0x130>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d009      	beq.n	800521e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800520a:	2301      	movs	r3, #1
 800520c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800520e:	4b0f      	ldr	r3, [pc, #60]	@ (800524c <xTaskResumeAll+0x138>)
 8005210:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800521e:	f001 f8fd 	bl	800641c <vPortExitCritical>

	return xAlreadyYielded;
 8005222:	68bb      	ldr	r3, [r7, #8]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	20000e3c 	.word	0x20000e3c
 8005230:	20000e14 	.word	0x20000e14
 8005234:	20000dd4 	.word	0x20000dd4
 8005238:	20000e1c 	.word	0x20000e1c
 800523c:	20000944 	.word	0x20000944
 8005240:	20000940 	.word	0x20000940
 8005244:	20000e28 	.word	0x20000e28
 8005248:	20000e24 	.word	0x20000e24
 800524c:	e000ed04 	.word	0xe000ed04

08005250 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005256:	4b05      	ldr	r3, [pc, #20]	@ (800526c <xTaskGetTickCount+0x1c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800525c:	687b      	ldr	r3, [r7, #4]
}
 800525e:	4618      	mov	r0, r3
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	20000e18 	.word	0x20000e18

08005270 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800527a:	4b4f      	ldr	r3, [pc, #316]	@ (80053b8 <xTaskIncrementTick+0x148>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	f040 8090 	bne.w	80053a4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005284:	4b4d      	ldr	r3, [pc, #308]	@ (80053bc <xTaskIncrementTick+0x14c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3301      	adds	r3, #1
 800528a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800528c:	4a4b      	ldr	r2, [pc, #300]	@ (80053bc <xTaskIncrementTick+0x14c>)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d121      	bne.n	80052dc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005298:	4b49      	ldr	r3, [pc, #292]	@ (80053c0 <xTaskIncrementTick+0x150>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00b      	beq.n	80052ba <xTaskIncrementTick+0x4a>
	__asm volatile
 80052a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a6:	f383 8811 	msr	BASEPRI, r3
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	603b      	str	r3, [r7, #0]
}
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop
 80052b8:	e7fd      	b.n	80052b6 <xTaskIncrementTick+0x46>
 80052ba:	4b41      	ldr	r3, [pc, #260]	@ (80053c0 <xTaskIncrementTick+0x150>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	4b40      	ldr	r3, [pc, #256]	@ (80053c4 <xTaskIncrementTick+0x154>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a3e      	ldr	r2, [pc, #248]	@ (80053c0 <xTaskIncrementTick+0x150>)
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	4a3e      	ldr	r2, [pc, #248]	@ (80053c4 <xTaskIncrementTick+0x154>)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	4b3e      	ldr	r3, [pc, #248]	@ (80053c8 <xTaskIncrementTick+0x158>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3301      	adds	r3, #1
 80052d4:	4a3c      	ldr	r2, [pc, #240]	@ (80053c8 <xTaskIncrementTick+0x158>)
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	f000 fae2 	bl	80058a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052dc:	4b3b      	ldr	r3, [pc, #236]	@ (80053cc <xTaskIncrementTick+0x15c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d349      	bcc.n	800537a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052e6:	4b36      	ldr	r3, [pc, #216]	@ (80053c0 <xTaskIncrementTick+0x150>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d104      	bne.n	80052fa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052f0:	4b36      	ldr	r3, [pc, #216]	@ (80053cc <xTaskIncrementTick+0x15c>)
 80052f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80052f6:	601a      	str	r2, [r3, #0]
					break;
 80052f8:	e03f      	b.n	800537a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052fa:	4b31      	ldr	r3, [pc, #196]	@ (80053c0 <xTaskIncrementTick+0x150>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	429a      	cmp	r2, r3
 8005310:	d203      	bcs.n	800531a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005312:	4a2e      	ldr	r2, [pc, #184]	@ (80053cc <xTaskIncrementTick+0x15c>)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005318:	e02f      	b.n	800537a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	3304      	adds	r3, #4
 800531e:	4618      	mov	r0, r3
 8005320:	f7fe ff62 	bl	80041e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005328:	2b00      	cmp	r3, #0
 800532a:	d004      	beq.n	8005336 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	3318      	adds	r3, #24
 8005330:	4618      	mov	r0, r3
 8005332:	f7fe ff59 	bl	80041e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800533a:	4b25      	ldr	r3, [pc, #148]	@ (80053d0 <xTaskIncrementTick+0x160>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d903      	bls.n	800534a <xTaskIncrementTick+0xda>
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005346:	4a22      	ldr	r2, [pc, #136]	@ (80053d0 <xTaskIncrementTick+0x160>)
 8005348:	6013      	str	r3, [r2, #0]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800534e:	4613      	mov	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4a1f      	ldr	r2, [pc, #124]	@ (80053d4 <xTaskIncrementTick+0x164>)
 8005358:	441a      	add	r2, r3
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	3304      	adds	r3, #4
 800535e:	4619      	mov	r1, r3
 8005360:	4610      	mov	r0, r2
 8005362:	f7fe fee4 	bl	800412e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800536a:	4b1b      	ldr	r3, [pc, #108]	@ (80053d8 <xTaskIncrementTick+0x168>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005370:	429a      	cmp	r2, r3
 8005372:	d3b8      	bcc.n	80052e6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005374:	2301      	movs	r3, #1
 8005376:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005378:	e7b5      	b.n	80052e6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800537a:	4b17      	ldr	r3, [pc, #92]	@ (80053d8 <xTaskIncrementTick+0x168>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005380:	4914      	ldr	r1, [pc, #80]	@ (80053d4 <xTaskIncrementTick+0x164>)
 8005382:	4613      	mov	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	440b      	add	r3, r1
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d901      	bls.n	8005396 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005392:	2301      	movs	r3, #1
 8005394:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005396:	4b11      	ldr	r3, [pc, #68]	@ (80053dc <xTaskIncrementTick+0x16c>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d007      	beq.n	80053ae <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800539e:	2301      	movs	r3, #1
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	e004      	b.n	80053ae <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80053a4:	4b0e      	ldr	r3, [pc, #56]	@ (80053e0 <xTaskIncrementTick+0x170>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3301      	adds	r3, #1
 80053aa:	4a0d      	ldr	r2, [pc, #52]	@ (80053e0 <xTaskIncrementTick+0x170>)
 80053ac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80053ae:	697b      	ldr	r3, [r7, #20]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3718      	adds	r7, #24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	20000e3c 	.word	0x20000e3c
 80053bc:	20000e18 	.word	0x20000e18
 80053c0:	20000dcc 	.word	0x20000dcc
 80053c4:	20000dd0 	.word	0x20000dd0
 80053c8:	20000e2c 	.word	0x20000e2c
 80053cc:	20000e34 	.word	0x20000e34
 80053d0:	20000e1c 	.word	0x20000e1c
 80053d4:	20000944 	.word	0x20000944
 80053d8:	20000940 	.word	0x20000940
 80053dc:	20000e28 	.word	0x20000e28
 80053e0:	20000e24 	.word	0x20000e24

080053e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053ea:	4b2b      	ldr	r3, [pc, #172]	@ (8005498 <vTaskSwitchContext+0xb4>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80053f2:	4b2a      	ldr	r3, [pc, #168]	@ (800549c <vTaskSwitchContext+0xb8>)
 80053f4:	2201      	movs	r2, #1
 80053f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80053f8:	e047      	b.n	800548a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80053fa:	4b28      	ldr	r3, [pc, #160]	@ (800549c <vTaskSwitchContext+0xb8>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005400:	4b27      	ldr	r3, [pc, #156]	@ (80054a0 <vTaskSwitchContext+0xbc>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	e011      	b.n	800542c <vTaskSwitchContext+0x48>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10b      	bne.n	8005426 <vTaskSwitchContext+0x42>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	607b      	str	r3, [r7, #4]
}
 8005420:	bf00      	nop
 8005422:	bf00      	nop
 8005424:	e7fd      	b.n	8005422 <vTaskSwitchContext+0x3e>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	3b01      	subs	r3, #1
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	491d      	ldr	r1, [pc, #116]	@ (80054a4 <vTaskSwitchContext+0xc0>)
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	4613      	mov	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0e3      	beq.n	8005408 <vTaskSwitchContext+0x24>
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4613      	mov	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4a16      	ldr	r2, [pc, #88]	@ (80054a4 <vTaskSwitchContext+0xc0>)
 800544c:	4413      	add	r3, r2
 800544e:	60bb      	str	r3, [r7, #8]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	605a      	str	r2, [r3, #4]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	3308      	adds	r3, #8
 8005462:	429a      	cmp	r2, r3
 8005464:	d104      	bne.n	8005470 <vTaskSwitchContext+0x8c>
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	605a      	str	r2, [r3, #4]
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	4a0c      	ldr	r2, [pc, #48]	@ (80054a8 <vTaskSwitchContext+0xc4>)
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	4a09      	ldr	r2, [pc, #36]	@ (80054a0 <vTaskSwitchContext+0xbc>)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005480:	4b09      	ldr	r3, [pc, #36]	@ (80054a8 <vTaskSwitchContext+0xc4>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3354      	adds	r3, #84	@ 0x54
 8005486:	4a09      	ldr	r2, [pc, #36]	@ (80054ac <vTaskSwitchContext+0xc8>)
 8005488:	6013      	str	r3, [r2, #0]
}
 800548a:	bf00      	nop
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	20000e3c 	.word	0x20000e3c
 800549c:	20000e28 	.word	0x20000e28
 80054a0:	20000e1c 	.word	0x20000e1c
 80054a4:	20000944 	.word	0x20000944
 80054a8:	20000940 	.word	0x20000940
 80054ac:	20000010 	.word	0x20000010

080054b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10b      	bne.n	80054d8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	60fb      	str	r3, [r7, #12]
}
 80054d2:	bf00      	nop
 80054d4:	bf00      	nop
 80054d6:	e7fd      	b.n	80054d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054d8:	4b07      	ldr	r3, [pc, #28]	@ (80054f8 <vTaskPlaceOnEventList+0x48>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3318      	adds	r3, #24
 80054de:	4619      	mov	r1, r3
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7fe fe48 	bl	8004176 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054e6:	2101      	movs	r1, #1
 80054e8:	6838      	ldr	r0, [r7, #0]
 80054ea:	f000 fa87 	bl	80059fc <prvAddCurrentTaskToDelayedList>
}
 80054ee:	bf00      	nop
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	20000940 	.word	0x20000940

080054fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10b      	bne.n	8005526 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	617b      	str	r3, [r7, #20]
}
 8005520:	bf00      	nop
 8005522:	bf00      	nop
 8005524:	e7fd      	b.n	8005522 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005526:	4b0a      	ldr	r3, [pc, #40]	@ (8005550 <vTaskPlaceOnEventListRestricted+0x54>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3318      	adds	r3, #24
 800552c:	4619      	mov	r1, r3
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f7fe fdfd 	bl	800412e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d002      	beq.n	8005540 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800553a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800553e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005540:	6879      	ldr	r1, [r7, #4]
 8005542:	68b8      	ldr	r0, [r7, #8]
 8005544:	f000 fa5a 	bl	80059fc <prvAddCurrentTaskToDelayedList>
	}
 8005548:	bf00      	nop
 800554a:	3718      	adds	r7, #24
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	20000940 	.word	0x20000940

08005554 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10b      	bne.n	8005582 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	60fb      	str	r3, [r7, #12]
}
 800557c:	bf00      	nop
 800557e:	bf00      	nop
 8005580:	e7fd      	b.n	800557e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	3318      	adds	r3, #24
 8005586:	4618      	mov	r0, r3
 8005588:	f7fe fe2e 	bl	80041e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800558c:	4b1d      	ldr	r3, [pc, #116]	@ (8005604 <xTaskRemoveFromEventList+0xb0>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d11d      	bne.n	80055d0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	3304      	adds	r3, #4
 8005598:	4618      	mov	r0, r3
 800559a:	f7fe fe25 	bl	80041e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055a2:	4b19      	ldr	r3, [pc, #100]	@ (8005608 <xTaskRemoveFromEventList+0xb4>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d903      	bls.n	80055b2 <xTaskRemoveFromEventList+0x5e>
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ae:	4a16      	ldr	r2, [pc, #88]	@ (8005608 <xTaskRemoveFromEventList+0xb4>)
 80055b0:	6013      	str	r3, [r2, #0]
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055b6:	4613      	mov	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4a13      	ldr	r2, [pc, #76]	@ (800560c <xTaskRemoveFromEventList+0xb8>)
 80055c0:	441a      	add	r2, r3
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	3304      	adds	r3, #4
 80055c6:	4619      	mov	r1, r3
 80055c8:	4610      	mov	r0, r2
 80055ca:	f7fe fdb0 	bl	800412e <vListInsertEnd>
 80055ce:	e005      	b.n	80055dc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	3318      	adds	r3, #24
 80055d4:	4619      	mov	r1, r3
 80055d6:	480e      	ldr	r0, [pc, #56]	@ (8005610 <xTaskRemoveFromEventList+0xbc>)
 80055d8:	f7fe fda9 	bl	800412e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005614 <xTaskRemoveFromEventList+0xc0>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d905      	bls.n	80055f6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80055ea:	2301      	movs	r3, #1
 80055ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80055ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005618 <xTaskRemoveFromEventList+0xc4>)
 80055f0:	2201      	movs	r2, #1
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	e001      	b.n	80055fa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80055f6:	2300      	movs	r3, #0
 80055f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80055fa:	697b      	ldr	r3, [r7, #20]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3718      	adds	r7, #24
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	20000e3c 	.word	0x20000e3c
 8005608:	20000e1c 	.word	0x20000e1c
 800560c:	20000944 	.word	0x20000944
 8005610:	20000dd4 	.word	0x20000dd4
 8005614:	20000940 	.word	0x20000940
 8005618:	20000e28 	.word	0x20000e28

0800561c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005624:	4b06      	ldr	r3, [pc, #24]	@ (8005640 <vTaskInternalSetTimeOutState+0x24>)
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800562c:	4b05      	ldr	r3, [pc, #20]	@ (8005644 <vTaskInternalSetTimeOutState+0x28>)
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	605a      	str	r2, [r3, #4]
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	20000e2c 	.word	0x20000e2c
 8005644:	20000e18 	.word	0x20000e18

08005648 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b088      	sub	sp, #32
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10b      	bne.n	8005670 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565c:	f383 8811 	msr	BASEPRI, r3
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	613b      	str	r3, [r7, #16]
}
 800566a:	bf00      	nop
 800566c:	bf00      	nop
 800566e:	e7fd      	b.n	800566c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10b      	bne.n	800568e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	60fb      	str	r3, [r7, #12]
}
 8005688:	bf00      	nop
 800568a:	bf00      	nop
 800568c:	e7fd      	b.n	800568a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800568e:	f000 fe93 	bl	80063b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005692:	4b1d      	ldr	r3, [pc, #116]	@ (8005708 <xTaskCheckForTimeOut+0xc0>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056aa:	d102      	bne.n	80056b2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80056ac:	2300      	movs	r3, #0
 80056ae:	61fb      	str	r3, [r7, #28]
 80056b0:	e023      	b.n	80056fa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	4b15      	ldr	r3, [pc, #84]	@ (800570c <xTaskCheckForTimeOut+0xc4>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d007      	beq.n	80056ce <xTaskCheckForTimeOut+0x86>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d302      	bcc.n	80056ce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80056c8:	2301      	movs	r3, #1
 80056ca:	61fb      	str	r3, [r7, #28]
 80056cc:	e015      	b.n	80056fa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d20b      	bcs.n	80056f0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	1ad2      	subs	r2, r2, r3
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff ff99 	bl	800561c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80056ea:	2300      	movs	r3, #0
 80056ec:	61fb      	str	r3, [r7, #28]
 80056ee:	e004      	b.n	80056fa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80056f6:	2301      	movs	r3, #1
 80056f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80056fa:	f000 fe8f 	bl	800641c <vPortExitCritical>

	return xReturn;
 80056fe:	69fb      	ldr	r3, [r7, #28]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3720      	adds	r7, #32
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	20000e18 	.word	0x20000e18
 800570c:	20000e2c 	.word	0x20000e2c

08005710 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005710:	b480      	push	{r7}
 8005712:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005714:	4b03      	ldr	r3, [pc, #12]	@ (8005724 <vTaskMissedYield+0x14>)
 8005716:	2201      	movs	r2, #1
 8005718:	601a      	str	r2, [r3, #0]
}
 800571a:	bf00      	nop
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	20000e28 	.word	0x20000e28

08005728 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005730:	f000 f852 	bl	80057d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005734:	4b06      	ldr	r3, [pc, #24]	@ (8005750 <prvIdleTask+0x28>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d9f9      	bls.n	8005730 <prvIdleTask+0x8>
			{
				taskYIELD();
 800573c:	4b05      	ldr	r3, [pc, #20]	@ (8005754 <prvIdleTask+0x2c>)
 800573e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800574c:	e7f0      	b.n	8005730 <prvIdleTask+0x8>
 800574e:	bf00      	nop
 8005750:	20000944 	.word	0x20000944
 8005754:	e000ed04 	.word	0xe000ed04

08005758 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800575e:	2300      	movs	r3, #0
 8005760:	607b      	str	r3, [r7, #4]
 8005762:	e00c      	b.n	800577e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	4613      	mov	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4a12      	ldr	r2, [pc, #72]	@ (80057b8 <prvInitialiseTaskLists+0x60>)
 8005770:	4413      	add	r3, r2
 8005772:	4618      	mov	r0, r3
 8005774:	f7fe fcae 	bl	80040d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3301      	adds	r3, #1
 800577c:	607b      	str	r3, [r7, #4]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b37      	cmp	r3, #55	@ 0x37
 8005782:	d9ef      	bls.n	8005764 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005784:	480d      	ldr	r0, [pc, #52]	@ (80057bc <prvInitialiseTaskLists+0x64>)
 8005786:	f7fe fca5 	bl	80040d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800578a:	480d      	ldr	r0, [pc, #52]	@ (80057c0 <prvInitialiseTaskLists+0x68>)
 800578c:	f7fe fca2 	bl	80040d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005790:	480c      	ldr	r0, [pc, #48]	@ (80057c4 <prvInitialiseTaskLists+0x6c>)
 8005792:	f7fe fc9f 	bl	80040d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005796:	480c      	ldr	r0, [pc, #48]	@ (80057c8 <prvInitialiseTaskLists+0x70>)
 8005798:	f7fe fc9c 	bl	80040d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800579c:	480b      	ldr	r0, [pc, #44]	@ (80057cc <prvInitialiseTaskLists+0x74>)
 800579e:	f7fe fc99 	bl	80040d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80057a2:	4b0b      	ldr	r3, [pc, #44]	@ (80057d0 <prvInitialiseTaskLists+0x78>)
 80057a4:	4a05      	ldr	r2, [pc, #20]	@ (80057bc <prvInitialiseTaskLists+0x64>)
 80057a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80057a8:	4b0a      	ldr	r3, [pc, #40]	@ (80057d4 <prvInitialiseTaskLists+0x7c>)
 80057aa:	4a05      	ldr	r2, [pc, #20]	@ (80057c0 <prvInitialiseTaskLists+0x68>)
 80057ac:	601a      	str	r2, [r3, #0]
}
 80057ae:	bf00      	nop
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	20000944 	.word	0x20000944
 80057bc:	20000da4 	.word	0x20000da4
 80057c0:	20000db8 	.word	0x20000db8
 80057c4:	20000dd4 	.word	0x20000dd4
 80057c8:	20000de8 	.word	0x20000de8
 80057cc:	20000e00 	.word	0x20000e00
 80057d0:	20000dcc 	.word	0x20000dcc
 80057d4:	20000dd0 	.word	0x20000dd0

080057d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057de:	e019      	b.n	8005814 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80057e0:	f000 fdea 	bl	80063b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057e4:	4b10      	ldr	r3, [pc, #64]	@ (8005828 <prvCheckTasksWaitingTermination+0x50>)
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	3304      	adds	r3, #4
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fe fcf9 	bl	80041e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057f6:	4b0d      	ldr	r3, [pc, #52]	@ (800582c <prvCheckTasksWaitingTermination+0x54>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	4a0b      	ldr	r2, [pc, #44]	@ (800582c <prvCheckTasksWaitingTermination+0x54>)
 80057fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005800:	4b0b      	ldr	r3, [pc, #44]	@ (8005830 <prvCheckTasksWaitingTermination+0x58>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3b01      	subs	r3, #1
 8005806:	4a0a      	ldr	r2, [pc, #40]	@ (8005830 <prvCheckTasksWaitingTermination+0x58>)
 8005808:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800580a:	f000 fe07 	bl	800641c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f810 	bl	8005834 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005814:	4b06      	ldr	r3, [pc, #24]	@ (8005830 <prvCheckTasksWaitingTermination+0x58>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1e1      	bne.n	80057e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800581c:	bf00      	nop
 800581e:	bf00      	nop
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	20000de8 	.word	0x20000de8
 800582c:	20000e14 	.word	0x20000e14
 8005830:	20000dfc 	.word	0x20000dfc

08005834 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3354      	adds	r3, #84	@ 0x54
 8005840:	4618      	mov	r0, r3
 8005842:	f001 f8d1 	bl	80069e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800584c:	2b00      	cmp	r3, #0
 800584e:	d108      	bne.n	8005862 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005854:	4618      	mov	r0, r3
 8005856:	f000 ff9f 	bl	8006798 <vPortFree>
				vPortFree( pxTCB );
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 ff9c 	bl	8006798 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005860:	e019      	b.n	8005896 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005868:	2b01      	cmp	r3, #1
 800586a:	d103      	bne.n	8005874 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 ff93 	bl	8006798 <vPortFree>
	}
 8005872:	e010      	b.n	8005896 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800587a:	2b02      	cmp	r3, #2
 800587c:	d00b      	beq.n	8005896 <prvDeleteTCB+0x62>
	__asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	60fb      	str	r3, [r7, #12]
}
 8005890:	bf00      	nop
 8005892:	bf00      	nop
 8005894:	e7fd      	b.n	8005892 <prvDeleteTCB+0x5e>
	}
 8005896:	bf00      	nop
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
	...

080058a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058a6:	4b0c      	ldr	r3, [pc, #48]	@ (80058d8 <prvResetNextTaskUnblockTime+0x38>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d104      	bne.n	80058ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80058b0:	4b0a      	ldr	r3, [pc, #40]	@ (80058dc <prvResetNextTaskUnblockTime+0x3c>)
 80058b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80058b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80058b8:	e008      	b.n	80058cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058ba:	4b07      	ldr	r3, [pc, #28]	@ (80058d8 <prvResetNextTaskUnblockTime+0x38>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	4a04      	ldr	r2, [pc, #16]	@ (80058dc <prvResetNextTaskUnblockTime+0x3c>)
 80058ca:	6013      	str	r3, [r2, #0]
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	20000dcc 	.word	0x20000dcc
 80058dc:	20000e34 	.word	0x20000e34

080058e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80058e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005914 <xTaskGetSchedulerState+0x34>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d102      	bne.n	80058f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80058ee:	2301      	movs	r3, #1
 80058f0:	607b      	str	r3, [r7, #4]
 80058f2:	e008      	b.n	8005906 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058f4:	4b08      	ldr	r3, [pc, #32]	@ (8005918 <xTaskGetSchedulerState+0x38>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d102      	bne.n	8005902 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80058fc:	2302      	movs	r3, #2
 80058fe:	607b      	str	r3, [r7, #4]
 8005900:	e001      	b.n	8005906 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005902:	2300      	movs	r3, #0
 8005904:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005906:	687b      	ldr	r3, [r7, #4]
	}
 8005908:	4618      	mov	r0, r3
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	20000e20 	.word	0x20000e20
 8005918:	20000e3c 	.word	0x20000e3c

0800591c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005928:	2300      	movs	r3, #0
 800592a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d058      	beq.n	80059e4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005932:	4b2f      	ldr	r3, [pc, #188]	@ (80059f0 <xTaskPriorityDisinherit+0xd4>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	429a      	cmp	r2, r3
 800593a:	d00b      	beq.n	8005954 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800593c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	60fb      	str	r3, [r7, #12]
}
 800594e:	bf00      	nop
 8005950:	bf00      	nop
 8005952:	e7fd      	b.n	8005950 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10b      	bne.n	8005974 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	60bb      	str	r3, [r7, #8]
}
 800596e:	bf00      	nop
 8005970:	bf00      	nop
 8005972:	e7fd      	b.n	8005970 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005978:	1e5a      	subs	r2, r3, #1
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005986:	429a      	cmp	r2, r3
 8005988:	d02c      	beq.n	80059e4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800598e:	2b00      	cmp	r3, #0
 8005990:	d128      	bne.n	80059e4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	3304      	adds	r3, #4
 8005996:	4618      	mov	r0, r3
 8005998:	f7fe fc26 	bl	80041e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059b4:	4b0f      	ldr	r3, [pc, #60]	@ (80059f4 <xTaskPriorityDisinherit+0xd8>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d903      	bls.n	80059c4 <xTaskPriorityDisinherit+0xa8>
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c0:	4a0c      	ldr	r2, [pc, #48]	@ (80059f4 <xTaskPriorityDisinherit+0xd8>)
 80059c2:	6013      	str	r3, [r2, #0]
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059c8:	4613      	mov	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4a09      	ldr	r2, [pc, #36]	@ (80059f8 <xTaskPriorityDisinherit+0xdc>)
 80059d2:	441a      	add	r2, r3
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	3304      	adds	r3, #4
 80059d8:	4619      	mov	r1, r3
 80059da:	4610      	mov	r0, r2
 80059dc:	f7fe fba7 	bl	800412e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80059e0:	2301      	movs	r3, #1
 80059e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059e4:	697b      	ldr	r3, [r7, #20]
	}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	20000940 	.word	0x20000940
 80059f4:	20000e1c 	.word	0x20000e1c
 80059f8:	20000944 	.word	0x20000944

080059fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a06:	4b21      	ldr	r3, [pc, #132]	@ (8005a8c <prvAddCurrentTaskToDelayedList+0x90>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a0c:	4b20      	ldr	r3, [pc, #128]	@ (8005a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3304      	adds	r3, #4
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fe fbe8 	bl	80041e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a1e:	d10a      	bne.n	8005a36 <prvAddCurrentTaskToDelayedList+0x3a>
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d007      	beq.n	8005a36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a26:	4b1a      	ldr	r3, [pc, #104]	@ (8005a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4819      	ldr	r0, [pc, #100]	@ (8005a94 <prvAddCurrentTaskToDelayedList+0x98>)
 8005a30:	f7fe fb7d 	bl	800412e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a34:	e026      	b.n	8005a84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a3e:	4b14      	ldr	r3, [pc, #80]	@ (8005a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d209      	bcs.n	8005a62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a4e:	4b12      	ldr	r3, [pc, #72]	@ (8005a98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	4b0f      	ldr	r3, [pc, #60]	@ (8005a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3304      	adds	r3, #4
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4610      	mov	r0, r2
 8005a5c:	f7fe fb8b 	bl	8004176 <vListInsert>
}
 8005a60:	e010      	b.n	8005a84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a62:	4b0e      	ldr	r3, [pc, #56]	@ (8005a9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	4b0a      	ldr	r3, [pc, #40]	@ (8005a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	f7fe fb81 	bl	8004176 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a74:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d202      	bcs.n	8005a84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005a7e:	4a08      	ldr	r2, [pc, #32]	@ (8005aa0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	6013      	str	r3, [r2, #0]
}
 8005a84:	bf00      	nop
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	20000e18 	.word	0x20000e18
 8005a90:	20000940 	.word	0x20000940
 8005a94:	20000e00 	.word	0x20000e00
 8005a98:	20000dd0 	.word	0x20000dd0
 8005a9c:	20000dcc 	.word	0x20000dcc
 8005aa0:	20000e34 	.word	0x20000e34

08005aa4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08a      	sub	sp, #40	@ 0x28
 8005aa8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005aae:	f000 fb13 	bl	80060d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8005b28 <xTimerCreateTimerTask+0x84>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d021      	beq.n	8005afe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005ac2:	1d3a      	adds	r2, r7, #4
 8005ac4:	f107 0108 	add.w	r1, r7, #8
 8005ac8:	f107 030c 	add.w	r3, r7, #12
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7fe fae7 	bl	80040a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ad2:	6879      	ldr	r1, [r7, #4]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	9202      	str	r2, [sp, #8]
 8005ada:	9301      	str	r3, [sp, #4]
 8005adc:	2302      	movs	r3, #2
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	460a      	mov	r2, r1
 8005ae4:	4911      	ldr	r1, [pc, #68]	@ (8005b2c <xTimerCreateTimerTask+0x88>)
 8005ae6:	4812      	ldr	r0, [pc, #72]	@ (8005b30 <xTimerCreateTimerTask+0x8c>)
 8005ae8:	f7ff f8a2 	bl	8004c30 <xTaskCreateStatic>
 8005aec:	4603      	mov	r3, r0
 8005aee:	4a11      	ldr	r2, [pc, #68]	@ (8005b34 <xTimerCreateTimerTask+0x90>)
 8005af0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005af2:	4b10      	ldr	r3, [pc, #64]	@ (8005b34 <xTimerCreateTimerTask+0x90>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005afa:	2301      	movs	r3, #1
 8005afc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10b      	bne.n	8005b1c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	613b      	str	r3, [r7, #16]
}
 8005b16:	bf00      	nop
 8005b18:	bf00      	nop
 8005b1a:	e7fd      	b.n	8005b18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005b1c:	697b      	ldr	r3, [r7, #20]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	20000e70 	.word	0x20000e70
 8005b2c:	08006bf8 	.word	0x08006bf8
 8005b30:	08005c71 	.word	0x08005c71
 8005b34:	20000e74 	.word	0x20000e74

08005b38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08a      	sub	sp, #40	@ 0x28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10b      	bne.n	8005b68 <xTimerGenericCommand+0x30>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	623b      	str	r3, [r7, #32]
}
 8005b62:	bf00      	nop
 8005b64:	bf00      	nop
 8005b66:	e7fd      	b.n	8005b64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b68:	4b19      	ldr	r3, [pc, #100]	@ (8005bd0 <xTimerGenericCommand+0x98>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d02a      	beq.n	8005bc6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2b05      	cmp	r3, #5
 8005b80:	dc18      	bgt.n	8005bb4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b82:	f7ff fead 	bl	80058e0 <xTaskGetSchedulerState>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d109      	bne.n	8005ba0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b8c:	4b10      	ldr	r3, [pc, #64]	@ (8005bd0 <xTimerGenericCommand+0x98>)
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	f107 0110 	add.w	r1, r7, #16
 8005b94:	2300      	movs	r3, #0
 8005b96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b98:	f7fe fc5a 	bl	8004450 <xQueueGenericSend>
 8005b9c:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b9e:	e012      	b.n	8005bc6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd0 <xTimerGenericCommand+0x98>)
 8005ba2:	6818      	ldr	r0, [r3, #0]
 8005ba4:	f107 0110 	add.w	r1, r7, #16
 8005ba8:	2300      	movs	r3, #0
 8005baa:	2200      	movs	r2, #0
 8005bac:	f7fe fc50 	bl	8004450 <xQueueGenericSend>
 8005bb0:	6278      	str	r0, [r7, #36]	@ 0x24
 8005bb2:	e008      	b.n	8005bc6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005bb4:	4b06      	ldr	r3, [pc, #24]	@ (8005bd0 <xTimerGenericCommand+0x98>)
 8005bb6:	6818      	ldr	r0, [r3, #0]
 8005bb8:	f107 0110 	add.w	r1, r7, #16
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	f7fe fd48 	bl	8004654 <xQueueGenericSendFromISR>
 8005bc4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3728      	adds	r7, #40	@ 0x28
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	20000e70 	.word	0x20000e70

08005bd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af02      	add	r7, sp, #8
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bde:	4b23      	ldr	r3, [pc, #140]	@ (8005c6c <prvProcessExpiredTimer+0x98>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	3304      	adds	r3, #4
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fe fafb 	bl	80041e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d023      	beq.n	8005c48 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	699a      	ldr	r2, [r3, #24]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	18d1      	adds	r1, r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	6978      	ldr	r0, [r7, #20]
 8005c0e:	f000 f8d5 	bl	8005dbc <prvInsertTimerInActiveList>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d020      	beq.n	8005c5a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c18:	2300      	movs	r3, #0
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	2100      	movs	r1, #0
 8005c22:	6978      	ldr	r0, [r7, #20]
 8005c24:	f7ff ff88 	bl	8005b38 <xTimerGenericCommand>
 8005c28:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d114      	bne.n	8005c5a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	60fb      	str	r3, [r7, #12]
}
 8005c42:	bf00      	nop
 8005c44:	bf00      	nop
 8005c46:	e7fd      	b.n	8005c44 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c4e:	f023 0301 	bic.w	r3, r3, #1
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	6978      	ldr	r0, [r7, #20]
 8005c60:	4798      	blx	r3
}
 8005c62:	bf00      	nop
 8005c64:	3718      	adds	r7, #24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20000e68 	.word	0x20000e68

08005c70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c78:	f107 0308 	add.w	r3, r7, #8
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 f859 	bl	8005d34 <prvGetNextExpireTime>
 8005c82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4619      	mov	r1, r3
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 f805 	bl	8005c98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c8e:	f000 f8d7 	bl	8005e40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c92:	bf00      	nop
 8005c94:	e7f0      	b.n	8005c78 <prvTimerTask+0x8>
	...

08005c98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005ca2:	f7ff fa29 	bl	80050f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ca6:	f107 0308 	add.w	r3, r7, #8
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 f866 	bl	8005d7c <prvSampleTimeNow>
 8005cb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d130      	bne.n	8005d1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10a      	bne.n	8005cd4 <prvProcessTimerOrBlockTask+0x3c>
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d806      	bhi.n	8005cd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005cc6:	f7ff fa25 	bl	8005114 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005cca:	68f9      	ldr	r1, [r7, #12]
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7ff ff81 	bl	8005bd4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005cd2:	e024      	b.n	8005d1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d008      	beq.n	8005cec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005cda:	4b13      	ldr	r3, [pc, #76]	@ (8005d28 <prvProcessTimerOrBlockTask+0x90>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <prvProcessTimerOrBlockTask+0x50>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e000      	b.n	8005cea <prvProcessTimerOrBlockTask+0x52>
 8005ce8:	2300      	movs	r3, #0
 8005cea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005cec:	4b0f      	ldr	r3, [pc, #60]	@ (8005d2c <prvProcessTimerOrBlockTask+0x94>)
 8005cee:	6818      	ldr	r0, [r3, #0]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	f7fe ff65 	bl	8004bc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005cfe:	f7ff fa09 	bl	8005114 <xTaskResumeAll>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10a      	bne.n	8005d1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005d08:	4b09      	ldr	r3, [pc, #36]	@ (8005d30 <prvProcessTimerOrBlockTask+0x98>)
 8005d0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	f3bf 8f6f 	isb	sy
}
 8005d18:	e001      	b.n	8005d1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005d1a:	f7ff f9fb 	bl	8005114 <xTaskResumeAll>
}
 8005d1e:	bf00      	nop
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20000e6c 	.word	0x20000e6c
 8005d2c:	20000e70 	.word	0x20000e70
 8005d30:	e000ed04 	.word	0xe000ed04

08005d34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8005d78 <prvGetNextExpireTime+0x44>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <prvGetNextExpireTime+0x16>
 8005d46:	2201      	movs	r2, #1
 8005d48:	e000      	b.n	8005d4c <prvGetNextExpireTime+0x18>
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d105      	bne.n	8005d64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d58:	4b07      	ldr	r3, [pc, #28]	@ (8005d78 <prvGetNextExpireTime+0x44>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	e001      	b.n	8005d68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d68:	68fb      	ldr	r3, [r7, #12]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	20000e68 	.word	0x20000e68

08005d7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005d84:	f7ff fa64 	bl	8005250 <xTaskGetTickCount>
 8005d88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8005db8 <prvSampleTimeNow+0x3c>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d205      	bcs.n	8005da0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005d94:	f000 f93a 	bl	800600c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	e002      	b.n	8005da6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005da6:	4a04      	ldr	r2, [pc, #16]	@ (8005db8 <prvSampleTimeNow+0x3c>)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005dac:	68fb      	ldr	r3, [r7, #12]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	20000e78 	.word	0x20000e78

08005dbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
 8005dc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d812      	bhi.n	8005e08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	1ad2      	subs	r2, r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d302      	bcc.n	8005df6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005df0:	2301      	movs	r3, #1
 8005df2:	617b      	str	r3, [r7, #20]
 8005df4:	e01b      	b.n	8005e2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005df6:	4b10      	ldr	r3, [pc, #64]	@ (8005e38 <prvInsertTimerInActiveList+0x7c>)
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4610      	mov	r0, r2
 8005e02:	f7fe f9b8 	bl	8004176 <vListInsert>
 8005e06:	e012      	b.n	8005e2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d206      	bcs.n	8005e1e <prvInsertTimerInActiveList+0x62>
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d302      	bcc.n	8005e1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	e007      	b.n	8005e2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e1e:	4b07      	ldr	r3, [pc, #28]	@ (8005e3c <prvInsertTimerInActiveList+0x80>)
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	3304      	adds	r3, #4
 8005e26:	4619      	mov	r1, r3
 8005e28:	4610      	mov	r0, r2
 8005e2a:	f7fe f9a4 	bl	8004176 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005e2e:	697b      	ldr	r3, [r7, #20]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3718      	adds	r7, #24
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	20000e6c 	.word	0x20000e6c
 8005e3c:	20000e68 	.word	0x20000e68

08005e40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08e      	sub	sp, #56	@ 0x38
 8005e44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e46:	e0ce      	b.n	8005fe6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	da19      	bge.n	8005e82 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005e4e:	1d3b      	adds	r3, r7, #4
 8005e50:	3304      	adds	r3, #4
 8005e52:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10b      	bne.n	8005e72 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	61fb      	str	r3, [r7, #28]
}
 8005e6c:	bf00      	nop
 8005e6e:	bf00      	nop
 8005e70:	e7fd      	b.n	8005e6e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e78:	6850      	ldr	r0, [r2, #4]
 8005e7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e7c:	6892      	ldr	r2, [r2, #8]
 8005e7e:	4611      	mov	r1, r2
 8005e80:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f2c0 80ae 	blt.w	8005fe6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d004      	beq.n	8005ea0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e98:	3304      	adds	r3, #4
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fe f9a4 	bl	80041e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ea0:	463b      	mov	r3, r7
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7ff ff6a 	bl	8005d7c <prvSampleTimeNow>
 8005ea8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b09      	cmp	r3, #9
 8005eae:	f200 8097 	bhi.w	8005fe0 <prvProcessReceivedCommands+0x1a0>
 8005eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb8 <prvProcessReceivedCommands+0x78>)
 8005eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb8:	08005ee1 	.word	0x08005ee1
 8005ebc:	08005ee1 	.word	0x08005ee1
 8005ec0:	08005ee1 	.word	0x08005ee1
 8005ec4:	08005f57 	.word	0x08005f57
 8005ec8:	08005f6b 	.word	0x08005f6b
 8005ecc:	08005fb7 	.word	0x08005fb7
 8005ed0:	08005ee1 	.word	0x08005ee1
 8005ed4:	08005ee1 	.word	0x08005ee1
 8005ed8:	08005f57 	.word	0x08005f57
 8005edc:	08005f6b 	.word	0x08005f6b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ee6:	f043 0301 	orr.w	r3, r3, #1
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	18d1      	adds	r1, r2, r3
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005efe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f00:	f7ff ff5c 	bl	8005dbc <prvInsertTimerInActiveList>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d06c      	beq.n	8005fe4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d061      	beq.n	8005fe4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	441a      	add	r2, r3
 8005f28:	2300      	movs	r3, #0
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	2100      	movs	r1, #0
 8005f30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f32:	f7ff fe01 	bl	8005b38 <xTimerGenericCommand>
 8005f36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d152      	bne.n	8005fe4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	61bb      	str	r3, [r7, #24]
}
 8005f50:	bf00      	nop
 8005f52:	bf00      	nop
 8005f54:	e7fd      	b.n	8005f52 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f5c:	f023 0301 	bic.w	r3, r3, #1
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005f68:	e03d      	b.n	8005fe6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f70:	f043 0301 	orr.w	r3, r3, #1
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f80:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10b      	bne.n	8005fa2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	617b      	str	r3, [r7, #20]
}
 8005f9c:	bf00      	nop
 8005f9e:	bf00      	nop
 8005fa0:	e7fd      	b.n	8005f9e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa4:	699a      	ldr	r2, [r3, #24]
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa8:	18d1      	adds	r1, r2, r3
 8005faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fb0:	f7ff ff04 	bl	8005dbc <prvInsertTimerInActiveList>
					break;
 8005fb4:	e017      	b.n	8005fe6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d103      	bne.n	8005fcc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005fc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fc6:	f000 fbe7 	bl	8006798 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005fca:	e00c      	b.n	8005fe6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fd2:	f023 0301 	bic.w	r3, r3, #1
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005fde:	e002      	b.n	8005fe6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005fe0:	bf00      	nop
 8005fe2:	e000      	b.n	8005fe6 <prvProcessReceivedCommands+0x1a6>
					break;
 8005fe4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005fe6:	4b08      	ldr	r3, [pc, #32]	@ (8006008 <prvProcessReceivedCommands+0x1c8>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	1d39      	adds	r1, r7, #4
 8005fec:	2200      	movs	r2, #0
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fe fbce 	bl	8004790 <xQueueReceive>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f47f af26 	bne.w	8005e48 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005ffc:	bf00      	nop
 8005ffe:	bf00      	nop
 8006000:	3730      	adds	r7, #48	@ 0x30
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	20000e70 	.word	0x20000e70

0800600c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b088      	sub	sp, #32
 8006010:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006012:	e049      	b.n	80060a8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006014:	4b2e      	ldr	r3, [pc, #184]	@ (80060d0 <prvSwitchTimerLists+0xc4>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800601e:	4b2c      	ldr	r3, [pc, #176]	@ (80060d0 <prvSwitchTimerLists+0xc4>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	3304      	adds	r3, #4
 800602c:	4618      	mov	r0, r3
 800602e:	f7fe f8db 	bl	80041e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b00      	cmp	r3, #0
 8006046:	d02f      	beq.n	80060a8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	4413      	add	r3, r2
 8006050:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	429a      	cmp	r2, r3
 8006058:	d90e      	bls.n	8006078 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006066:	4b1a      	ldr	r3, [pc, #104]	@ (80060d0 <prvSwitchTimerLists+0xc4>)
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	3304      	adds	r3, #4
 800606e:	4619      	mov	r1, r3
 8006070:	4610      	mov	r0, r2
 8006072:	f7fe f880 	bl	8004176 <vListInsert>
 8006076:	e017      	b.n	80060a8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006078:	2300      	movs	r3, #0
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	2300      	movs	r3, #0
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	2100      	movs	r1, #0
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f7ff fd58 	bl	8005b38 <xTimerGenericCommand>
 8006088:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10b      	bne.n	80060a8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	603b      	str	r3, [r7, #0]
}
 80060a2:	bf00      	nop
 80060a4:	bf00      	nop
 80060a6:	e7fd      	b.n	80060a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060a8:	4b09      	ldr	r3, [pc, #36]	@ (80060d0 <prvSwitchTimerLists+0xc4>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1b0      	bne.n	8006014 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80060b2:	4b07      	ldr	r3, [pc, #28]	@ (80060d0 <prvSwitchTimerLists+0xc4>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80060b8:	4b06      	ldr	r3, [pc, #24]	@ (80060d4 <prvSwitchTimerLists+0xc8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a04      	ldr	r2, [pc, #16]	@ (80060d0 <prvSwitchTimerLists+0xc4>)
 80060be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80060c0:	4a04      	ldr	r2, [pc, #16]	@ (80060d4 <prvSwitchTimerLists+0xc8>)
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	6013      	str	r3, [r2, #0]
}
 80060c6:	bf00      	nop
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	20000e68 	.word	0x20000e68
 80060d4:	20000e6c 	.word	0x20000e6c

080060d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80060de:	f000 f96b 	bl	80063b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80060e2:	4b15      	ldr	r3, [pc, #84]	@ (8006138 <prvCheckForValidListAndQueue+0x60>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d120      	bne.n	800612c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80060ea:	4814      	ldr	r0, [pc, #80]	@ (800613c <prvCheckForValidListAndQueue+0x64>)
 80060ec:	f7fd fff2 	bl	80040d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80060f0:	4813      	ldr	r0, [pc, #76]	@ (8006140 <prvCheckForValidListAndQueue+0x68>)
 80060f2:	f7fd ffef 	bl	80040d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80060f6:	4b13      	ldr	r3, [pc, #76]	@ (8006144 <prvCheckForValidListAndQueue+0x6c>)
 80060f8:	4a10      	ldr	r2, [pc, #64]	@ (800613c <prvCheckForValidListAndQueue+0x64>)
 80060fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80060fc:	4b12      	ldr	r3, [pc, #72]	@ (8006148 <prvCheckForValidListAndQueue+0x70>)
 80060fe:	4a10      	ldr	r2, [pc, #64]	@ (8006140 <prvCheckForValidListAndQueue+0x68>)
 8006100:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006102:	2300      	movs	r3, #0
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	4b11      	ldr	r3, [pc, #68]	@ (800614c <prvCheckForValidListAndQueue+0x74>)
 8006108:	4a11      	ldr	r2, [pc, #68]	@ (8006150 <prvCheckForValidListAndQueue+0x78>)
 800610a:	2110      	movs	r1, #16
 800610c:	200a      	movs	r0, #10
 800610e:	f7fe f8ff 	bl	8004310 <xQueueGenericCreateStatic>
 8006112:	4603      	mov	r3, r0
 8006114:	4a08      	ldr	r2, [pc, #32]	@ (8006138 <prvCheckForValidListAndQueue+0x60>)
 8006116:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006118:	4b07      	ldr	r3, [pc, #28]	@ (8006138 <prvCheckForValidListAndQueue+0x60>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d005      	beq.n	800612c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006120:	4b05      	ldr	r3, [pc, #20]	@ (8006138 <prvCheckForValidListAndQueue+0x60>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	490b      	ldr	r1, [pc, #44]	@ (8006154 <prvCheckForValidListAndQueue+0x7c>)
 8006126:	4618      	mov	r0, r3
 8006128:	f7fe fd24 	bl	8004b74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800612c:	f000 f976 	bl	800641c <vPortExitCritical>
}
 8006130:	bf00      	nop
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	20000e70 	.word	0x20000e70
 800613c:	20000e40 	.word	0x20000e40
 8006140:	20000e54 	.word	0x20000e54
 8006144:	20000e68 	.word	0x20000e68
 8006148:	20000e6c 	.word	0x20000e6c
 800614c:	20000f1c 	.word	0x20000f1c
 8006150:	20000e7c 	.word	0x20000e7c
 8006154:	08006c00 	.word	0x08006c00

08006158 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	3b04      	subs	r3, #4
 8006168:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006170:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	3b04      	subs	r3, #4
 8006176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	f023 0201 	bic.w	r2, r3, #1
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	3b04      	subs	r3, #4
 8006186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006188:	4a0c      	ldr	r2, [pc, #48]	@ (80061bc <pxPortInitialiseStack+0x64>)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	3b14      	subs	r3, #20
 8006192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	3b04      	subs	r3, #4
 800619e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f06f 0202 	mvn.w	r2, #2
 80061a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3b20      	subs	r3, #32
 80061ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80061ae:	68fb      	ldr	r3, [r7, #12]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	080061c1 	.word	0x080061c1

080061c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80061c6:	2300      	movs	r3, #0
 80061c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80061ca:	4b13      	ldr	r3, [pc, #76]	@ (8006218 <prvTaskExitError+0x58>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061d2:	d00b      	beq.n	80061ec <prvTaskExitError+0x2c>
	__asm volatile
 80061d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d8:	f383 8811 	msr	BASEPRI, r3
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	60fb      	str	r3, [r7, #12]
}
 80061e6:	bf00      	nop
 80061e8:	bf00      	nop
 80061ea:	e7fd      	b.n	80061e8 <prvTaskExitError+0x28>
	__asm volatile
 80061ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	60bb      	str	r3, [r7, #8]
}
 80061fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006200:	bf00      	nop
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0fc      	beq.n	8006202 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006208:	bf00      	nop
 800620a:	bf00      	nop
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	2000000c 	.word	0x2000000c
 800621c:	00000000 	.word	0x00000000

08006220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006220:	4b07      	ldr	r3, [pc, #28]	@ (8006240 <pxCurrentTCBConst2>)
 8006222:	6819      	ldr	r1, [r3, #0]
 8006224:	6808      	ldr	r0, [r1, #0]
 8006226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800622a:	f380 8809 	msr	PSP, r0
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f04f 0000 	mov.w	r0, #0
 8006236:	f380 8811 	msr	BASEPRI, r0
 800623a:	4770      	bx	lr
 800623c:	f3af 8000 	nop.w

08006240 <pxCurrentTCBConst2>:
 8006240:	20000940 	.word	0x20000940
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop

08006248 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006248:	4808      	ldr	r0, [pc, #32]	@ (800626c <prvPortStartFirstTask+0x24>)
 800624a:	6800      	ldr	r0, [r0, #0]
 800624c:	6800      	ldr	r0, [r0, #0]
 800624e:	f380 8808 	msr	MSP, r0
 8006252:	f04f 0000 	mov.w	r0, #0
 8006256:	f380 8814 	msr	CONTROL, r0
 800625a:	b662      	cpsie	i
 800625c:	b661      	cpsie	f
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	df00      	svc	0
 8006268:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800626a:	bf00      	nop
 800626c:	e000ed08 	.word	0xe000ed08

08006270 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006276:	4b47      	ldr	r3, [pc, #284]	@ (8006394 <xPortStartScheduler+0x124>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a47      	ldr	r2, [pc, #284]	@ (8006398 <xPortStartScheduler+0x128>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d10b      	bne.n	8006298 <xPortStartScheduler+0x28>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	60fb      	str	r3, [r7, #12]
}
 8006292:	bf00      	nop
 8006294:	bf00      	nop
 8006296:	e7fd      	b.n	8006294 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006298:	4b3e      	ldr	r3, [pc, #248]	@ (8006394 <xPortStartScheduler+0x124>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a3f      	ldr	r2, [pc, #252]	@ (800639c <xPortStartScheduler+0x12c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d10b      	bne.n	80062ba <xPortStartScheduler+0x4a>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	613b      	str	r3, [r7, #16]
}
 80062b4:	bf00      	nop
 80062b6:	bf00      	nop
 80062b8:	e7fd      	b.n	80062b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80062ba:	4b39      	ldr	r3, [pc, #228]	@ (80063a0 <xPortStartScheduler+0x130>)
 80062bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	22ff      	movs	r2, #255	@ 0xff
 80062ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80062d4:	78fb      	ldrb	r3, [r7, #3]
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	4b31      	ldr	r3, [pc, #196]	@ (80063a4 <xPortStartScheduler+0x134>)
 80062e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80062e2:	4b31      	ldr	r3, [pc, #196]	@ (80063a8 <xPortStartScheduler+0x138>)
 80062e4:	2207      	movs	r2, #7
 80062e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062e8:	e009      	b.n	80062fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80062ea:	4b2f      	ldr	r3, [pc, #188]	@ (80063a8 <xPortStartScheduler+0x138>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3b01      	subs	r3, #1
 80062f0:	4a2d      	ldr	r2, [pc, #180]	@ (80063a8 <xPortStartScheduler+0x138>)
 80062f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80062f4:	78fb      	ldrb	r3, [r7, #3]
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062fe:	78fb      	ldrb	r3, [r7, #3]
 8006300:	b2db      	uxtb	r3, r3
 8006302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006306:	2b80      	cmp	r3, #128	@ 0x80
 8006308:	d0ef      	beq.n	80062ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800630a:	4b27      	ldr	r3, [pc, #156]	@ (80063a8 <xPortStartScheduler+0x138>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f1c3 0307 	rsb	r3, r3, #7
 8006312:	2b04      	cmp	r3, #4
 8006314:	d00b      	beq.n	800632e <xPortStartScheduler+0xbe>
	__asm volatile
 8006316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	60bb      	str	r3, [r7, #8]
}
 8006328:	bf00      	nop
 800632a:	bf00      	nop
 800632c:	e7fd      	b.n	800632a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800632e:	4b1e      	ldr	r3, [pc, #120]	@ (80063a8 <xPortStartScheduler+0x138>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	021b      	lsls	r3, r3, #8
 8006334:	4a1c      	ldr	r2, [pc, #112]	@ (80063a8 <xPortStartScheduler+0x138>)
 8006336:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006338:	4b1b      	ldr	r3, [pc, #108]	@ (80063a8 <xPortStartScheduler+0x138>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006340:	4a19      	ldr	r2, [pc, #100]	@ (80063a8 <xPortStartScheduler+0x138>)
 8006342:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	b2da      	uxtb	r2, r3
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800634c:	4b17      	ldr	r3, [pc, #92]	@ (80063ac <xPortStartScheduler+0x13c>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a16      	ldr	r2, [pc, #88]	@ (80063ac <xPortStartScheduler+0x13c>)
 8006352:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006356:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006358:	4b14      	ldr	r3, [pc, #80]	@ (80063ac <xPortStartScheduler+0x13c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a13      	ldr	r2, [pc, #76]	@ (80063ac <xPortStartScheduler+0x13c>)
 800635e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006362:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006364:	f000 f8da 	bl	800651c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006368:	4b11      	ldr	r3, [pc, #68]	@ (80063b0 <xPortStartScheduler+0x140>)
 800636a:	2200      	movs	r2, #0
 800636c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800636e:	f000 f8f9 	bl	8006564 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006372:	4b10      	ldr	r3, [pc, #64]	@ (80063b4 <xPortStartScheduler+0x144>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a0f      	ldr	r2, [pc, #60]	@ (80063b4 <xPortStartScheduler+0x144>)
 8006378:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800637c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800637e:	f7ff ff63 	bl	8006248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006382:	f7ff f82f 	bl	80053e4 <vTaskSwitchContext>
	prvTaskExitError();
 8006386:	f7ff ff1b 	bl	80061c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	e000ed00 	.word	0xe000ed00
 8006398:	410fc271 	.word	0x410fc271
 800639c:	410fc270 	.word	0x410fc270
 80063a0:	e000e400 	.word	0xe000e400
 80063a4:	20000f6c 	.word	0x20000f6c
 80063a8:	20000f70 	.word	0x20000f70
 80063ac:	e000ed20 	.word	0xe000ed20
 80063b0:	2000000c 	.word	0x2000000c
 80063b4:	e000ef34 	.word	0xe000ef34

080063b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
	__asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	607b      	str	r3, [r7, #4]
}
 80063d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80063d2:	4b10      	ldr	r3, [pc, #64]	@ (8006414 <vPortEnterCritical+0x5c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	3301      	adds	r3, #1
 80063d8:	4a0e      	ldr	r2, [pc, #56]	@ (8006414 <vPortEnterCritical+0x5c>)
 80063da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80063dc:	4b0d      	ldr	r3, [pc, #52]	@ (8006414 <vPortEnterCritical+0x5c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d110      	bne.n	8006406 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80063e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006418 <vPortEnterCritical+0x60>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00b      	beq.n	8006406 <vPortEnterCritical+0x4e>
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	603b      	str	r3, [r7, #0]
}
 8006400:	bf00      	nop
 8006402:	bf00      	nop
 8006404:	e7fd      	b.n	8006402 <vPortEnterCritical+0x4a>
	}
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	2000000c 	.word	0x2000000c
 8006418:	e000ed04 	.word	0xe000ed04

0800641c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006422:	4b12      	ldr	r3, [pc, #72]	@ (800646c <vPortExitCritical+0x50>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10b      	bne.n	8006442 <vPortExitCritical+0x26>
	__asm volatile
 800642a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	607b      	str	r3, [r7, #4]
}
 800643c:	bf00      	nop
 800643e:	bf00      	nop
 8006440:	e7fd      	b.n	800643e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006442:	4b0a      	ldr	r3, [pc, #40]	@ (800646c <vPortExitCritical+0x50>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3b01      	subs	r3, #1
 8006448:	4a08      	ldr	r2, [pc, #32]	@ (800646c <vPortExitCritical+0x50>)
 800644a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800644c:	4b07      	ldr	r3, [pc, #28]	@ (800646c <vPortExitCritical+0x50>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d105      	bne.n	8006460 <vPortExitCritical+0x44>
 8006454:	2300      	movs	r3, #0
 8006456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	f383 8811 	msr	BASEPRI, r3
}
 800645e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	2000000c 	.word	0x2000000c

08006470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006470:	f3ef 8009 	mrs	r0, PSP
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	4b15      	ldr	r3, [pc, #84]	@ (80064d0 <pxCurrentTCBConst>)
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	f01e 0f10 	tst.w	lr, #16
 8006480:	bf08      	it	eq
 8006482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800648a:	6010      	str	r0, [r2, #0]
 800648c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006490:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006494:	f380 8811 	msr	BASEPRI, r0
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f7fe ffa0 	bl	80053e4 <vTaskSwitchContext>
 80064a4:	f04f 0000 	mov.w	r0, #0
 80064a8:	f380 8811 	msr	BASEPRI, r0
 80064ac:	bc09      	pop	{r0, r3}
 80064ae:	6819      	ldr	r1, [r3, #0]
 80064b0:	6808      	ldr	r0, [r1, #0]
 80064b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b6:	f01e 0f10 	tst.w	lr, #16
 80064ba:	bf08      	it	eq
 80064bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80064c0:	f380 8809 	msr	PSP, r0
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	f3af 8000 	nop.w

080064d0 <pxCurrentTCBConst>:
 80064d0:	20000940 	.word	0x20000940
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80064d4:	bf00      	nop
 80064d6:	bf00      	nop

080064d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
	__asm volatile
 80064de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	607b      	str	r3, [r7, #4]
}
 80064f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80064f2:	f7fe febd 	bl	8005270 <xTaskIncrementTick>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80064fc:	4b06      	ldr	r3, [pc, #24]	@ (8006518 <xPortSysTickHandler+0x40>)
 80064fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006502:	601a      	str	r2, [r3, #0]
 8006504:	2300      	movs	r3, #0
 8006506:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	f383 8811 	msr	BASEPRI, r3
}
 800650e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006510:	bf00      	nop
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	e000ed04 	.word	0xe000ed04

0800651c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800651c:	b480      	push	{r7}
 800651e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006520:	4b0b      	ldr	r3, [pc, #44]	@ (8006550 <vPortSetupTimerInterrupt+0x34>)
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006526:	4b0b      	ldr	r3, [pc, #44]	@ (8006554 <vPortSetupTimerInterrupt+0x38>)
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800652c:	4b0a      	ldr	r3, [pc, #40]	@ (8006558 <vPortSetupTimerInterrupt+0x3c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a0a      	ldr	r2, [pc, #40]	@ (800655c <vPortSetupTimerInterrupt+0x40>)
 8006532:	fba2 2303 	umull	r2, r3, r2, r3
 8006536:	099b      	lsrs	r3, r3, #6
 8006538:	4a09      	ldr	r2, [pc, #36]	@ (8006560 <vPortSetupTimerInterrupt+0x44>)
 800653a:	3b01      	subs	r3, #1
 800653c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800653e:	4b04      	ldr	r3, [pc, #16]	@ (8006550 <vPortSetupTimerInterrupt+0x34>)
 8006540:	2207      	movs	r2, #7
 8006542:	601a      	str	r2, [r3, #0]
}
 8006544:	bf00      	nop
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	e000e010 	.word	0xe000e010
 8006554:	e000e018 	.word	0xe000e018
 8006558:	20000000 	.word	0x20000000
 800655c:	10624dd3 	.word	0x10624dd3
 8006560:	e000e014 	.word	0xe000e014

08006564 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006564:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006574 <vPortEnableVFP+0x10>
 8006568:	6801      	ldr	r1, [r0, #0]
 800656a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800656e:	6001      	str	r1, [r0, #0]
 8006570:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006572:	bf00      	nop
 8006574:	e000ed88 	.word	0xe000ed88

08006578 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800657e:	f3ef 8305 	mrs	r3, IPSR
 8006582:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2b0f      	cmp	r3, #15
 8006588:	d915      	bls.n	80065b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800658a:	4a18      	ldr	r2, [pc, #96]	@ (80065ec <vPortValidateInterruptPriority+0x74>)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4413      	add	r3, r2
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006594:	4b16      	ldr	r3, [pc, #88]	@ (80065f0 <vPortValidateInterruptPriority+0x78>)
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	7afa      	ldrb	r2, [r7, #11]
 800659a:	429a      	cmp	r2, r3
 800659c:	d20b      	bcs.n	80065b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	607b      	str	r3, [r7, #4]
}
 80065b0:	bf00      	nop
 80065b2:	bf00      	nop
 80065b4:	e7fd      	b.n	80065b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80065b6:	4b0f      	ldr	r3, [pc, #60]	@ (80065f4 <vPortValidateInterruptPriority+0x7c>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80065be:	4b0e      	ldr	r3, [pc, #56]	@ (80065f8 <vPortValidateInterruptPriority+0x80>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d90b      	bls.n	80065de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80065c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ca:	f383 8811 	msr	BASEPRI, r3
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	603b      	str	r3, [r7, #0]
}
 80065d8:	bf00      	nop
 80065da:	bf00      	nop
 80065dc:	e7fd      	b.n	80065da <vPortValidateInterruptPriority+0x62>
	}
 80065de:	bf00      	nop
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	e000e3f0 	.word	0xe000e3f0
 80065f0:	20000f6c 	.word	0x20000f6c
 80065f4:	e000ed0c 	.word	0xe000ed0c
 80065f8:	20000f70 	.word	0x20000f70

080065fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b08a      	sub	sp, #40	@ 0x28
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006604:	2300      	movs	r3, #0
 8006606:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006608:	f7fe fd76 	bl	80050f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800660c:	4b5c      	ldr	r3, [pc, #368]	@ (8006780 <pvPortMalloc+0x184>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d101      	bne.n	8006618 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006614:	f000 f924 	bl	8006860 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006618:	4b5a      	ldr	r3, [pc, #360]	@ (8006784 <pvPortMalloc+0x188>)
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4013      	ands	r3, r2
 8006620:	2b00      	cmp	r3, #0
 8006622:	f040 8095 	bne.w	8006750 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01e      	beq.n	800666a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800662c:	2208      	movs	r2, #8
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4413      	add	r3, r2
 8006632:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	2b00      	cmp	r3, #0
 800663c:	d015      	beq.n	800666a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f023 0307 	bic.w	r3, r3, #7
 8006644:	3308      	adds	r3, #8
 8006646:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f003 0307 	and.w	r3, r3, #7
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00b      	beq.n	800666a <pvPortMalloc+0x6e>
	__asm volatile
 8006652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	617b      	str	r3, [r7, #20]
}
 8006664:	bf00      	nop
 8006666:	bf00      	nop
 8006668:	e7fd      	b.n	8006666 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d06f      	beq.n	8006750 <pvPortMalloc+0x154>
 8006670:	4b45      	ldr	r3, [pc, #276]	@ (8006788 <pvPortMalloc+0x18c>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	429a      	cmp	r2, r3
 8006678:	d86a      	bhi.n	8006750 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800667a:	4b44      	ldr	r3, [pc, #272]	@ (800678c <pvPortMalloc+0x190>)
 800667c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800667e:	4b43      	ldr	r3, [pc, #268]	@ (800678c <pvPortMalloc+0x190>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006684:	e004      	b.n	8006690 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006688:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	429a      	cmp	r2, r3
 8006698:	d903      	bls.n	80066a2 <pvPortMalloc+0xa6>
 800669a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1f1      	bne.n	8006686 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066a2:	4b37      	ldr	r3, [pc, #220]	@ (8006780 <pvPortMalloc+0x184>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d051      	beq.n	8006750 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2208      	movs	r2, #8
 80066b2:	4413      	add	r3, r2
 80066b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80066b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80066be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	1ad2      	subs	r2, r2, r3
 80066c6:	2308      	movs	r3, #8
 80066c8:	005b      	lsls	r3, r3, #1
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d920      	bls.n	8006710 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80066ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4413      	add	r3, r2
 80066d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	f003 0307 	and.w	r3, r3, #7
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00b      	beq.n	80066f8 <pvPortMalloc+0xfc>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	613b      	str	r3, [r7, #16]
}
 80066f2:	bf00      	nop
 80066f4:	bf00      	nop
 80066f6:	e7fd      	b.n	80066f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80066f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	1ad2      	subs	r2, r2, r3
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800670a:	69b8      	ldr	r0, [r7, #24]
 800670c:	f000 f90a 	bl	8006924 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006710:	4b1d      	ldr	r3, [pc, #116]	@ (8006788 <pvPortMalloc+0x18c>)
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	4a1b      	ldr	r2, [pc, #108]	@ (8006788 <pvPortMalloc+0x18c>)
 800671c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800671e:	4b1a      	ldr	r3, [pc, #104]	@ (8006788 <pvPortMalloc+0x18c>)
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	4b1b      	ldr	r3, [pc, #108]	@ (8006790 <pvPortMalloc+0x194>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	429a      	cmp	r2, r3
 8006728:	d203      	bcs.n	8006732 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800672a:	4b17      	ldr	r3, [pc, #92]	@ (8006788 <pvPortMalloc+0x18c>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a18      	ldr	r2, [pc, #96]	@ (8006790 <pvPortMalloc+0x194>)
 8006730:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	4b13      	ldr	r3, [pc, #76]	@ (8006784 <pvPortMalloc+0x188>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	431a      	orrs	r2, r3
 800673c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006742:	2200      	movs	r2, #0
 8006744:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006746:	4b13      	ldr	r3, [pc, #76]	@ (8006794 <pvPortMalloc+0x198>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3301      	adds	r3, #1
 800674c:	4a11      	ldr	r2, [pc, #68]	@ (8006794 <pvPortMalloc+0x198>)
 800674e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006750:	f7fe fce0 	bl	8005114 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	f003 0307 	and.w	r3, r3, #7
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00b      	beq.n	8006776 <pvPortMalloc+0x17a>
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	60fb      	str	r3, [r7, #12]
}
 8006770:	bf00      	nop
 8006772:	bf00      	nop
 8006774:	e7fd      	b.n	8006772 <pvPortMalloc+0x176>
	return pvReturn;
 8006776:	69fb      	ldr	r3, [r7, #28]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3728      	adds	r7, #40	@ 0x28
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	20004b7c 	.word	0x20004b7c
 8006784:	20004b90 	.word	0x20004b90
 8006788:	20004b80 	.word	0x20004b80
 800678c:	20004b74 	.word	0x20004b74
 8006790:	20004b84 	.word	0x20004b84
 8006794:	20004b88 	.word	0x20004b88

08006798 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b086      	sub	sp, #24
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d04f      	beq.n	800684a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067aa:	2308      	movs	r3, #8
 80067ac:	425b      	negs	r3, r3
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	4413      	add	r3, r2
 80067b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	4b25      	ldr	r3, [pc, #148]	@ (8006854 <vPortFree+0xbc>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4013      	ands	r3, r2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10b      	bne.n	80067de <vPortFree+0x46>
	__asm volatile
 80067c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ca:	f383 8811 	msr	BASEPRI, r3
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f3bf 8f4f 	dsb	sy
 80067d6:	60fb      	str	r3, [r7, #12]
}
 80067d8:	bf00      	nop
 80067da:	bf00      	nop
 80067dc:	e7fd      	b.n	80067da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00b      	beq.n	80067fe <vPortFree+0x66>
	__asm volatile
 80067e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	60bb      	str	r3, [r7, #8]
}
 80067f8:	bf00      	nop
 80067fa:	bf00      	nop
 80067fc:	e7fd      	b.n	80067fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	4b14      	ldr	r3, [pc, #80]	@ (8006854 <vPortFree+0xbc>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4013      	ands	r3, r2
 8006808:	2b00      	cmp	r3, #0
 800680a:	d01e      	beq.n	800684a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d11a      	bne.n	800684a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	4b0e      	ldr	r3, [pc, #56]	@ (8006854 <vPortFree+0xbc>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	43db      	mvns	r3, r3
 800681e:	401a      	ands	r2, r3
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006824:	f7fe fc68 	bl	80050f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	4b0a      	ldr	r3, [pc, #40]	@ (8006858 <vPortFree+0xc0>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4413      	add	r3, r2
 8006832:	4a09      	ldr	r2, [pc, #36]	@ (8006858 <vPortFree+0xc0>)
 8006834:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006836:	6938      	ldr	r0, [r7, #16]
 8006838:	f000 f874 	bl	8006924 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800683c:	4b07      	ldr	r3, [pc, #28]	@ (800685c <vPortFree+0xc4>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3301      	adds	r3, #1
 8006842:	4a06      	ldr	r2, [pc, #24]	@ (800685c <vPortFree+0xc4>)
 8006844:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006846:	f7fe fc65 	bl	8005114 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800684a:	bf00      	nop
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	20004b90 	.word	0x20004b90
 8006858:	20004b80 	.word	0x20004b80
 800685c:	20004b8c 	.word	0x20004b8c

08006860 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006866:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800686a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800686c:	4b27      	ldr	r3, [pc, #156]	@ (800690c <prvHeapInit+0xac>)
 800686e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00c      	beq.n	8006894 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3307      	adds	r3, #7
 800687e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f023 0307 	bic.w	r3, r3, #7
 8006886:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	4a1f      	ldr	r2, [pc, #124]	@ (800690c <prvHeapInit+0xac>)
 8006890:	4413      	add	r3, r2
 8006892:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006898:	4a1d      	ldr	r2, [pc, #116]	@ (8006910 <prvHeapInit+0xb0>)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800689e:	4b1c      	ldr	r3, [pc, #112]	@ (8006910 <prvHeapInit+0xb0>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	4413      	add	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068ac:	2208      	movs	r2, #8
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	1a9b      	subs	r3, r3, r2
 80068b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f023 0307 	bic.w	r3, r3, #7
 80068ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4a15      	ldr	r2, [pc, #84]	@ (8006914 <prvHeapInit+0xb4>)
 80068c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80068c2:	4b14      	ldr	r3, [pc, #80]	@ (8006914 <prvHeapInit+0xb4>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2200      	movs	r2, #0
 80068c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80068ca:	4b12      	ldr	r3, [pc, #72]	@ (8006914 <prvHeapInit+0xb4>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	1ad2      	subs	r2, r2, r3
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80068e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006914 <prvHeapInit+0xb4>)
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	4a0a      	ldr	r2, [pc, #40]	@ (8006918 <prvHeapInit+0xb8>)
 80068ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	4a09      	ldr	r2, [pc, #36]	@ (800691c <prvHeapInit+0xbc>)
 80068f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80068f8:	4b09      	ldr	r3, [pc, #36]	@ (8006920 <prvHeapInit+0xc0>)
 80068fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80068fe:	601a      	str	r2, [r3, #0]
}
 8006900:	bf00      	nop
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	20000f74 	.word	0x20000f74
 8006910:	20004b74 	.word	0x20004b74
 8006914:	20004b7c 	.word	0x20004b7c
 8006918:	20004b84 	.word	0x20004b84
 800691c:	20004b80 	.word	0x20004b80
 8006920:	20004b90 	.word	0x20004b90

08006924 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800692c:	4b28      	ldr	r3, [pc, #160]	@ (80069d0 <prvInsertBlockIntoFreeList+0xac>)
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	e002      	b.n	8006938 <prvInsertBlockIntoFreeList+0x14>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	429a      	cmp	r2, r3
 8006940:	d8f7      	bhi.n	8006932 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	4413      	add	r3, r2
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	429a      	cmp	r2, r3
 8006952:	d108      	bne.n	8006966 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	441a      	add	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	441a      	add	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	429a      	cmp	r2, r3
 8006978:	d118      	bne.n	80069ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	4b15      	ldr	r3, [pc, #84]	@ (80069d4 <prvInsertBlockIntoFreeList+0xb0>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	429a      	cmp	r2, r3
 8006984:	d00d      	beq.n	80069a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	441a      	add	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	601a      	str	r2, [r3, #0]
 80069a0:	e008      	b.n	80069b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069a2:	4b0c      	ldr	r3, [pc, #48]	@ (80069d4 <prvInsertBlockIntoFreeList+0xb0>)
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	601a      	str	r2, [r3, #0]
 80069aa:	e003      	b.n	80069b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d002      	beq.n	80069c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069c2:	bf00      	nop
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	20004b74 	.word	0x20004b74
 80069d4:	20004b7c 	.word	0x20004b7c

080069d8 <memset>:
 80069d8:	4402      	add	r2, r0
 80069da:	4603      	mov	r3, r0
 80069dc:	4293      	cmp	r3, r2
 80069de:	d100      	bne.n	80069e2 <memset+0xa>
 80069e0:	4770      	bx	lr
 80069e2:	f803 1b01 	strb.w	r1, [r3], #1
 80069e6:	e7f9      	b.n	80069dc <memset+0x4>

080069e8 <_reclaim_reent>:
 80069e8:	4b2d      	ldr	r3, [pc, #180]	@ (8006aa0 <_reclaim_reent+0xb8>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4283      	cmp	r3, r0
 80069ee:	b570      	push	{r4, r5, r6, lr}
 80069f0:	4604      	mov	r4, r0
 80069f2:	d053      	beq.n	8006a9c <_reclaim_reent+0xb4>
 80069f4:	69c3      	ldr	r3, [r0, #28]
 80069f6:	b31b      	cbz	r3, 8006a40 <_reclaim_reent+0x58>
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	b163      	cbz	r3, 8006a16 <_reclaim_reent+0x2e>
 80069fc:	2500      	movs	r5, #0
 80069fe:	69e3      	ldr	r3, [r4, #28]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	5959      	ldr	r1, [r3, r5]
 8006a04:	b9b1      	cbnz	r1, 8006a34 <_reclaim_reent+0x4c>
 8006a06:	3504      	adds	r5, #4
 8006a08:	2d80      	cmp	r5, #128	@ 0x80
 8006a0a:	d1f8      	bne.n	80069fe <_reclaim_reent+0x16>
 8006a0c:	69e3      	ldr	r3, [r4, #28]
 8006a0e:	4620      	mov	r0, r4
 8006a10:	68d9      	ldr	r1, [r3, #12]
 8006a12:	f000 f87b 	bl	8006b0c <_free_r>
 8006a16:	69e3      	ldr	r3, [r4, #28]
 8006a18:	6819      	ldr	r1, [r3, #0]
 8006a1a:	b111      	cbz	r1, 8006a22 <_reclaim_reent+0x3a>
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	f000 f875 	bl	8006b0c <_free_r>
 8006a22:	69e3      	ldr	r3, [r4, #28]
 8006a24:	689d      	ldr	r5, [r3, #8]
 8006a26:	b15d      	cbz	r5, 8006a40 <_reclaim_reent+0x58>
 8006a28:	4629      	mov	r1, r5
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	682d      	ldr	r5, [r5, #0]
 8006a2e:	f000 f86d 	bl	8006b0c <_free_r>
 8006a32:	e7f8      	b.n	8006a26 <_reclaim_reent+0x3e>
 8006a34:	680e      	ldr	r6, [r1, #0]
 8006a36:	4620      	mov	r0, r4
 8006a38:	f000 f868 	bl	8006b0c <_free_r>
 8006a3c:	4631      	mov	r1, r6
 8006a3e:	e7e1      	b.n	8006a04 <_reclaim_reent+0x1c>
 8006a40:	6961      	ldr	r1, [r4, #20]
 8006a42:	b111      	cbz	r1, 8006a4a <_reclaim_reent+0x62>
 8006a44:	4620      	mov	r0, r4
 8006a46:	f000 f861 	bl	8006b0c <_free_r>
 8006a4a:	69e1      	ldr	r1, [r4, #28]
 8006a4c:	b111      	cbz	r1, 8006a54 <_reclaim_reent+0x6c>
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f000 f85c 	bl	8006b0c <_free_r>
 8006a54:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006a56:	b111      	cbz	r1, 8006a5e <_reclaim_reent+0x76>
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f000 f857 	bl	8006b0c <_free_r>
 8006a5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a60:	b111      	cbz	r1, 8006a68 <_reclaim_reent+0x80>
 8006a62:	4620      	mov	r0, r4
 8006a64:	f000 f852 	bl	8006b0c <_free_r>
 8006a68:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006a6a:	b111      	cbz	r1, 8006a72 <_reclaim_reent+0x8a>
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	f000 f84d 	bl	8006b0c <_free_r>
 8006a72:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006a74:	b111      	cbz	r1, 8006a7c <_reclaim_reent+0x94>
 8006a76:	4620      	mov	r0, r4
 8006a78:	f000 f848 	bl	8006b0c <_free_r>
 8006a7c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006a7e:	b111      	cbz	r1, 8006a86 <_reclaim_reent+0x9e>
 8006a80:	4620      	mov	r0, r4
 8006a82:	f000 f843 	bl	8006b0c <_free_r>
 8006a86:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006a88:	b111      	cbz	r1, 8006a90 <_reclaim_reent+0xa8>
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f000 f83e 	bl	8006b0c <_free_r>
 8006a90:	6a23      	ldr	r3, [r4, #32]
 8006a92:	b11b      	cbz	r3, 8006a9c <_reclaim_reent+0xb4>
 8006a94:	4620      	mov	r0, r4
 8006a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a9a:	4718      	bx	r3
 8006a9c:	bd70      	pop	{r4, r5, r6, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20000010 	.word	0x20000010

08006aa4 <__libc_init_array>:
 8006aa4:	b570      	push	{r4, r5, r6, lr}
 8006aa6:	4d0d      	ldr	r5, [pc, #52]	@ (8006adc <__libc_init_array+0x38>)
 8006aa8:	4c0d      	ldr	r4, [pc, #52]	@ (8006ae0 <__libc_init_array+0x3c>)
 8006aaa:	1b64      	subs	r4, r4, r5
 8006aac:	10a4      	asrs	r4, r4, #2
 8006aae:	2600      	movs	r6, #0
 8006ab0:	42a6      	cmp	r6, r4
 8006ab2:	d109      	bne.n	8006ac8 <__libc_init_array+0x24>
 8006ab4:	4d0b      	ldr	r5, [pc, #44]	@ (8006ae4 <__libc_init_array+0x40>)
 8006ab6:	4c0c      	ldr	r4, [pc, #48]	@ (8006ae8 <__libc_init_array+0x44>)
 8006ab8:	f000 f87e 	bl	8006bb8 <_init>
 8006abc:	1b64      	subs	r4, r4, r5
 8006abe:	10a4      	asrs	r4, r4, #2
 8006ac0:	2600      	movs	r6, #0
 8006ac2:	42a6      	cmp	r6, r4
 8006ac4:	d105      	bne.n	8006ad2 <__libc_init_array+0x2e>
 8006ac6:	bd70      	pop	{r4, r5, r6, pc}
 8006ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006acc:	4798      	blx	r3
 8006ace:	3601      	adds	r6, #1
 8006ad0:	e7ee      	b.n	8006ab0 <__libc_init_array+0xc>
 8006ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ad6:	4798      	blx	r3
 8006ad8:	3601      	adds	r6, #1
 8006ada:	e7f2      	b.n	8006ac2 <__libc_init_array+0x1e>
 8006adc:	08006c70 	.word	0x08006c70
 8006ae0:	08006c70 	.word	0x08006c70
 8006ae4:	08006c70 	.word	0x08006c70
 8006ae8:	08006c74 	.word	0x08006c74

08006aec <__retarget_lock_acquire_recursive>:
 8006aec:	4770      	bx	lr

08006aee <__retarget_lock_release_recursive>:
 8006aee:	4770      	bx	lr

08006af0 <memcpy>:
 8006af0:	440a      	add	r2, r1
 8006af2:	4291      	cmp	r1, r2
 8006af4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006af8:	d100      	bne.n	8006afc <memcpy+0xc>
 8006afa:	4770      	bx	lr
 8006afc:	b510      	push	{r4, lr}
 8006afe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b06:	4291      	cmp	r1, r2
 8006b08:	d1f9      	bne.n	8006afe <memcpy+0xe>
 8006b0a:	bd10      	pop	{r4, pc}

08006b0c <_free_r>:
 8006b0c:	b538      	push	{r3, r4, r5, lr}
 8006b0e:	4605      	mov	r5, r0
 8006b10:	2900      	cmp	r1, #0
 8006b12:	d041      	beq.n	8006b98 <_free_r+0x8c>
 8006b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b18:	1f0c      	subs	r4, r1, #4
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	bfb8      	it	lt
 8006b1e:	18e4      	addlt	r4, r4, r3
 8006b20:	f000 f83e 	bl	8006ba0 <__malloc_lock>
 8006b24:	4a1d      	ldr	r2, [pc, #116]	@ (8006b9c <_free_r+0x90>)
 8006b26:	6813      	ldr	r3, [r2, #0]
 8006b28:	b933      	cbnz	r3, 8006b38 <_free_r+0x2c>
 8006b2a:	6063      	str	r3, [r4, #4]
 8006b2c:	6014      	str	r4, [r2, #0]
 8006b2e:	4628      	mov	r0, r5
 8006b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b34:	f000 b83a 	b.w	8006bac <__malloc_unlock>
 8006b38:	42a3      	cmp	r3, r4
 8006b3a:	d908      	bls.n	8006b4e <_free_r+0x42>
 8006b3c:	6820      	ldr	r0, [r4, #0]
 8006b3e:	1821      	adds	r1, r4, r0
 8006b40:	428b      	cmp	r3, r1
 8006b42:	bf01      	itttt	eq
 8006b44:	6819      	ldreq	r1, [r3, #0]
 8006b46:	685b      	ldreq	r3, [r3, #4]
 8006b48:	1809      	addeq	r1, r1, r0
 8006b4a:	6021      	streq	r1, [r4, #0]
 8006b4c:	e7ed      	b.n	8006b2a <_free_r+0x1e>
 8006b4e:	461a      	mov	r2, r3
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	b10b      	cbz	r3, 8006b58 <_free_r+0x4c>
 8006b54:	42a3      	cmp	r3, r4
 8006b56:	d9fa      	bls.n	8006b4e <_free_r+0x42>
 8006b58:	6811      	ldr	r1, [r2, #0]
 8006b5a:	1850      	adds	r0, r2, r1
 8006b5c:	42a0      	cmp	r0, r4
 8006b5e:	d10b      	bne.n	8006b78 <_free_r+0x6c>
 8006b60:	6820      	ldr	r0, [r4, #0]
 8006b62:	4401      	add	r1, r0
 8006b64:	1850      	adds	r0, r2, r1
 8006b66:	4283      	cmp	r3, r0
 8006b68:	6011      	str	r1, [r2, #0]
 8006b6a:	d1e0      	bne.n	8006b2e <_free_r+0x22>
 8006b6c:	6818      	ldr	r0, [r3, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	6053      	str	r3, [r2, #4]
 8006b72:	4408      	add	r0, r1
 8006b74:	6010      	str	r0, [r2, #0]
 8006b76:	e7da      	b.n	8006b2e <_free_r+0x22>
 8006b78:	d902      	bls.n	8006b80 <_free_r+0x74>
 8006b7a:	230c      	movs	r3, #12
 8006b7c:	602b      	str	r3, [r5, #0]
 8006b7e:	e7d6      	b.n	8006b2e <_free_r+0x22>
 8006b80:	6820      	ldr	r0, [r4, #0]
 8006b82:	1821      	adds	r1, r4, r0
 8006b84:	428b      	cmp	r3, r1
 8006b86:	bf04      	itt	eq
 8006b88:	6819      	ldreq	r1, [r3, #0]
 8006b8a:	685b      	ldreq	r3, [r3, #4]
 8006b8c:	6063      	str	r3, [r4, #4]
 8006b8e:	bf04      	itt	eq
 8006b90:	1809      	addeq	r1, r1, r0
 8006b92:	6021      	streq	r1, [r4, #0]
 8006b94:	6054      	str	r4, [r2, #4]
 8006b96:	e7ca      	b.n	8006b2e <_free_r+0x22>
 8006b98:	bd38      	pop	{r3, r4, r5, pc}
 8006b9a:	bf00      	nop
 8006b9c:	20004cd0 	.word	0x20004cd0

08006ba0 <__malloc_lock>:
 8006ba0:	4801      	ldr	r0, [pc, #4]	@ (8006ba8 <__malloc_lock+0x8>)
 8006ba2:	f7ff bfa3 	b.w	8006aec <__retarget_lock_acquire_recursive>
 8006ba6:	bf00      	nop
 8006ba8:	20004ccc 	.word	0x20004ccc

08006bac <__malloc_unlock>:
 8006bac:	4801      	ldr	r0, [pc, #4]	@ (8006bb4 <__malloc_unlock+0x8>)
 8006bae:	f7ff bf9e 	b.w	8006aee <__retarget_lock_release_recursive>
 8006bb2:	bf00      	nop
 8006bb4:	20004ccc 	.word	0x20004ccc

08006bb8 <_init>:
 8006bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bba:	bf00      	nop
 8006bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bbe:	bc08      	pop	{r3}
 8006bc0:	469e      	mov	lr, r3
 8006bc2:	4770      	bx	lr

08006bc4 <_fini>:
 8006bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc6:	bf00      	nop
 8006bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bca:	bc08      	pop	{r3}
 8006bcc:	469e      	mov	lr, r3
 8006bce:	4770      	bx	lr
